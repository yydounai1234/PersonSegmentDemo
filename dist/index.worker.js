/*! For license information please see index.worker.js.LICENSE.txt */
(()=>{var e={720:e=>{e.exports=n;var t=null;try{t=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function n(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function s(e){return!0===(e&&e.__isLong__)}n.prototype.__isLong__,Object.defineProperty(n.prototype,"__isLong__",{value:!0}),n.isLong=s;var a={},r={};function i(e,t){var n,s,i;return t?(i=0<=(e>>>=0)&&e<256)&&(s=r[e])?s:(n=l(e,(0|e)<0?-1:0,!0),i&&(r[e]=n),n):(i=-128<=(e|=0)&&e<128)&&(s=a[e])?s:(n=l(e,e<0?-1:0,!1),i&&(a[e]=n),n)}function o(e,t){if(isNaN(e))return t?y:g;if(t){if(e<0)return y;if(e>=d)return v}else{if(e<=-f)return I;if(e+1>=f)return k}return e<0?o(-e,t).neg():l(e%p|0,e/p|0,t)}function l(e,t,s){return new n(e,t,s)}n.fromInt=i,n.fromNumber=o,n.fromBits=l;var u=Math.pow;function c(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return g;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var s;if((s=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===s)return c(e.substring(1),t,n).neg();for(var a=o(u(n,8)),r=g,i=0;i<e.length;i+=8){var l=Math.min(8,e.length-i),h=parseInt(e.substring(i,i+l),n);if(l<8){var p=o(u(n,l));r=r.mul(p).add(o(h))}else r=(r=r.mul(a)).add(o(h))}return r.unsigned=t,r}function h(e,t){return"number"==typeof e?o(e,t):"string"==typeof e?c(e,t):l(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}n.fromString=c,n.fromValue=h;var p=4294967296,d=p*p,f=d/2,m=i(1<<24),g=i(0);n.ZERO=g;var y=i(0,!0);n.UZERO=y;var b=i(1);n.ONE=b;var x=i(1,!0);n.UONE=x;var w=i(-1);n.NEG_ONE=w;var k=l(-1,2147483647,!1);n.MAX_VALUE=k;var v=l(-1,-1,!0);n.MAX_UNSIGNED_VALUE=v;var I=l(0,-2147483648,!1);n.MIN_VALUE=I;var N=n.prototype;N.toInt=function(){return this.unsigned?this.low>>>0:this.low},N.toNumber=function(){return this.unsigned?(this.high>>>0)*p+(this.low>>>0):this.high*p+(this.low>>>0)},N.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(I)){var t=o(e),n=this.div(t),s=n.mul(t).sub(this);return n.toString(e)+s.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var a=o(u(e,6),this.unsigned),r=this,i="";;){var l=r.div(a),c=(r.sub(l.mul(a)).toInt()>>>0).toString(e);if((r=l).isZero())return c+i;for(;c.length<6;)c="0"+c;i=""+c+i}},N.getHighBits=function(){return this.high},N.getHighBitsUnsigned=function(){return this.high>>>0},N.getLowBits=function(){return this.low},N.getLowBitsUnsigned=function(){return this.low>>>0},N.getNumBitsAbs=function(){if(this.isNegative())return this.eq(I)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},N.isZero=function(){return 0===this.high&&0===this.low},N.eqz=N.isZero,N.isNegative=function(){return!this.unsigned&&this.high<0},N.isPositive=function(){return this.unsigned||this.high>=0},N.isOdd=function(){return 1==(1&this.low)},N.isEven=function(){return 0==(1&this.low)},N.equals=function(e){return s(e)||(e=h(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},N.eq=N.equals,N.notEquals=function(e){return!this.eq(e)},N.neq=N.notEquals,N.ne=N.notEquals,N.lessThan=function(e){return this.comp(e)<0},N.lt=N.lessThan,N.lessThanOrEqual=function(e){return this.comp(e)<=0},N.lte=N.lessThanOrEqual,N.le=N.lessThanOrEqual,N.greaterThan=function(e){return this.comp(e)>0},N.gt=N.greaterThan,N.greaterThanOrEqual=function(e){return this.comp(e)>=0},N.gte=N.greaterThanOrEqual,N.ge=N.greaterThanOrEqual,N.compare=function(e){if(s(e)||(e=h(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},N.comp=N.compare,N.negate=function(){return!this.unsigned&&this.eq(I)?I:this.not().add(b)},N.neg=N.negate,N.add=function(e){s(e)||(e=h(e));var t=this.high>>>16,n=65535&this.high,a=this.low>>>16,r=65535&this.low,i=e.high>>>16,o=65535&e.high,u=e.low>>>16,c=0,p=0,d=0,f=0;return d+=(f+=r+(65535&e.low))>>>16,p+=(d+=a+u)>>>16,c+=(p+=n+o)>>>16,c+=t+i,l((d&=65535)<<16|(f&=65535),(c&=65535)<<16|(p&=65535),this.unsigned)},N.subtract=function(e){return s(e)||(e=h(e)),this.add(e.neg())},N.sub=N.subtract,N.multiply=function(e){if(this.isZero())return g;if(s(e)||(e=h(e)),t)return l(t.mul(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned);if(e.isZero())return g;if(this.eq(I))return e.isOdd()?I:g;if(e.eq(I))return this.isOdd()?I:g;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(m)&&e.lt(m))return o(this.toNumber()*e.toNumber(),this.unsigned);var n=this.high>>>16,a=65535&this.high,r=this.low>>>16,i=65535&this.low,u=e.high>>>16,c=65535&e.high,p=e.low>>>16,d=65535&e.low,f=0,y=0,b=0,x=0;return b+=(x+=i*d)>>>16,y+=(b+=r*d)>>>16,b&=65535,y+=(b+=i*p)>>>16,f+=(y+=a*d)>>>16,y&=65535,f+=(y+=r*p)>>>16,y&=65535,f+=(y+=i*c)>>>16,f+=n*d+a*p+r*c+i*u,l((b&=65535)<<16|(x&=65535),(f&=65535)<<16|(y&=65535),this.unsigned)},N.mul=N.multiply,N.divide=function(e){if(s(e)||(e=h(e)),e.isZero())throw Error("division by zero");var n,a,r;if(t)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?l((this.unsigned?t.div_u:t.div_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?y:g;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return y;if(e.gt(this.shru(1)))return x;r=y}else{if(this.eq(I))return e.eq(b)||e.eq(w)?I:e.eq(I)?b:(n=this.shr(1).div(e).shl(1)).eq(g)?e.isNegative()?b:w:(a=this.sub(e.mul(n)),r=n.add(a.div(e)));if(e.eq(I))return this.unsigned?y:g;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();r=g}for(a=this;a.gte(e);){n=Math.max(1,Math.floor(a.toNumber()/e.toNumber()));for(var i=Math.ceil(Math.log(n)/Math.LN2),c=i<=48?1:u(2,i-48),p=o(n),d=p.mul(e);d.isNegative()||d.gt(a);)d=(p=o(n-=c,this.unsigned)).mul(e);p.isZero()&&(p=b),r=r.add(p),a=a.sub(d)}return r},N.div=N.divide,N.modulo=function(e){return s(e)||(e=h(e)),t?l((this.unsigned?t.rem_u:t.rem_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},N.mod=N.modulo,N.rem=N.modulo,N.not=function(){return l(~this.low,~this.high,this.unsigned)},N.and=function(e){return s(e)||(e=h(e)),l(this.low&e.low,this.high&e.high,this.unsigned)},N.or=function(e){return s(e)||(e=h(e)),l(this.low|e.low,this.high|e.high,this.unsigned)},N.xor=function(e){return s(e)||(e=h(e)),l(this.low^e.low,this.high^e.high,this.unsigned)},N.shiftLeft=function(e){return s(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?l(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):l(0,this.low<<e-32,this.unsigned)},N.shl=N.shiftLeft,N.shiftRight=function(e){return s(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?l(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):l(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},N.shr=N.shiftRight,N.shiftRightUnsigned=function(e){if(s(e)&&(e=e.toInt()),0==(e&=63))return this;var t=this.high;return e<32?l(this.low>>>e|t<<32-e,t>>>e,this.unsigned):l(32===e?t:t>>>e-32,0,this.unsigned)},N.shru=N.shiftRightUnsigned,N.shr_u=N.shiftRightUnsigned,N.toSigned=function(){return this.unsigned?l(this.low,this.high,!1):this},N.toUnsigned=function(){return this.unsigned?this:l(this.low,this.high,!0)},N.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},N.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},N.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},n.fromBytes=function(e,t,s){return s?n.fromBytesLE(e,t):n.fromBytesBE(e,t)},n.fromBytesLE=function(e,t){return new n(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},n.fromBytesBE=function(e,t){return new n(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},377:(e,t,n)=>{var s=n(832),a=n(652),r=n(801),i=n(30),o=n(618),l=n(49),u=n(971);u.alea=s,u.xor128=a,u.xorwow=r,u.xorshift7=i,u.xor4096=o,u.tychei=l,e.exports=u},832:function(e,t,n){var s;!function(e,a,r){function i(e){var t,n=this,s=(t=4022871197,function(e){e=e.toString();for(var n=0;n<e.length;n++){var s=.02519603282416938*(t+=e.charCodeAt(n));s-=t=s>>>0,t=(s*=t)>>>0,t+=4294967296*(s-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=s(" "),n.s1=s(" "),n.s2=s(" "),n.s0-=s(e),n.s0<0&&(n.s0+=1),n.s1-=s(e),n.s1<0&&(n.s1+=1),n.s2-=s(e),n.s2<0&&(n.s2+=1),s=null}function o(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function l(e,t){var n=new i(e),s=t&&t.state,a=n.next;return a.int32=function(){return 4294967296*n.next()|0},a.double=function(){return a()+11102230246251565e-32*(2097152*a()|0)},a.quick=a,s&&("object"==typeof s&&o(s,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,a))||(a.exports=s):this.alea=l}(0,e=n.nmd(e),n.amdD)},49:function(e,t,n){var s;!function(e,a,r){function i(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,s=t.d,a=t.a;return e=e<<25^e>>>7^n,n=n-s|0,s=s<<24^s>>>8^a,a=a-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-s|0,t.d=s<<16^n>>>16^a,t.a=a-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var s=0;s<n.length+20;s++)t.b^=0|n.charCodeAt(s),t.next()}function o(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function l(e,t){var n=new i(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&("object"==typeof s&&o(s,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,a))||(a.exports=s):this.tychei=l}(0,e=n.nmd(e),n.amdD)},652:function(e,t,n){var s;!function(e,a,r){function i(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function l(e,t){var n=new i(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&("object"==typeof s&&o(s,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,a))||(a.exports=s):this.xor128=l}(0,e=n.nmd(e),n.amdD)},618:function(e,t,n){var s;!function(e,a,r){function i(e){var t=this;t.next=function(){var e,n,s=t.w,a=t.X,r=t.i;return t.w=s=s+1640531527|0,n=a[r+34&127],e=a[r=r+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=a[r]=n^e,t.i=r,n+(s^s>>>16)|0},function(e,t){var n,s,a,r,i,o=[],l=128;for(t===(0|t)?(s=t,t=null):(t+="\0",s=0,l=Math.max(l,t.length)),a=0,r=-32;r<l;++r)t&&(s^=t.charCodeAt((r+32)%t.length)),0===r&&(i=s),s^=s<<10,s^=s>>>15,s^=s<<4,s^=s>>>13,r>=0&&(i=i+1640531527|0,a=0==(n=o[127&r]^=s+i)?a+1:0);for(a>=128&&(o[127&(t&&t.length||0)]=-1),a=127,r=512;r>0;--r)s=o[a+34&127],n=o[a=a+1&127],s^=s<<13,n^=n<<17,s^=s>>>15,n^=n>>>12,o[a]=s^n;e.w=i,e.X=o,e.i=a}(t,e)}function o(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&(s.X&&o(s,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,a))||(a.exports=s):this.xor4096=l}(0,e=n.nmd(e),n.amdD)},30:function(e,t,n){var s;!function(e,a,r){function i(e){var t=this;t.next=function(){var e,n,s=t.x,a=t.i;return e=s[a],n=(e^=e>>>7)^e<<24,n^=(e=s[a+1&7])^e>>>10,n^=(e=s[a+3&7])^e>>>3,n^=(e=s[a+4&7])^e<<7,e=s[a+7&7],n^=(e^=e<<13)^e<<9,s[a]=n,t.i=a+1&7,n},function(e,t){var n,s=[];if(t===(0|t))s[0]=t;else for(t=""+t,n=0;n<t.length;++n)s[7&n]=s[7&n]<<15^t.charCodeAt(n)+s[n+1&7]<<13;for(;s.length<8;)s.push(0);for(n=0;n<8&&0===s[n];++n);for(8==n?s[7]=-1:s[n],e.x=s,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function o(e,t){return t.x=e.x.slice(),t.i=e.i,t}function l(e,t){null==e&&(e=+new Date);var n=new i(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&(s.x&&o(s,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,a))||(a.exports=s):this.xorshift7=l}(0,e=n.nmd(e),n.amdD)},801:function(e,t,n){var s;!function(e,a,r){function i(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var s=0;s<n.length+64;s++)t.x^=0|n.charCodeAt(s),s==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function l(e,t){var n=new i(e),s=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,s&&("object"==typeof s&&o(s,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=l:n.amdD&&n.amdO?void 0===(s=function(){return l}.call(t,n,t,a))||(a.exports=s):this.xorwow=l}(0,e=n.nmd(e),n.amdD)},971:(e,t,n)=>{var s;!function(a,r){var i,o=this,l=256,u=r.pow(l,6),c=r.pow(2,52),h=2*c,p=255;function d(e,t,n){var s=[],p=y(g((t=1==t?{entropy:!0}:t||{}).entropy?[e,b(a)]:null==e?function(){try{var e;return i&&(e=i.randomBytes)?e=e(l):(e=new Uint8Array(l),(o.crypto||o.msCrypto).getRandomValues(e)),b(e)}catch(e){var t=o.navigator,n=t&&t.plugins;return[+new Date,o,n,o.screen,b(a)]}}():e,3),s),d=new f(s),x=function(){for(var e=d.g(6),t=u,n=0;e<c;)e=(e+n)*l,t*=l,n=d.g(1);for(;e>=h;)e/=2,t/=2,n>>>=1;return(e+n)/t};return x.int32=function(){return 0|d.g(4)},x.quick=function(){return d.g(4)/4294967296},x.double=x,y(b(d.S),a),(t.pass||n||function(e,t,n,s){return s&&(s.S&&m(s,d),e.state=function(){return m(d,{})}),n?(r.random=e,t):e})(x,p,"global"in t?t.global:this==r,t.state)}function f(e){var t,n=e.length,s=this,a=0,r=s.i=s.j=0,i=s.S=[];for(n||(e=[n++]);a<l;)i[a]=a++;for(a=0;a<l;a++)i[a]=i[r=p&r+e[a%n]+(t=i[a])],i[r]=t;(s.g=function(e){for(var t,n=0,a=s.i,r=s.j,i=s.S;e--;)t=i[a=p&a+1],n=n*l+i[p&(i[a]=i[r=p&r+t])+(i[r]=t)];return s.i=a,s.j=r,n})(l)}function m(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){var n,s=[],a=typeof e;if(t&&"object"==a)for(n in e)try{s.push(g(e[n],t-1))}catch(e){}return s.length?s:"string"==a?e:e+"\0"}function y(e,t){for(var n,s=e+"",a=0;a<s.length;)t[p&a]=p&(n^=19*t[p&a])+s.charCodeAt(a++);return b(t)}function b(e){return String.fromCharCode.apply(0,e)}if(r.seedrandom=d,y(r.random(),a),e.exports){e.exports=d;try{i=n(42)}catch(e){}}else void 0===(s=function(){return d}.call(t,n,t,e))||(e.exports=s)}([],Math)},410:()=>{},628:()=>{},601:()=>{},792:()=>{},977:()=>{},42:()=>{}},t={};function n(s){var a=t[s];if(void 0!==a)return a.exports;var r=t[s]={id:s,loaded:!1,exports:{}};return e[s].call(r.exports,r,r.exports,n),r.loaded=!0,r.exports}n.amdD=function(){throw new Error("define cannot be used indirect")},n.amdO={},n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";var e={};n.r(e),n.d(e,{assertParamsValid:()=>Pr,computeFlatOffset:()=>Qr,computeOutShape:()=>Vr,getNormalizedAxes:()=>jr,isSliceContinous:()=>Jr,maskToAxes:()=>Wr,parseSliceParams:()=>ei,sliceInfo:()=>ti,startForAxis:()=>Yr,startIndicesWithElidedDims:()=>qr,stopForAxis:()=>Zr,stopIndicesWithElidedDims:()=>Kr,stridesForAxis:()=>Xr,stridesWithElidedDims:()=>Ur});var t={};n.r(t),n.d(t,{collectGatherOpShapeInfo:()=>Xc,computeOutShape:()=>Kc,segOpComputeOptimalWindowSize:()=>qc});var s={};n.r(s),n.d(s,{ERF_A1:()=>fc,ERF_A2:()=>mc,ERF_A3:()=>gc,ERF_A4:()=>yc,ERF_A5:()=>bc,ERF_P:()=>dc,PARALLELIZE_THRESHOLD:()=>Qu,SELU_SCALE:()=>pc,SELU_SCALEALPHA:()=>hc,applyActivation:()=>Ol,assertAndGetBroadcastShape:()=>Lr,assertAxesAreInnerMostDims:()=>_o,assertParamsConsistent:()=>Zu,assignToTypedArray:()=>Nc,axesAreInnerMostDims:()=>Ao,calculateShapes:()=>cc,checkEinsumDimSizes:()=>Ac,checkPadOnDimRoundingMode:()=>Di,combineLocations:()=>Ro,complexWithEvenIndex:()=>kc,complexWithOddIndex:()=>vc,computeConv2DInfo:()=>Ii,computeConv3DInfo:()=>Ni,computeDefaultPad:()=>Si,computeDilation2DInfo:()=>wi,computeOptimalWindowSize:()=>ec,computeOutAndReduceShapes:()=>Fo,computeOutShape:()=>Ju,computePool2DInfo:()=>ki,computePool3DInfo:()=>vi,convertConv2DDataFormat:()=>Fi,decodeEinsumEquation:()=>Cc,eitherStridesOrDilationsAreOne:()=>Ri,expandShapeToKeepDim:()=>Do,exponent:()=>Tc,exponents:()=>Sc,fromStringArrayToUint8:()=>Zc,fromUint8ToStringArray:()=>Yc,getAxesPermutation:()=>Oo,getBroadcastDims:()=>Or,getComplexWithIndex:()=>Ic,getEinsumComputePath:()=>Rc,getEinsumPermutation:()=>Ec,getFusedBiasGradient:()=>_l,getFusedDyActivation:()=>Dl,getImageCenter:()=>tc,getInnerMostAxes:()=>Lo,getPermuted:()=>sc,getReductionAxes:()=>Mr,getReshaped:()=>nc,getReshapedPermuted:()=>ac,getSliceBeginCoords:()=>rc,getSliceSize:()=>ic,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>Oc,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>Mc,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>Lc,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>Pc,getSparseReshapeInputOutputMismatchErrorMessage:()=>Vc,getSparseReshapeInputOutputMultipleErrorMessage:()=>Wc,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>zc,getSparseReshapeNegativeOutputDimErrorMessage:()=>Bc,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>jc,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>Uc,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>Gc,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>Hc,getUndoAxesPermutation:()=>Mo,isIdentityPermutation:()=>Fc,log:()=>Is,mergeRealAndImagArrays:()=>xc,prepareAndValidate:()=>oc,prepareSplitSize:()=>_c,segment_util:()=>t,shouldFuse:()=>Ml,slice_util:()=>e,splitRealAndImagArrays:()=>wc,tupleValuesAreOne:()=>Ai,upcastType:()=>ba,validateInput:()=>uc,validateUpdateShape:()=>lc,warn:()=>vs});var a={};n.r(a),n.d(a,{json:()=>hx});var r={};n.r(r),n.d(r,{json:()=>px});var i={};n.r(i),n.d(i,{json:()=>dx});var o={};n.r(o),n.d(o,{json:()=>fx});var l={};n.r(l),n.d(l,{json:()=>mx});var u={};n.r(u),n.d(u,{json:()=>gx});var c={};n.r(c),n.d(c,{json:()=>yx});var h={};n.r(h),n.d(h,{json:()=>bx});var p={};n.r(p),n.d(p,{json:()=>xx});var d={};n.r(d),n.d(d,{json:()=>wx});var f={};n.r(f),n.d(f,{json:()=>kx});var m={};n.r(m),n.d(m,{json:()=>vx});var g={};n.r(g),n.d(g,{json:()=>Ix});var y={};n.r(y),n.d(y,{json:()=>Nx});var b={};n.r(b),n.d(b,{json:()=>Sx});var x={};n.r(x),n.d(x,{json:()=>Tx});var w={};n.r(w),n.d(w,{json:()=>$x});var k={};n.r(k),n.d(k,{json:()=>Cx});var v={};n.r(v),n.d(v,{json:()=>Ex});var I={};n.r(I),n.d(I,{addImpl:()=>Mk,bincountImpl:()=>Cv,bincountReduceImpl:()=>Ev,ceilImpl:()=>Fv,concatImpl:()=>zv,equalImpl:()=>kI,expImpl:()=>FI,expm1Impl:()=>LI,floorImpl:()=>eN,gatherNdImpl:()=>lN,gatherV2Impl:()=>cN,greaterEqualImpl:()=>mN,greaterImpl:()=>pN,lessEqualImpl:()=>CN,lessImpl:()=>SN,linSpaceImpl:()=>RN,logImpl:()=>DN,maxImpl:()=>KN,maximumImpl:()=>ZN,minimumImpl:()=>oS,multiplyImpl:()=>dI,negImpl:()=>yS,notEqualImpl:()=>SS,prodImpl:()=>zS,rangeImpl:()=>PS,rsqrtImpl:()=>JS,scatterImpl:()=>tT,sigmoidImpl:()=>Ik,simpleAbsImpl:()=>Hk,sliceImpl:()=>Nv,sparseFillEmptyRowsImpl:()=>kT,sparseReshapeImpl:()=>IT,sparseSegmentReductionImpl:()=>ST,sqrtImpl:()=>AT,squaredDifferenceImpl:()=>_T,stridedSliceImpl:()=>BT,stringNGramsImpl:()=>VT,stringSplitImpl:()=>HT,stringToHashBucketFastImpl:()=>qT,subImpl:()=>UI,tileImpl:()=>JT,topKImpl:()=>t$,transposeImpl:()=>Jk,uniqueImpl:()=>o$});class N{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class S{refCount(e){return T("refCount")}incRef(e){return T("incRef")}timerAvailable(){return!0}time(e){return T("time")}read(e){return T("read")}readSync(e){return T("readSync")}readToGPU(e,t){return T("readToGPU")}numDataIds(){return T("numDataIds")}disposeData(e,t){return T("disposeData")}write(e,t,n){return T("write")}move(e,t,n,s,a){return T("move")}memory(){return T("memory")}floatPrecision(){return T("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return T("dispose")}}function T(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function $(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,A(e,t,n)}function C(e,t,n){return Math.max(e,Math.min(t,n))}function E(e){return e%2==0?e:e+1}function A(e,t,n){const s=e[t];e[t]=e[n],e[n]=s}function R(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function F(e,t,n=""){R(M(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function D(e){R(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function _(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||q(e)&&!n)for(let s=0;s<e.length;++s)_(e[s],t,n);else t.push(e);return t}function O(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function M(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function L(e){return e%1==0}function z(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function B(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function P(e,t=(e=>0),n){return new Promise(((s,a)=>{let r=0;const i=()=>{if(e())return void s();r++;const o=t(r);null!=n&&r>=n?a():setTimeout(i,o)};i()}))}function W(e,t){let n=1,s=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==s)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${s} and dim ${t}`);s=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===s){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!=0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const a=e.slice();return a[s]=t/n,a}function V(e,t){const n=t.length;return R((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),R(e.every((e=>L(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function U(e,t){const n=[],s=[],a=null!=t&&Array.isArray(t)&&0===t.length,r=null==t||a?null:V(t,e).sort();let i=0;for(let t=0;t<e.length;++t){if(null!=r){if(r[i]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==r[i]||r[i]>t)&&1===e[t]&&(n.push(e[t]),s.push(t)),r[i]<=t&&i++}1!==e[t]&&(n.push(e[t]),s.push(t))}return{newShape:n,keptDims:s}}function G(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function H(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function j(e,t){return!("complex64"===t||"float32"===t&&"complex64"!==e||"int32"===t&&"float32"!==e&&"complex64"!==e||"bool"===t&&"bool"===e)}function q(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function K(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function X(e){return"string"==typeof e||e instanceof String}function Y(e){return"number"==typeof e}function Z(e){return Array.isArray(e)?Z(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":Y(e)?"float32":X(e)?"string":"boolean"==typeof e?"bool":"float32"}function J(e){return!!(e&&e.constructor&&e.call&&e.apply)}function Q(e,t){for(let n=t;n<e;++n)if(e%n==0)return n;return e}function ee(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let s=t-3;s>=0;--s)n[s]=n[s+1]*e[s+1];return n}function te(e,t,n,s=!1){const a=new Array;if(1===t.length){const r=t[0]*(s?2:1);for(let t=0;t<r;t++)a[t]=n[e+t]}else{const r=t[0],i=t.slice(1),o=i.reduce(((e,t)=>e*t))*(s?2:1);for(let t=0;t<r;t++)a[t]=te(e+t*o,i,n,s)}return a}function ne(e,t,n=!1){if(0===e.length)return t[0];const s=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===s)return[];if(s!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return te(0,e,t,n)}function se(e,t){const n=ae(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function ae(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function re(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return ne(e,new Float32Array(n));if("int32"===t)return ne(e,new Int32Array(n));if("bool"===t)return ne(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function ie(e){e.forEach((t=>{R(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function oe(e,t,n){if(0===t)return 0;if(1===t)return e[0];let s=e[e.length-1];for(let t=0;t<e.length-1;++t)s+=n[t]*e[t];return s}function le(e,t,n){if(0===t)return[];if(1===t)return[e];const s=new Array(t);for(let t=0;t<s.length-1;++t)s[t]=Math.floor(e/n[t]),e-=s[t]*n[t];return s[s.length-1]=e,s}function ue(e){return e&&e.then&&"function"==typeof e.then}class ce{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=he,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(pe().getBool("IS_TEST")||pe().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];pe().getBool("IS_TEST")||pe().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(ue(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);"tfjsflags"in e&&e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}function he(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,((e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("=")))),t}function pe(){return fe}let de,fe=null;function me(){if(null==de){let e;if("undefined"!=typeof window)e=window;else if(void 0!==n.g)e=n.g;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}de=e}return de}function ge(e,t){const n=function(){const e=me();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const s=t();return n.set(e,s),n.get(e)}}const ye="Abs",be="Acos",xe="Acosh",we="Add",ke="AddN",ve="All",Ie="Any",Ne="ArgMax",Se="ArgMin",Te="Asin",$e="Asinh",Ce="Atan",Ee="Atanh",Ae="Atan2",Re="AvgPool",Fe="AvgPoolGrad",De="AvgPool3D",_e="AvgPool3DGrad",Oe="BatchMatMul",Me="BatchToSpaceND",Le="Bincount",ze="BroadcastArgs",Be="Cast",Pe="Ceil",We="ClipByValue",Ve="Complex",Ue="ComplexAbs",Ge="Concat",He="Conv2D",je="Conv2DBackpropFilter",qe="Conv2DBackpropInput",Ke="Conv3D",Xe="Conv3DBackpropFilterV2",Ye="Conv3DBackpropInputV2",Ze="Cos",Je="Cosh",Qe="Cumprod",et="Cumsum",tt="CropAndResize",nt="DenseBincount",st="DepthToSpace",at="DepthwiseConv2dNative",rt="DepthwiseConv2dNativeBackpropFilter",it="DepthwiseConv2dNativeBackpropInput",ot="Diag",lt="Dilation2D",ut="Dilation2DBackpropInput",ct="Dilation2DBackpropFilter",ht="RealDiv",pt="Einsum",dt="Elu",ft="EluGrad",mt="Erf",gt="Equal",yt="Exp",bt="ExpandDims",xt="Expm1",wt="FFT",kt="Fill",vt="FlipLeftRight",It="Floor",Nt="FloorDiv",St="FusedBatchNorm",Tt="GatherV2",$t="GatherNd",Ct="Greater",Et="GreaterEqual",At="Identity",Rt="IFFT",Ft="Imag",Dt="IsFinite",_t="IsInf",Ot="IsNan",Mt="LeakyRelu",Lt="Less",zt="LessEqual",Bt="LinSpace",Pt="Log",Wt="Log1p",Vt="LogicalAnd",Ut="LogicalNot",Gt="LogicalOr",Ht="LRN",jt="LRNGrad",qt="Max",Kt="Maximum",Xt="MaxPool",Yt="MaxPoolGrad",Zt="MaxPool3D",Jt="MaxPool3DGrad",Qt="MaxPoolWithArgmax",en="Mean",tn="Min",nn="Minimum",sn="MirrorPad",an="Mod",rn="Multinomial",on="Multiply",ln="Neg",un="NotEqual",cn="NonMaxSuppressionV3",hn="NonMaxSuppressionV4",pn="NonMaxSuppressionV5",dn="OnesLike",fn="OneHot",mn="Pack",gn="PadV2",yn="Pow",bn="Prelu",xn="Prod",wn="Range",kn="Real",vn="Reciprocal",In="Relu",Nn="Reshape",Sn="ResizeNearestNeighbor",Tn="ResizeNearestNeighborGrad",$n="ResizeBilinear",Cn="ResizeBilinearGrad",En="Relu6",An="Reverse",Rn="Round",Fn="Rsqrt",Dn="ScatterNd",_n="SearchSorted",On="Select",Mn="Selu",Ln="Slice",zn="Sin",Bn="Sinh",Pn="Sign",Wn="Sigmoid",Vn="Softplus",Un="Sqrt",Gn="Sum",Hn="SpaceToBatchND",jn="SplitV",qn="Softmax",Kn="SparseFillEmptyRows",Xn="SparseReshape",Yn="SparseSegmentMean",Zn="SparseSegmentSum",Jn="SparseToDense",Qn="SquaredDifference",es="Square",ts="StridedSlice",ns="StringNGrams",ss="StringSplit",as="StringToHashBucketFast",rs="Sub",is="Tan",os="Tanh",ls="Tile",us="TopK",cs="Transform",hs="Transpose",ps="Unique",ds="Unpack",fs="UnsortedSegmentSum",ms="ZerosLike",gs="Step",ys="FromPixels",bs="RotateWithOffset",xs="_FusedMatMul",ws="FusedConv2D",ks="FusedDepthwiseConv2D";function vs(...e){pe().getBool("IS_TEST")||pe().getBool("PROD")||console.warn(...e)}function Is(...e){pe().getBool("IS_TEST")||pe().getBool("PROD")||console.log(...e)}const Ns=ge("kernelRegistry",(()=>new Map)),Ss=ge("gradRegistry",(()=>new Map));function Ts(e,t){const n=Rs(e,t);return Ns.get(n)}function $s(e){return Ss.get(e)}function Cs(e){const t=Ns.entries(),n=[];for(;;){const{done:s,value:a}=t.next();if(s)break;const[r,i]=a,[o]=r.split("_");o===e&&n.push(i)}return n}function Es(e){const{kernelName:t,backendName:n}=e,s=Rs(t,n);Ns.has(s)&&vs(`The kernel '${t}' for backend '${n}' is already registered`),Ns.set(s,e)}function As(e){const{kernelName:t}=e;Ss.has(t)&&pe().getBool("DEBUG")&&vs(`Overriding the gradient for '${t}'`),Ss.set(t,e)}function Rs(e,t){return`${t}_${e}`}var Fs=n(720);const Ds=n.n(Fs)()||Fs;function _s(e){return Ds.fromString(e,!0,16)}const Os=_s("c3a5c85c97cb3127"),Ms=_s("b492b66fbe98f273"),Ls=_s("9ae16a3b2f90404f");function zs(e){return e.xor(e.shru(47))}function Bs(e,t,n){const s=e.slice(t,t+n);return Ds.fromBytes(Array.from(s),!0,!0)}function Ps(e,t){return Bs(e,t,8)}function Ws(e,t){return Bs(e,t,4)}function Vs(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function Us(e,t,n=_s("9ddfea08eb382d69")){let s=e.xor(t).mul(n);s=s.xor(s.shru(47));let a=t.xor(s).mul(n);return a=a.xor(a.shru(47)),a=a.mul(n),a}function Gs(e,t,n,s){return function(e,t,n,s,a,r){a=a.add(e),r=Vs(r.add(a).add(s),21);const i=a;return a=(a=a.add(t)).add(n),r=r.add(Vs(a,44)),[a.add(s),r.add(i)]}(Ps(e,t),Ps(e,t+8),Ps(e,t+16),Ps(e,t+24),n,s)}function Hs(e,t=e.length){const n=Ds.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=Ls.add(2*t),s=Ps(e,0).add(Ls),a=Ps(e,t-8);return Us(Vs(a,37).mul(n).add(s),Vs(s,25).add(a).mul(n),n)}if(t>=4){const n=Ls.add(2*t);return Us(Ws(e,0).shl(3).add(t),Ws(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),s=t+(e[t-1]<<2);return zs(Ls.mul(n).xor(Os.mul(s))).mul(Ls)}return Ls}(e,t):function(e,t=e.length){const n=Ls.add(2*t),s=Ps(e,0).mul(Ms),a=Ps(e,8),r=Ps(e,t-8).mul(n),i=Ps(e,t-16).mul(Ls);return Us(Vs(s.add(a),43).add(Vs(r,30)).add(i),s.add(Vs(a.add(Ls),18)).add(r),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=Ls.add(2*t),s=Ps(e,0).mul(Ls),a=Ps(e,8),r=Ps(e,t-8).mul(n),i=Ps(e,t-16).mul(Ls),o=Vs(s.add(a),43).add(Vs(r,30)).add(i),l=Us(o,s.add(Vs(a.add(Ls),18)).add(r),n),u=Ps(e,16).mul(n),c=Ps(e,24),h=o.add(Ps(e,t-32)).mul(n),p=l.add(Ps(e,t-24)).mul(n);return Us(Vs(u.add(c),43).add(Vs(h,30)).add(p),u.add(Vs(c.add(s),18)).add(h),n)}(e,t);let s=n,a=n.mul(Ms).add(113),r=zs(a.mul(Ls).add(113)).mul(Ls),i=[Ds.UZERO,Ds.UZERO],o=[Ds.UZERO,Ds.UZERO];s=s.mul(Ls).add(Ps(e,0));let l=0;const u=64*(t-1>>6),c=u+(t-1&63)-63;do{s=Vs(s.add(a).add(i[0]).add(Ps(e,l+8)),37).mul(Ms),a=Vs(a.add(i[1]).add(Ps(e,l+48)),42).mul(Ms),s=s.xor(o[1]),a=a.add(i[0]).add(Ps(e,l+40)),r=Vs(r.add(o[0]),33).mul(Ms),i=Gs(e,l,i[1].mul(Ms),s.add(o[0])),o=Gs(e,l+32,r.add(o[1]),a.add(Ps(e,l+16))),[r,s]=[s,r],l+=64}while(l!==u);const h=Ms.add(r.and(255).shl(1));return l=c,o[0]=o[0].add(t-1&63),i[0]=i[0].add(o[0]),o[0]=o[0].add(i[0]),s=Vs(s.add(a).add(i[0]).add(Ps(e,l+8)),37).mul(h),a=Vs(a.add(i[1]).add(Ps(e,l+48)),42).mul(h),s=s.xor(o[1].mul(9)),a=a.add(i[0].mul(9).add(Ps(e,l+40))),r=Vs(r.add(o[0]),33).mul(h),i=Gs(e,l,i[1].mul(h),s.add(o[0])),o=Gs(e,l+32,r.add(o[1]),a.add(Ps(e,l+16))),[r,s]=[s,r],Us(Us(i[0],o[0],h).add(zs(a).mul(Os)).add(r),Us(i[1],o[1],h).add(s),h)}function js(e,t){return"string"===t?Xs(e):qs([e],t)}function qs(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=_(e)),pe().getBool("DEBUG")&&function(e,t){for(let n=0;n<e.length;n++){const s=e[n];if(isNaN(s)||!isFinite(s))throw Error(`A tensor of type ${t} being uploaded contains ${s}.`)}}(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function Ks(){return pe().platform.now()}function Xs(e,t="utf-8"){return t=t||"utf-8",pe().platform.encode(e,t)}function Ys(e,t="utf-8"){return t=t||"utf-8",pe().platform.decode(e,t)}class Zs{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new Qs)}profileKernel(e,t,n){let s;const a=()=>{s=n()};let r;const i=Ks();if(this.backendTimer.timerAvailable())r=this.backendTimer.time(a);else{a();for(const e of s)e.dataSync();r=Promise.resolve({kernelMs:Ks()-i})}if(pe().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<s.length;t++){const n=s[t];n.data().then((t=>{Js(t,n.dtype,e)}))}return{kernelName:e,outputs:s,inputs:t,timeMs:r.then((e=>e.kernelMs)),extraInfo:r.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:s,inputs:a,extraInfo:r}=e;n.forEach((e=>{Promise.all([e.data(),s,r]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],a,n[2])}))}))}}function Js(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const s=e[t];if(isNaN(s)||!isFinite(s))return console.warn(`Found ${s} in the result of '${n}'`),!0}return!1}class Qs{logKernelProfile(e,t,n,s,a,r){const i="number"==typeof s?B(`${s}ms`,9):s.error,o=B(e,25),l=t.rank,u=t.size,c=B(t.shape.toString(),14);let h="";for(const e in a){const n=a[e];if(null!=n){const s=n.shape||t.shape,a=s.length;h+=`${e}: ${a}D ${a>0?s:""} `}}console.log(`%c${o}\t%c${i}\t%c${l}D ${c}\t%c${u}\t%c${h}\t%c${r}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function ea(e,t,n,s){const a=ee(t),r=function(e,t,n,s){const a=O(t),r=s[s.length-1],i=new Array(r).fill(0),o=t.length,l="complex64"===n?aa(e):e;if(o>1)for(let e=0;e<a/r;e++){const t=e*r;for(let e=0;e<r;e++)i[e]=Math.max(i[e],ta(l[t+e],0,n).length)}return i}(e,t,n,a),i=t.length,o=sa(e,t,n,a,r),l=["Tensor"];return s&&(l.push(`  dtype: ${n}`),l.push(`  rank: ${i}`),l.push(`  shape: [${t}]`),l.push("  values:")),l.push(o.map((e=>"    "+e)).join("\n")),l.join("\n")}function ta(e,t,n){let s;return s=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:X(e)?`'${e}'`:"bool"===n?na(e):parseFloat(e.toFixed(7)).toString(),B(s,t)}function na(e){return 0===e?"false":"true"}function sa(e,t,n,s,a,r=!0){const i="complex64"===n?2:1,o=t[0],l=t.length;if(0===l)return"complex64"===n?[ta(aa(e)[0],0,n)]:"bool"===n?[na(e[0])]:[e[0].toString()];if(1===l){if(o>20){const t=3*i;let s=Array.from(e.slice(0,t)),r=Array.from(e.slice((o-3)*i,o*i));return"complex64"===n&&(s=aa(s),r=aa(r)),["["+s.map(((e,t)=>ta(e,a[t],n))).join(", ")+", ..., "+r.map(((e,t)=>ta(e,a[o-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?aa(e):Array.from(e)).map(((e,t)=>ta(e,a[t],n))).join(", ")+"]"]}const u=t.slice(1),c=s.slice(1),h=s[0]*i,p=[];if(o>20){for(let t=0;t<3;t++){const s=t*h,r=s+h;p.push(...sa(e.slice(s,r),u,n,c,a,!1))}p.push("...");for(let t=o-3;t<o;t++){const s=t*h,r=s+h;p.push(...sa(e.slice(s,r),u,n,c,a,t===o-1))}}else for(let t=0;t<o;t++){const s=t*h,r=s+h;p.push(...sa(e.slice(s,r),u,n,c,a,t===o-1))}const d=2===l?",":"";p[0]="["+p[0]+d;for(let e=1;e<p.length-1;e++)p[e]=" "+p[e]+d;let f=",\n";for(let e=2;e<l;e++)f+="\n";return p[p.length-1]=" "+p[p.length-1]+"]"+(r?"":f),p}function aa(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class ra{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=O(e),null!=n){const e=n.length;R(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||H(t,this.size),this.strides=ee(e)}set(e,...t){0===t.length&&(t=[0]),R(t.length===this.rank,(()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`));const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return ia().makeTensor(this.values,this.shape,this.dtype)}}let ia=null,oa=null,la=null;class ua{constructor(e,t,n,s){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=O(e),this.strides=ee(e),this.dataId=n,this.id=s,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return oa.buffer(this.shape,this.dtype,e)}bufferSync(){return oa.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return ne(this.shape,e,"complex64"===this.dtype)}arraySync(){return ne(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=ia().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map((e=>Ys(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),ia().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=ia().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>Ys(e)))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await ia().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(ia().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return oa.print(this,e)}clone(){return this.throwIfDisposed(),oa.clone(this)}toString(e=!1){return ea(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),oa.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),ia().makeVariable(this,e,t,n)}}function ca(){return ge("Tensor",(()=>ua))}Object.defineProperty(ua,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),ca();class ha extends ua{constructor(e,t,n,s){super(e.shape,e.dtype,e.dataId,s),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!M(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);ia().disposeTensor(this),this.dataId=e.dataId,ia().incRef(this,null)}dispose(){ia().disposeVariable(this),this.isDisposedInternal=!0}}var pa,da,fa,ma,ga;Object.defineProperty(ha,Symbol.hasInstance,{value:e=>e instanceof ua&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(pa||(pa={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(da||(da={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(fa||(fa={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(ma||(ma={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(ga||(ga={}));const ya={float32:ma,int32:da,bool:fa,complex64:ga};function ba(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return ya[e][t]}function xa(e){return ba(e,"int32")}function wa(e,t){if(e.dtype===t.dtype)return[e,t];const n=ba(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function ka(e,t){return t.some((t=>t.id===e.id))}function va(e){const t=[];return Ia(e,t,new Set),t}function Ia(e,t,n){if(null==e)return;if(e instanceof ua)return void t.push(e);if(s=e,!Array.isArray(s)&&"object"!=typeof s)return;var s;const a=e;for(const e in a){const s=a[e];n.has(s)||(n.add(s),Ia(s,t,n))}}function Na(e){return null!=e.kernelName}class Sa{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class Ta{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Sa}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(vs(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new Zs(this.backendInstance),!0}setupRegisteredKernels(){Cs(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){Cs(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof S||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,s=n.then((n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0)))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,vs(`Initialization of backend ${e} failed`),vs(n.stack||n.message)),!1)));return this.pendingBackendInit=s,{success:s,asyncInit:!0}}}catch(t){return vs(`Initialization of backend ${e} failed`),vs(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:s,asyncInit:a}=this.initializeBackend(n);if(a||s)return{name:n,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),s=n.backend,a=this.readSync(t),r=s.refCount(t);s.disposeData(t,!0),n.backend=e,e.move(t,a,n.shape,n.dtype,r),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,s=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");s=e}return this.scopedRun((()=>this.startScope(s)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return Ta.nextTensorId++}nextVariableId(){return Ta.nextVariableId++}clone(e){const t=Ca.runKernel(At,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e};return Ca.runKernel(Be,t,{dtype:"float32"})}})),[],{}),t}runKernel(e,t,n){if(null==this.backendName&&this.backend,null==Ts(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const s=this.backend.numDataIds();let a=0;n.forEach((e=>{a+="complex64"===e.dtype?3:1}));const r=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=s-t-a-r;if(i>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const s=this.isTapeOn(),a=this.state.numBytes,r=this.state.numTensors;let i,o;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=Na(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(Na(e)){const{kernelName:t,inputs:a,attrs:r}=e;null==this.backendName&&this.backend;const l=Ts(t,this.backendName);R(null!=l,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),i=()=>{const e=this.backend.numDataIds();o=l.kernelFunc({inputs:a,attrs:r,backend:this.backend});const i=Array.isArray(o)?o:[o];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,i);const u=i.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(s){const e=this.getTensorsForGradient(t,a,u);n=this.saveTensorsForBackwardMode(e)}return u}}else{const{forwardFunc:t}=e,a=e=>{s&&(n=e.map((e=>this.keep(this.clone(e)))))};i=()=>{const e=this.backend.numDataIds();o=this.tidy((()=>t(this.backend,a)));const n=Array.isArray(o)?o:[o];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}const{inputs:u,attrs:c}=e,h=Na(e)?null:e.backwardsFunc;let p;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(p=this.profiler.profileKernel(l,u,(()=>i())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(p),t=p.outputs):t=i()})),s&&this.addTapeNode(l,u,t,h,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-a,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-r,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(u).map((e=>null!=u[e]?u[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:p.timeMs,extraInfo:p.extraInfo}),Array.isArray(o)?t:t[0]}saveTensorsForBackwardMode(e){return e.map((e=>this.keep(this.clone(e))))}getTensorsForGradient(e,t,n){const s=$s(e);if(null!=s){const e=s.inputsToSave||[],a=s.outputsToSave||[];let r;s.saveAllInputs?(R(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),r=Object.keys(t).map((e=>t[e]))):r=e.map((e=>t[e]));const i=n.filter(((e,t)=>a[t]));return r.concat(i)}return[]}makeTensor(e,t,n,s){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",s=s||this.backend;let a=e;"string"===n&&X(e[0])&&(a=e.map((e=>Xs(e))));const r=s.write(a,t,n),i=new ua(t,n,r,this.nextTensorId());if(this.trackTensor(i,s),"string"===n){const e=this.state.tensorInfo.get(r),t=function(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}(a);this.state.numBytes+=t-e.bytes,e.bytes=t}return i}makeTensorFromDataId(e,t,n,s){const a={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(a,s)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:s,dtype:a}=e,r=new ua(s,a,n,this.nextTensorId());return this.trackTensor(r,t),r}makeVariable(e,t=!0,n,s){n=n||this.nextVariableId().toString(),null!=s&&s!==e.dtype&&(e=e.cast(s));const a=new ha(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw new Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*K(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof ha||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*K(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,s,a,r){const i={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:a},o=$s(e);null!=o&&(s=o.gradFunc),null!=s&&(i.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],s=ae(e.size,e.dtype);return this.makeTensor(s,e.shape,e.dtype)}return e})),s(e.length>1?e:e[0],a,r))),this.state.activeTape.push(i)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=va(e),n=new Set(t.map((e=>e.id)));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const s=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==s.id||this.track(e)}))}gradients(e,t,n,s=!1){if(R(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const a=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));R(a instanceof ua,(()=>"The result y returned by f() must be a tensor."));const r=function(e,t,n){const s={},a={};for(let e=0;e<t.length;e++)s[t[e].id]=!0;for(let n=0;n<e.length;n++){const r=e[n],i=r.inputs;for(const e in i){const n=i[e];let o=!1;for(let e=0;e<t.length;e++)if(s[n.id]){r.outputs.forEach((e=>s[e.id]=!0)),o=!0,a[r.id]=!0;break}if(o)break}}const r={};r[n.id]=!0;const i={};for(let t=e.length-1;t>=0;t--){const n=e[t],s=n.inputs;for(let e=0;e<n.outputs.length;e++)if(r[n.outputs[e].id]){for(const e in s)r[s[e].id]=!0,i[n.id]=!0;break}}const o=[];for(let t=0;t<e.length;t++){const n=e[t];if(a[n.id]&&i[n.id]){const e={};for(const t in n.inputs){const a=n.inputs[t];s[a.id]&&(e[t]=a)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,o.push(t)}}return o}(this.state.activeTape,t,a);if(!s&&0===r.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[a.id]=null==n?function(e){const t=se(O(e),"float32");return Ca.makeTensor(t,e,"float32")}(a.shape):n,function(e,t,n,s){for(let a=t.length-1;a>=0;a--){const r=t[a],i=[];if(r.outputs.forEach((t=>{const n=e[t.id];null!=n?i.push(n):i.push(null)})),null==r.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${r.kernelName}.`);const o=r.gradient(i);for(const t in r.inputs){if(!(t in o))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(o)}.`);const a=n((()=>o[t]()));if("float32"!==a.dtype)throw new Error(`Error in gradient for op ${r.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${a.dtype}'`);const i=r.inputs[t];if(!M(a.shape,i.shape))throw new Error(`Error in gradient for op ${r.kernelName}. The gradient of input '${t}' has shape '${a.shape}', which does not match the shape of the input '${i.shape}'`);if(null==e[i.id])e[i.id]=a;else{const t=e[i.id];e[i.id]=s(t,a),t.dispose()}}}}(e,r,(e=>this.tidy(e)),Ea);const s=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:a,grads:s}}))}customGrad(e){return R(J(e),(()=>"The f passed in customGrad(f) must be a function.")),(...t)=>{let n;R(t.every((e=>e instanceof ua)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const s={};return t.forEach(((e,t)=>{s[t]=e})),this.runKernelFunc({forwardFunc:(s,a)=>(n=e(...t,a),R(n.value instanceof ua,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),R(J(n.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),n.value),backwardsFunc:(e,s)=>{const a=n.gradFunc(e,s),r=Array.isArray(a)?a:[a];R(r.length===t.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),R(r.every((e=>e instanceof ua)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const i={};return r.forEach(((e,t)=>{i[t]=()=>e})),i},inputs:s})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=Ks(),n=await this.backend.time(e);return n.wallMs=Ks()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Sa;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function $a(){const e=me();if(null==e._tfengine){const t=new ce(e);e._tfengine=new Ta(t)}var t;return t=e._tfengine.ENV,fe=t,ia=()=>e._tfengine,e._tfengine}Ta.nextTensorId=0,Ta.nextVariableId=0;const Ca=$a();function Ea(e,t){const n={a:e,b:t};return Ca.runKernel(we,n)}function Aa(e){if(e||"undefined"!=typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!=typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function Ra(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}const Fa=pe();function Da(e,t){let n=e;if(q(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const s=[];for(;Array.isArray(n)||q(n)&&"string"!==t;)s.push(n.length),n=n[0];return Array.isArray(e)&&pe().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&_a(e,s,[]),s}function _a(e,t,n){if(n=n||[],!Array.isArray(e)&&!q(e))return void R(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));R(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),R(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const s=t.slice(1);for(let t=0;t<e.length;++t)_a(e[t],s,n.concat(t))}function Oa(e,t,n,s){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${s}' must be ${e} tensor, but got ${t} tensor`)}}function Ma(e,t,n,s="numeric"){if(e instanceof ua)return Oa(s,e.dtype,t,n),e;let a=Z(e);if("string"!==a&&["bool","int32","float32"].indexOf(s)>=0&&(a=s),Oa(s,a,t,n),null==e||!q(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const s=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${s}'`)}const r=Da(e,a);q(e)||Array.isArray(e)||(e=[e]);const i="string"!==a?qs(e,a):_(e,[],!0);return Ca.makeTensor(i,r,a)}function La(e,t,n,s="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map(((e,a)=>Ma(e,`${t}[${a}]`,n,s)))}function za(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const s=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+="__op";const a=(...e)=>{Ca.startScope(n);try{const t=s(...e);return ue(t)&&console.error("Cannot return a Promise inside of tidy."),Ca.endScope(t),t}catch(e){throw Ca.endScope(null),e}};return Object.defineProperty(a,"name",{value:n,configurable:!0}),a}Fa.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Fa.registerFlag("IS_BROWSER",(()=>Ra())),Fa.registerFlag("IS_NODE",(()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node)),Fa.registerFlag("IS_CHROME",(()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),Fa.registerFlag("PROD",(()=>!1)),Fa.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>Fa.getBool("DEBUG"))),Fa.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),Fa.registerFlag("IS_TEST",(()=>!1)),Fa.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),Fa.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),Fa.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1));const Ba=za({complex_:function(e,t){const n=Ma(e,"real","complex"),s=Ma(t,"imag","complex");F(n.shape,s.shape,`real and imag shapes, ${n.shape} and ${s.shape}, must match in call to tf.complex().`);const a={real:n,imag:s};return Ca.runKernel(Ve,a)}});function Pa(e,t,n,s){if(null==s&&(s=Z(e)),"complex64"===s)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!q(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){ie(t);const e=O(t),s=O(n);R(e===s,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${s}`));for(let e=0;e<n.length;++e){const s=n[e],a=e!==n.length-1||s!==O(t.slice(e));R(n[e]===t[e]||!a,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return q(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==s?qs(e,s):_(e,[],!0),Ca.makeTensor(e,t,s)}function Wa(e,t,n){return Pa(e,t,Da(e,n),n)}const Va={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function Ua(e,t){const n=[],s=[],a=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let r=0;r<a.length;++r){const i=a[r],o=Array.isArray(e)?e[r].tensor:e[i];if("float32"!==o.dtype&&"int32"!==o.dtype&&"bool"!==o.dtype&&"string"!==o.dtype&&"complex64"!==o.dtype)throw new Error(`Unsupported dtype in weight '${i}': ${o.dtype}`);const l={name:i,shape:o.shape,dtype:o.dtype};if("string"===o.dtype){const e=new Promise((async e=>{const t=await o.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,s=new Uint8Array(n);let a=0;for(let e=0;e<t.length;e++){const n=t[e],r=new Uint8Array(new Uint32Array([n.length]).buffer);s.set(r,a),a+=4,s.set(n,a),a+=n.length}e(s)}));s.push(e)}else s.push(o.data());null!=t&&(l.group=t),n.push(l)}return{data:Ga(await Promise.all(s)),specs:n}}function Ga(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const s=new Uint8Array(t);let a=0;return n.forEach((e=>{s.set(new Uint8Array(e.buffer),a),a+=e.byteLength})),s.buffer}const Ha="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function ja(e){return Ha?Buffer.byteLength(e):new Blob([e]).size}function qa(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let s=0;return e.forEach((e=>{n.set(new Uint8Array(e),s),s+=e.byteLength})),n.buffer}function Ka(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function Xa(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:ja(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:ja(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function Ya(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0==(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return s=>{const a=new ArrayBuffer(4*s.length),r=new Uint32Array(a);for(let a=0;a<s.length;a++){const i=s[a],o=e[n[i>>10]+(1023&i)]+t[i>>10];r[a]=o}return new Float32Array(a)}}class Za{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Za.instance&&(Za.instance=new Za),Za.instance}static registerSaveRouter(e){Za.getInstance().saveRouters.push(e)}static registerLoadRouter(e){Za.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return Za.getHandlers(e,"save")}static getLoadHandlers(e,t){return Za.getHandlers(e,"load",t)}static getHandlers(e,t,n){const s=[];return("load"===t?Za.getInstance().loadRouters:Za.getInstance().saveRouters).forEach((t=>{const a=t(e,n);null!==a&&s.push(a)})),s}}const Ja=e=>Za.getSaveHandlers(e),Qa="tensorflowjs",er="models_store",tr="model_info_store";function nr(){if(!pe().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function sr(e){const t=e.result;t.createObjectStore(er,{keyPath:"modelPath"}),t.createObjectStore(tr,{keyPath:"modelPath"})}class ar{constructor(e){if(this.indexedDB=nr(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const s=this.indexedDB.open(Qa,1);s.onupgradeneeded=()=>sr(s),s.onsuccess=()=>{const a=s.result;if(null==t){const t=a.transaction(er,"readonly"),s=t.objectStore(er).get(this.modelPath);s.onsuccess=()=>{if(null==s.result)return a.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(s.result.modelArtifacts)},s.onerror=e=>(a.close(),n(s.error)),t.oncomplete=()=>a.close()}else{const s=Xa(t),r=a.transaction(tr,"readwrite");let i=r.objectStore(tr);const o=i.put({modelPath:this.modelPath,modelArtifactsInfo:s});let l;o.onsuccess=()=>{l=a.transaction(er,"readwrite");const o=l.objectStore(er).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:s});o.onsuccess=()=>e({modelArtifactsInfo:s}),o.onerror=e=>{i=r.objectStore(tr);const t=i.delete(this.modelPath);t.onsuccess=()=>(a.close(),n(o.error)),t.onerror=e=>(a.close(),n(o.error))}},o.onerror=e=>(a.close(),n(o.error)),r.oncomplete=()=>{null==l?a.close():l.oncomplete=()=>a.close()}}},s.onerror=e=>n(s.error)}))}}ar.URL_SCHEME="indexeddb://";const rr=e=>{return pe().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ar.URL_SCHEME)?(t=e.slice(ar.URL_SCHEME.length),new ar(t)):null;var t};Za.registerSaveRouter(rr),Za.registerLoadRouter(rr);class ir{constructor(){this.indexedDB=nr()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(Qa,1);n.onupgradeneeded=()=>sr(n),n.onsuccess=()=>{const s=n.result,a=s.transaction(tr,"readonly"),r=a.objectStore(tr).getAll();r.onsuccess=()=>{const t={};for(const e of r.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},r.onerror=e=>(s.close(),t(r.error)),a.oncomplete=()=>s.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(ar.URL_SCHEME)?t.slice(ar.URL_SCHEME.length):t,new Promise(((t,n)=>{const s=this.indexedDB.open(Qa,1);s.onupgradeneeded=()=>sr(s),s.onsuccess=()=>{const a=s.result,r=a.transaction(tr,"readwrite"),i=r.objectStore(tr),o=i.get(e);let l;o.onsuccess=()=>{if(null==o.result)return a.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const s=i.delete(e),r=()=>{l=a.transaction(er,"readwrite");const s=l.objectStore(er).delete(e);s.onsuccess=()=>t(o.result.modelArtifactsInfo),s.onerror=e=>n(o.error)};s.onsuccess=r,s.onerror=e=>(r(),a.close(),n(o.error))}},o.onerror=e=>(a.close(),n(o.error)),r.oncomplete=()=>{null==l?a.close():l.oncomplete=()=>a.close()}},s.onerror=e=>n(s.error)}))}}const or="/",lr="tensorflowjs_models",ur="info",cr="model_topology",hr="weight_specs",pr="weight_data",dr="model_metadata";function fr(e){return{info:[lr,e,ur].join(or),topology:[lr,e,cr].join(or),weightSpecs:[lr,e,hr].join(or),weightData:[lr,e,pr].join(or),modelMetadata:[lr,e,dr].join(or)}}function mr(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function gr(e){const t=e.split(or);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(or)}class yr{constructor(e){if(!pe().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=fr(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),s=Xa(e);try{this.LS.setItem(this.keys.info,JSON.stringify(s)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(Ha)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,s=t.length;e<s;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const a={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(a)),{modelArtifactsInfo:s}}catch(e){throw mr(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${s.modelTopologyBytes}, weightSpecsBytes=${s.weightSpecsBytes}, weightDataBytes=${s.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const s=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==s)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=s;const a=this.LS.getItem(this.keys.modelMetadata);if(null!=a){const e=JSON.parse(a);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const r=this.LS.getItem(this.keys.weightData);if(null==r)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(Ha){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(r),t}}yr.URL_SCHEME="localstorage://";const br=e=>{return pe().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(yr.URL_SCHEME)?(t=e.slice(yr.URL_SCHEME.length),new yr(t)):null;var t};Za.registerSaveRouter(br),Za.registerLoadRouter(br);class xr{constructor(){R(pe().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),R("undefined"==typeof window||void 0!==window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=lr+or,n=or+ur;for(let s=0;s<this.LS.length;++s){const a=this.LS.key(s);a.startsWith(t)&&a.endsWith(n)&&(e[gr(a)]=JSON.parse(this.LS.getItem(a)))}return e}async removeModel(e){var t;const n=fr(e=(t=e).startsWith(yr.URL_SCHEME)?t.slice(yr.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const s=JSON.parse(this.LS.getItem(n.info));return mr(n),s}}class wr{constructor(){this.managers={}}static getInstance(){return null==wr.instance&&(wr.instance=new wr),wr.instance}static registerManager(e,t){R(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith("://")&&(e=e.slice(0,e.indexOf("://"))),R(e.length>0,(()=>"scheme must not be an empty string."));const n=wr.getInstance();R(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=this.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(this.getInstance().managers)}}class kr{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if(pe().get("IS_BROWSER")){pe().setPlatform("browser",new kr);try{wr.registerManager(yr.URL_SCHEME,new xr)}catch(e){}try{wr.registerManager(ar.URL_SCHEME,new ir)}catch(e){}}let vr;function Ir(e,t="float32",n){return t=t||"float32",ie(e),new ra(e,t,n)}pe().get("IS_NODE")&&!pe().get("IS_BROWSER")&&pe().setPlatform("node",new class{constructor(){this.util=n(628),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=pe().global.fetch?pe().global.fetch(e,t):(null==vr&&(vr=n(410)),vr(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const Nr=za({cast_:function(e,t){const n=Ma(e,"x","cast");if(!function(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const s={x:n},a={dtype:t};return Ca.runKernel(Be,s,a)}}),Sr=za({clone_:function(e){const t={x:Ma(e,"x","clone","string_or_numeric")};return Ca.runKernel(At,t)}});function Tr(e){return new Promise((e=>setTimeout(e))).then(e)}$a(),oa={buffer:Ir,cast:Nr,clone:Sr,print:function(e,t=!1){console.log(e.toString(t))}};class $r{constructor(e){if(!pe().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith($r.URL_SCHEME)&&(e=e.slice($r.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=Ka(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),s=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),a=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(a.download=this.modelJsonFileName,a.href=s,await Tr((()=>a.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Tr((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:Xa(e)}}}}function Cr(e,t,n,s){!function(e){R(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){R(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),R(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),R(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,s=null==s?1:s);let a=0;return Promise.all(e.map((r=>(r.then((r=>{const i=n+ ++a/e.length*(s-n);return t(i),r})),r))))}async function Er(e,t){null==t&&(t={});const n=null==t.fetchFunc?pe().platform.fetch:t.fetchFunc,s=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),a=(null==t.onProgress?await Promise.all(s):await Cr(s,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(a):await Cr(a,t.onProgress,.5,1)}$r.URL_SCHEME="downloads://",Za.registerSaveRouter((e=>pe().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith($r.URL_SCHEME)?function(e="model"){return new $r(e)}(e.slice($r.URL_SCHEME.length)):null));class Ar{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(R("function"==typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=pe().platform.fetch,R(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&R(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=Ka(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const s=await this.fetch(this.path,t);if(s.ok)return{modelArtifactsInfo:Xa(e),responses:[s]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,s=t.weightsManifest;if(null==n&&null==s)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return async function(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),null!=e.weightsManifest){const[s,a]=await t(e.weightsManifest);n.weightSpecs=s,n.weightData=a}return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),n}(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,s]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),a=this.weightPathPrefix||n,r=[];for(const t of e)r.push(...t.weights);const i=[],o=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?o.push(this.weightUrlConverter(e)):i.push(a+e+s);return this.weightUrlConverter&&i.push(...await Promise.all(o)),[r,qa(await Er(i,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Rr(e){return null!=e.match(Ar.URL_SCHEME_REGEX)}Ar.URL_SCHEME_REGEX=/^https?:\/\//;const Fr=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Rr(e))):Rr(e),n)return Dr(e,t)}return null};function Dr(e,t){return new Ar(e,t)}function _r(e,t){return Dr(e,t)}function Or(e,t){const n=e.length,s=[];for(let a=0;a<n;a++){const r=n-1-a,i=e[r]||1;(t[t.length-1-a]||1)>1&&1===i&&s.unshift(r)}return s}function Mr(e,t){const n=[];for(let s=0;s<t.length;s++){const a=e[e.length-s-1],r=t.length-s-1,i=t[r];(null==a||1===a&&i>1)&&n.unshift(r)}return n}function Lr(e,t){const n=[],s=Math.max(e.length,t.length);for(let a=0;a<s;a++){let s=e[e.length-a-1];null==s&&(s=1);let r=t[t.length-a-1];if(null==r&&(r=1),1===s)n.unshift(r);else if(1===r)n.unshift(s);else{if(s!==r)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);n.unshift(s)}}return n}let zr;Za.registerSaveRouter(Fr),Za.registerLoadRouter(Fr);const Br=za({fromPixels_:function(e,t=3){if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,s=!1,a=!1,r=!1,i=!1,o=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!=typeof ImageData&&e instanceof ImageData)s=!0;else if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)a=!0;else if("undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)r=!0;else if(null!=e.getContext)i=!0;else{if(!("undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);o=!0}if(a){const t=2;if(a&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=Ts(ys,Ca.backendName)){const n={pixels:e},s={numChannels:t};return Ca.runKernel(ys,n,s)}const[l,u]=a?[e.videoWidth,e.videoHeight]:[e.width,e.height];let c,h;if(i)c=e.getContext("2d").getImageData(0,0,l,u).data;else if(s||n)c=e.data;else if(r||a||o){if(null==zr)if("undefined"==typeof document){if("undefined"==typeof OffscreenCanvas||"undefined"==typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");zr=new OffscreenCanvas(1,1).getContext("2d")}else zr=document.createElement("canvas").getContext("2d");zr.canvas.width=l,zr.canvas.height=u,zr.drawImage(e,0,0,l,u),c=zr.getImageData(0,0,l,u).data}if(4===t)h=new Int32Array(c);else{const e=l*u;h=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)h[n*t+e]=c[4*n+e]}return function(e,t,n){if(D(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const s=Da(e,n);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Pa(e,t,s,n)}(h,[u,l,t],"int32")}});function Pr(e,t,n){const s=e.shape.length;R(s===t.length,(()=>`Error in slice${s}D: Length of begin ${t} must match the rank of the array (${s}).`)),R(s===n.length,(()=>`Error in slice${s}D: Length of size ${n} must match the rank of the array (${s}).`));for(let a=0;a<s;++a)R(t[a]+n[a]<=e.shape[a],(()=>`Error in slice${s}D: begin[${a}] + size[${a}] (${t[a]+n[a]}) would overflow input.shape[${a}] (${e.shape[a]})`))}function Wr(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function Vr(e,t,n){const s=[];for(let a=0;a<e.length;a++)s[a]=Math.ceil((t[a]-e[a])/n[a]);return s}function Ur(e,t,n,s){const a=[...e];for(let e=a.length;e<s.length;e++)a.push(1);for(let e=0;e<n;e++)0===e?a[t]=1:(a.splice(t,0,1),a.pop());return a}function Gr(e,t,n){return n<=e?n:n-(t-1)}function Hr(e,t){const n=[];for(let s=0;s<e;s++)n.push(t+s);return n}function jr(e,t,n,s,a,r,i,o,l){const u=e.length;let c=new Array(u),h=new Array(u),p=new Array(u);if(t.length&&n>0){const l=t[0],u=n+1;c=qr(i,l,u,s,e),h=Kr(o,l,u,a,e),p=Ur(r,l,u,e)}else for(let t=0;t<u;t++)c[t]=Yr(i,s,r,e,t,l),h[t]=Zr(o,a,r,e,t,l),p[t]=Xr(r,t,l);return{begin:c,end:h,strides:p}}function qr(e,t,n,s,a){const r=[...a],i=Hr(n,t);for(let a=0;a<r.length;a++)if(i.indexOf(a)>-1)r[a]=0;else{const i=Gr(t,n,a);let o=s[i];e&1<<i&&(o=0),r[a]=o}return r}function Kr(e,t,n,s,a){const r=[...a],i=Hr(n,t);for(let a=0;a<r.length;a++)if(i.indexOf(a)>-1)r[a]=Number.MAX_SAFE_INTEGER;else{const i=Gr(t,n,a);let o=s[i];e&1<<i&&(o=Number.MAX_SAFE_INTEGER),r[a]=o}for(let e=0;e<r.length;e++){const t=a[e];r[e]<0&&(r[e]+=t),r[e]=C(0,r[e],a[e])}return r}function Xr(e,t,n){let s=e[t];return(n&1<<t||null==s)&&(s=1),s}function Yr(e,t,n,s,a,r){let i=t[a];const o=n[a]||1;(e&1<<a||r&1<<a||null==i)&&(i=o>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const l=s[a];return i<0&&(i+=l),i=C(0,i,l-1),i}function Zr(e,t,n,s,a,r){let i=t[a];const o=n[a]||1;(e&1<<a||r&1<<a||null==i)&&(i=o>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const l=s[a];return i<0&&(i+=l),i=o>0?C(0,i,l):C(-1,i,l-1),i}function Jr(e,t,n){let s=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){s=e;break}for(let a=s+1;a<n.length;a++)if(t[a]>0||n[a]!==e[a])return!1;return!0}function Qr(e,t){let n=e.length>0?e[e.length-1]:1;for(let s=0;s<e.length-1;s++)n+=e[s]*t[s];return n}function ei(e,t,n){let s;const a=e.shape.length;let r;return s="number"==typeof t?[t,...new Array(a-1).fill(0)]:t.length<a?t.concat(new Array(a-t.length).fill(0)):t.slice(),s.forEach((e=>{R(-1!==e,(()=>"slice() does not support negative begin indexing."))})),r=null==n?new Array(a).fill(-1):"number"==typeof n?[n,...new Array(a-1).fill(-1)]:n.length<a?n.concat(new Array(a-n.length).fill(-1)):n,r=r.map(((t,n)=>t>=0?t:(R(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-s[n]))),[s,r]}function ti(e,t,n,s,a,r,i,o,l){let u;if(null==s?(u=new Array(t.length),u.fill(1)):u=s,null!=i&&0!=(i&i-1))throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const h={dims:u.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:u.slice(),beginMask:a,endMask:r,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};for(let e=0;e<h.dims;e++)c&&0!=(1<<e&o)&&h.numAddAxisAfterEllipsis++,1<<e&i&&(c=!0);c||(h.ellipsisMask|=1<<h.dims,h.dims++);const p={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let s=0;s<e.dims;s++)if(1<<s&e.ellipsisMask){const a=Math.min(t.dims-(e.dims-s)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<a;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=s}else if(1<<s&e.newAxisMask)t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[s]),null!=e.end&&(t.end[n]=e.end[s]),t.strides[n]=e.strides[s],e.beginMask&1<<s&&(t.beginMask|=1<<n),e.endMask&1<<s&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<s?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(s)),t.inputShapeGatherIndicesSparse[n]=s,n++}}(h,p);let d=!0,f=!0,m=!0;const g=[],y=[];for(let t=0;t<e.length;++t){if(0===p.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(p.shrinkAxisMask&1<<t),s=e[t];if(-1===s){g.push(n?1:-1);continue}const a=[p.beginMask&1<<t,p.endMask&1<<t],r=[p.strides[t]>0?0:-1,p.strides[t]>0?s:s-1];if(n&&p.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===p.strides[t];const i=!!(p.beginMask&1<<t&&p.endMask&1<<t);if(p.beginValid&&p.endValid){if(n){const e=p.begin[t]<0?s+p.begin[t]:p.begin[t];if(p.begin[t]=e,p.end[t]=p.begin[t]+1,e<0||e>=s)throw Error(`slice index ${p.begin[t]} of dimension ${t} out of bounds.`)}else p.begin[t]=ni(p.begin[t],0,p.strides[t],s,a,r),p.end[t]=ni(p.end[t],1,p.strides[t],s,a,r);const e=1===p.strides[t]&&0===p.begin[t]&&p.end[t]===s;d=d&&e,f=f&&(0===t&&1===p.strides[t]||e)}else d=d&&1===p.strides[t]&&i,f=f&&(0===t&&1===p.strides[t]||i);let o,l=!1;if(p.beginValid&&p.endValid?(o=p.end[t]-p.begin[t],l=!0):n?(o=1,l=!0):i&&s>=0&&(o=p.strides[t]<0?-s:s,l=!0),l){let e;e=0===o||o<0!=p.strides[t]<0?0:Math.trunc(o/p.strides[t])+(o%p.strides[t]!=0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<p.finalShapeGatherIndices.length;++e){const t=p.finalShapeGatherIndices[e];t>=0?y.push(g[t]):-2===t&&y.push(1)}return{finalShapeSparse:y.filter(((e,t)=>-2!==p.finalShapeGatherIndices[t])),finalShape:y,isIdentity:d,sliceDim0:f,isSimpleSlice:m,begin:p.begin,end:p.end,strides:p.strides}}function ni(e,t,n,s,a,r){if(a[t])return n>0?r[t]:r[t+1&1];{const t=e<0?s+e:e;return t<r[0]?r[0]:t>r[1]?r[1]:t}}class si{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class ai{constructor(){this.classNameMap={}}static getMap(){return null==ai.instance&&(ai.instance=new ai),ai.instance}static register(e){ai.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function ri(e){R(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),R("string"==typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),R(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),ai.register(e)}function ii(){return Ca}function oi(){return Ca.memory()}function li(e,t){return Ca.tidy(e,t)}function ui(e){va(e).forEach((e=>e.dispose()))}function ci(e){return Ca.keep(e)}function hi(e,t,n=1){return Ca.registerBackend(e,t,n)}function pi(e){return Ca.customGrad(e)}function di(e,t){if((q(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&q(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Pa(e,[],[],t)}la=function(e){pe().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")};class fi extends si{minimize(e,t=!1,n){const{value:s,grads:a}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:a[e.name]})));this.applyGradients(e)}else this.applyGradients(a);return ui(a),t?s:(s.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return function(e,t){R(J(e),(()=>"The f passed in variableGrads(f) must be a function")),R(null==t||Array.isArray(t)&&t.every((e=>e instanceof ha)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in Ca.registeredVariables)t.push(Ca.registeredVariables[e])}const s=n?t.filter((e=>!e.trainable)):null,a=t.length;R((t=t.filter((e=>e.trainable))).length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${a} variables is trainable.`));const{value:r,grads:i}=Ca.gradients(e,t,null,!0);R(i.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),R(0===r.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${r.rank} tensor`));const o={};return t.forEach(((e,t)=>{null!=i[t]&&(o[e.name]=i[t])})),null!=s&&s.forEach((e=>o[e.name]=null)),{value:r,grads:o}}(e,t)}dispose(){null!=this.iterations_&&ui(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:di(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(fi,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});const mi=za({abs_:function(e){const t=Ma(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return Ca.runKernel(Ue,e)}{const e={x:t};return Ca.runKernel(ye,e)}}}),gi=za({add_:function(e,t){let n=Ma(e,"a","add"),s=Ma(t,"b","add");[n,s]=wa(n,s);const a={a:n,b:s};return Ca.runKernel(we,a)}}),yi=za({all_:function(e,t=null,n=!1){const s={x:Ma(e,"x","all","bool")},a={axis:t,keepDims:n};return Ca.runKernel(ve,s,a)}}),bi=za({any_:function(e,t=null,n=!1){const s={x:Ma(e,"x","any","bool")},a={axis:t,keepDims:n};return Ca.runKernel(Ie,s,a)}}),xi=za({argMax_:function(e,t=0){const n={x:Ma(e,"x","argMax")},s={axis:t};return Ca.runKernel(Ne,n,s)}});function wi(e,t,n,s,a="NHWC",r){return Ii(e,[...t,e[3]],n,r,s,null,null,Fi(a))}function ki(e,t,n,s,a,r,i="channelsLast"){const[o,l]=Ti(t);let u;if("channelsLast"===i)u=[o,l,e[3],e[3]];else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);u=[o,l,e[1],e[1]]}return Ii(e,u,n,s,a,r,!1,i)}function vi(e,t,n,s,a,r,i="NDHWC"){const[o,l,u]=$i(t);let c,h;if("NDHWC"===i)h="channelsLast",c=[o,l,u,e[4],e[4]];else{if("NCDHW"!==i)throw new Error(`Unknown dataFormat ${i}`);h="channelsFirst",c=[o,l,u,e[1],e[1]]}return Ni(e,c,n,s,a,!1,h,r)}function Ii(e,t,n,s,a,r,i=!1,o="channelsLast"){let[l,u,c,h]=[-1,-1,-1,-1];if("channelsLast"===o)[l,u,c,h]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[l,h,u,c]=e}const[p,d,,f]=t,[m,g]=Ti(n),[y,b]=Ti(s),x=Ci(p,y),w=Ci(d,b),{padInfo:k,outHeight:v,outWidth:I}=function(e,t,n,s,a,r,i,o,l){let u,c,h;if("number"==typeof e){u={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,s,a){null==s&&(s=Si(e,t,n));const r=e[1];return[Ei((e[0]-t+2*s)/n+1,a),Ei((r-t+2*s)/n+1,a)]}([t,n],r,s,e,o);c=a[0],h=a[1]}else if("same"===e){c=Math.ceil(t/s),h=Math.ceil(n/a);const e=Math.max(0,(c-1)*s+r-t),o=Math.max(0,(h-1)*a+i-n),l=Math.floor(e/2),p=e-l,d=Math.floor(o/2);u={top:l,bottom:p,left:d,right:o-d,type:"SAME"}}else if("valid"===e)u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((t-r+1)/s),h=Math.ceil((n-i+1)/a);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const p="channelsLast"===l?e[1][0]:e[2][0],d="channelsLast"===l?e[1][1]:e[2][1],f="channelsLast"===l?e[2][0]:e[3][0],m="channelsLast"===l?e[2][1]:e[3][1];u={top:p,bottom:d,left:f,right:m,type:0===p&&0===d&&0===f&&0===m?"VALID":"EXPLICIT"},c=Ei((t-r+p+d)/s+1,o),h=Ei((n-i+f+m)/a+1,o)}}return{padInfo:u,outHeight:c,outWidth:h}}(a,u,c,m,g,x,w,r,o),N=i?f*h:f;let S;return"channelsFirst"===o?S=[l,N,v,I]:"channelsLast"===o&&(S=[l,v,I,N]),{batchSize:l,dataFormat:o,inHeight:u,inWidth:c,inChannels:h,outHeight:v,outWidth:I,outChannels:N,padInfo:k,strideHeight:m,strideWidth:g,filterHeight:p,filterWidth:d,effectiveFilterHeight:x,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:S,filterShape:t}}function Ni(e,t,n,s,a,r=!1,i="channelsLast",o){let[l,u,c,h,p]=[-1,-1,-1,-1,-1];if("channelsLast"===i)[l,u,c,h,p]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[l,p,u,c,h]=e}const[d,f,m,,g]=t,[y,b,x]=$i(n),[w,k,v]=$i(s),I=Ci(d,w),N=Ci(f,k),S=Ci(m,v),{padInfo:T,outDepth:$,outHeight:C,outWidth:E}=function(e,t,n,s,a,r,i,o,l,u,c){let h,p,d,f;if("number"==typeof e){h={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const r=function(e,t,n,s,a,r){null==a&&(a=Si(e,t,s));const i=e[1],o=e[2];return[Ei((e[0]-t+2*a)/s+1,r),Ei((i-t+2*a)/s+1,r),Ei((o-t+2*a)/s+1,r),1]}([t,n,s,1],o,0,a,e,c);p=r[0],d=r[1],f=r[2]}else if("same"===e){p=Math.ceil(t/a),d=Math.ceil(n/r),f=Math.ceil(s/i);const e=(p-1)*a+o-t,c=(d-1)*r+l-n,m=(f-1)*i+u-s,g=Math.floor(e/2),y=e-g,b=Math.floor(c/2),x=c-b,w=Math.floor(m/2);h={top:b,bottom:x,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((t-o+1)/a),d=Math.ceil((n-l+1)/r),f=Math.ceil((s-u+1)/i)}return{padInfo:h,outDepth:p,outHeight:d,outWidth:f}}(a,u,c,h,y,b,x,I,N,S,o),A=r?g*p:g;let R;return"channelsFirst"===i?R=[l,A,$,C,E]:"channelsLast"===i&&(R=[l,$,C,E,A]),{batchSize:l,dataFormat:i,inDepth:u,inHeight:c,inWidth:h,inChannels:p,outDepth:$,outHeight:C,outWidth:E,outChannels:A,padInfo:T,strideDepth:y,strideHeight:b,strideWidth:x,filterDepth:d,filterHeight:f,filterWidth:m,effectiveFilterDepth:I,effectiveFilterHeight:N,effectiveFilterWidth:S,dilationDepth:w,dilationHeight:k,dilationWidth:v,inShape:e,outShape:R,filterShape:t}}function Si(e,t,n,s=1){const a=Ci(t,s);return Math.floor((e[0]*(n-1)-n+a)/2)}function Ti(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function $i(e){return"number"==typeof e?[e,e,e]:e}function Ci(e,t){return t<=1?e:e+(e-1)*(t-1)}function Ei(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function Ai(e){const[t,n,s]=Ti(e);return 1===t&&1===n&&1===s}function Ri(e,t){return Ai(e)||Ai(t)}function Fi(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function Di(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)R(L(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{R(L(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}const _i=za({reshape_:function(e,t){const n={x:Ma(e,"x","reshape","string_or_numeric")},s={shape:t};return Ca.runKernel(Nn,n,s)}}),Oi=za({avgPool_:function(e,t,n,s,a){const r=Ma(e,"x","avgPool","float32");R(Ri(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let i=r,o=!1;3===r.rank&&(o=!0,i=_i(r,[1,r.shape[0],r.shape[1],r.shape[2]])),R(4===i.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${i.rank}.`)),Di("avgPool",s,a);const l={x:i},u={filterSize:t,strides:n,pad:s,dimRoundingMode:a};let c=Ca.runKernel(Re,l,u);return c=Nr(c,r.dtype),o?_i(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Mi=za({avgPool3d_:function(e,t,n,s,a,r="NDHWC"){const i=Ma(e,"x","avgPool3d","float32");let o=i,l=!1;4===i.rank&&(l=!0,o=_i(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),R(5===o.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${o.rank}.`)),R("NDHWC"===r,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${r}`)),Di("avgPool3d",s,a);const u={x:o},c={filterSize:t,strides:n,pad:s,dimRoundingMode:a,dataFormat:r};let h=Ca.runKernel(De,u,c);return h=Nr(h,o.dtype),l?_i(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),Li=za({batchNorm_:function(e,t,n,s,a,r){null==r&&(r=.001);const i=Ma(e,"x","batchNorm"),o=Ma(t,"mean","batchNorm"),l=Ma(n,"variance","batchNorm");let u,c;null!=a&&(u=Ma(a,"scale","batchNorm")),null!=s&&(c=Ma(s,"offset","batchNorm")),R(o.rank===l.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),R(null==c||o.rank===c.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),R(null==u||o.rank===u.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const h=function(e){let t;return t=0===e.rank||1===e.rank?_i(e,[1,1,1,e.size]):2===e.rank?_i(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?_i(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(i),p={x:h,scale:u,offset:c,mean:o,variance:l},d={varianceEpsilon:r},f=Ca.runKernel(St,p,d);return _i(f,i.shape)}}),zi=za({batchNorm2d_:function(e,t,n,s,a,r){const i=Ma(e,"x","batchNorm"),o=Ma(t,"mean","batchNorm"),l=Ma(n,"variance","batchNorm");let u,c;return null!=a&&(u=Ma(a,"scale","batchNorm")),null!=s&&(c=Ma(s,"offset","batchNorm")),R(2===i.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${i.rank}.`)),R(2===o.rank||1===o.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${o.rank}.`)),R(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=u&&R(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`)),null!=c&&R(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`)),Li(i,o,l,c,u,r)}}),Bi=za({batchNorm3d_:function(e,t,n,s,a,r){const i=Ma(e,"x","batchNorm"),o=Ma(t,"mean","batchNorm"),l=Ma(n,"variance","batchNorm");let u,c;return null!=a&&(u=Ma(a,"scale","batchNorm")),null!=s&&(c=Ma(s,"offset","batchNorm")),R(3===i.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${i.rank}.`)),R(3===o.rank||1===o.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${o.rank}.`)),R(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=u&&R(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`)),null!=c&&R(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`)),Li(i,o,l,c,u,r)}}),Pi=za({batchNorm4d_:function(e,t,n,s,a,r){const i=Ma(e,"x","batchNorm"),o=Ma(t,"mean","batchNorm"),l=Ma(n,"variance","batchNorm");let u,c;return null!=a&&(u=Ma(a,"scale","batchNorm")),null!=s&&(c=Ma(s,"offset","batchNorm")),R(4===i.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${i.rank}.`)),R(4===o.rank||1===o.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${o.rank}.`)),R(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=u&&R(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`)),null!=c&&R(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`)),Li(i,o,l,c,u,r)}}),Wi=za({clipByValue_:function(e,t,n){const s=Ma(e,"x","clipByValue");R(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`));const a={x:s},r={clipValueMin:t,clipValueMax:n};return Ca.runKernel(We,a,r)}}),Vi=za({concat_:function(e,t=0){R(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=La(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return Sr(n[0]);const s=n,a={axis:t};return Ca.runKernel(Ge,s,a)}}),Ui=za({concat1d_:function(e){return Vi(e,0)}}),Gi=za({concat2d_:function(e,t){return Vi(e,t)}}),Hi=za({concat3d_:function(e,t){return Vi(e,t)}}),ji=za({concat4d_:function(e,t){return Vi(e,t)}}),qi=za({conv2d_:function(e,t,n,s,a="NHWC",r=[1,1],i){const o=Ma(e,"x","conv2d","float32"),l=Ma(t,"filter","conv2d","float32");let u=o,c=!1;3===o.rank&&(c=!0,u=_i(o,[1,o.shape[0],o.shape[1],o.shape[2]])),R(4===u.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${u.rank}.`)),R(4===l.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${l.rank}.`)),Di("conv2d",s,i);const h="NHWC"===a?u.shape[3]:u.shape[1];R(h===l.shape[2],(()=>`Error in conv2d: depth of input (${h}) must match input depth for filter ${l.shape[2]}.`)),R(Ri(n,r),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${r}'`));const p={x:u,filter:l},d={strides:n,pad:s,dataFormat:a,dilations:r,dimRoundingMode:i},f=Ca.runKernel(He,p,d);return c?_i(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Ki=za({conv1d_:function(e,t,n,s,a="NWC",r=1,i){const o=Ma(e,"x","conv1d"),l=Ma(t,"filter","conv1d");let u=o,c=!1;2===o.rank&&(c=!0,u=_i(o,[1,o.shape[0],o.shape[1]])),R(3===u.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${u.rank}.`)),R(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),Di("conv1d",s,i),R(u.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),R(Ri(n,r),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${r}'`)),R("NWC"===a,(()=>`Error in conv1d: got dataFormat of ${a} but only NWC is currently supported.`));const h=_i(l,[1,l.shape[0],l.shape[1],l.shape[2]]),p=_i(u,[u.shape[0],1,u.shape[1],u.shape[2]]),d=qi(p,h,[1,n],s,"NHWC",[1,r],i);return _i(d,c?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}}),Xi=za({conv2DBackpropInput_:function(e,t,n,s,a,r="NHWC",i){R(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let o=e,l=t,u=!1;3===t.rank&&(u=!0,l=_i(t,[1,t.shape[0],t.shape[1],t.shape[2]]),o=[1,e[0],e[1],e[2]]),R(4===o.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${o.length}.`)),R(4===l.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${l.rank}`)),R(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const c="NHWC"===r?o[3]:o[1],h="NHWC"===r?l.shape[3]:l.shape[1];R(c===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[2]}.`)),R(h===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${h}) must match output depth for filter ${n.shape[3]}.`)),Di("conv2dDerInput",a,i);const p={dy:l,filter:n},d={strides:s,pad:a,dataFormat:r,dimRoundingMode:i,inputShape:o},f=Ca.runKernel(qe,p,d);return u?_i(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Yi=za({conv2dTranspose_:function(e,t,n,s,a,r){const i=Ma(e,"x","conv2dTranspose"),o=Ma(t,"filter","conv2dTranspose");return Xi(n,i,o,s,a,"NHWC",r)}}),Zi=za({conv3d_:function(e,t,n,s,a="NDHWC",r=[1,1,1]){const i=Ma(e,"x","conv3d"),o=Ma(t,"filter","conv3d");let l=i,u=!1;4===i.rank&&(u=!0,l=_i(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),R(5===l.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${l.rank}.`)),R(5===o.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${o.rank}.`)),R(l.shape[4]===o.shape[3],(()=>`Error in conv3d: depth of input (${l.shape[4]}) must match input depth for filter ${o.shape[3]}.`)),R(Ri(n,r),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${r}'`)),R("NDHWC"===a,(()=>`Error in conv3d: got dataFormat of ${a} but only NDHWC is currently supported.`));const c={x:l,filter:o},h={strides:n,pad:s,dataFormat:a,dilations:r},p=Ca.runKernel(Ke,c,h);return u?_i(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),Ji=za({conv3DBackpropInput_:function(e,t,n,s,a){R(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let r=e,i=t,o=!1;4===t.rank&&(o=!0,i=_i(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),r=[1,e[0],e[1],e[2],e[3]]);const l=r[4],u=i.shape[4];R(5===r.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${r.length}.`)),R(5===i.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${i.rank}`)),R(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),R(l===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[3]}.`)),R(u===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${n.shape[4]}.`));const c={dy:i,filter:n},h={pad:a,strides:s,inputShape:r},p=Ca.runKernel(Ye,c,h);return o?_i(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}}),Qi=za({conv3dTranspose_:function(e,t,n,s,a){const r=Ma(e,"x","conv3dTranspose"),i=Ma(t,"filter","conv3dTranspose");return Ji(n,r,i,s,a)}}),eo=za({depthwiseConv2d_:function(e,t,n,s,a="NHWC",r=[1,1],i){const o=Ma(e,"x","depthwiseConv2d","float32"),l=Ma(t,"filter","depthwiseConv2d","float32");let u=o,c=!1;3===o.rank&&(c=!0,u=_i(o,[1,o.shape[0],o.shape[1],o.shape[2]])),R(4===u.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`)),R(4===l.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${l.rank}.`)),R(u.shape[3]===l.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${u.shape[3]}) must match the inChannels dimension in filter ${l.shape[2]}.`)),Di("depthwiseConv2d",s,i);const h={x:u,filter:l},p={strides:n,pad:s,dataFormat:a,dilations:r,dimRoundingMode:i},d=Ca.runKernel(at,h,p);return c?_i(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),to=za({floorDiv_:function(e,t){let n=Ma(e,"a","floorDiv"),s=Ma(t,"b","floorDiv");[n,s]=wa(n,s);const a={a:n,b:s};return Ca.runKernel(Nt,a)}}),no=za({div_:function(e,t){let n=Ma(e,"a","div"),s=Ma(t,"b","div");if([n,s]=wa(n,s),"int32"===n.dtype&&"int32"===s.dtype)return to(n,s);const a={a:n,b:s};return Ca.runKernel(ht,a,{})}}),so=za({elu_:function(e){const t={x:Ma(e,"x","elu","float32")};return Ca.runKernel(dt,t)}}),ao=za({equal_:function(e,t){let n=Ma(e,"a","equal","string_or_numeric"),s=Ma(t,"b","equal","string_or_numeric");[n,s]=wa(n,s),Lr(n.shape,s.shape);const a={a:n,b:s};return Ca.runKernel(gt,a)}}),ro=za({exp_:function(e){const t={x:Ma(e,"x","exp")};return Ca.runKernel(yt,t)}}),io=za({expandDims_:function(e,t=0){const n=Ma(e,"x","expandDims","string_or_numeric");R(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const s={input:n},a={dim:t};return Ca.runKernel(bt,s,a)}}),oo=za({tile_:function(e,t){const n=Ma(e,"x","tile","string_or_numeric");R(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const s={x:n},a={reps:t};return Ca.runKernel(ls,s,a)}}),lo=za({eye_:function(e,t,n,s="float32"){null==t&&(t=e);const a=Ir([e,t],s),r=e<=t?e:t;for(let e=0;e<r;++e)a.set(1,e,e);const i=_i(a.toTensor(),[e,t]);if(null==n)return i;if(1===n.length)return oo(io(i,0),[n[0],1,1]);if(2===n.length)return oo(io(io(i,0),0),[n[0],n[1],1,1]);if(3===n.length)return oo(io(io(io(i,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});function uo(e,t,n){const s={shape:e,value:t,dtype:n};return Ca.runKernel(kt,{},s)}const co=za({floor_:function(e){const t={x:Ma(e,"x","floor","float32")};return Ca.runKernel(It,t)}}),ho=za({gather_:function(e,t,n=0,s=0){const a={x:Ma(e,"x","gather"),indices:Ma(t,"indices","gather","int32")},r={axis:n,batchDims:s};return Ca.runKernel(Tt,a,r)}}),po=za({greater_:function(e,t){let n=Ma(e,"a","greater","string_or_numeric"),s=Ma(t,"b","greater","string_or_numeric");[n,s]=wa(n,s),Lr(n.shape,s.shape);const a={a:n,b:s};return Ca.runKernel(Ct,a)}}),fo=za({greaterEqual_:function(e,t){let n=Ma(e,"a","greaterEqual","string_or_numeric"),s=Ma(t,"b","greaterEqual","string_or_numeric");[n,s]=wa(n,s),Lr(n.shape,s.shape);const a={a:n,b:s};return Ca.runKernel(Et,a)}}),mo=za({leakyRelu_:function(e,t=.2){const n={x:Ma(e,"x","leakyRelu")},s={alpha:t};return Ca.runKernel(Mt,n,s)}}),go=za({log_:function(e){const t={x:Ma(e,"x","log","float32")};return Ca.runKernel(Pt,t)}}),yo=za({log1p_:function(e){const t={x:Ma(e,"x","log1p")};return Ca.runKernel(Wt,t)}}),bo=za({max_:function(e,t=null,n=!1){const s={x:Ma(e,"x","max")},a={reductionIndices:t,keepDims:n};return Ca.runKernel(qt,s,a)}}),xo=za({mul_:function(e,t){let n=Ma(e,"a","mul"),s=Ma(t,"b","mul");[n,s]=wa(n,s);const a={a:n,b:s};return Ca.runKernel(on,a)}}),wo=za({sub_:function(e,t){let n=Ma(e,"a","sub"),s=Ma(t,"b","sub");[n,s]=wa(n,s);const a={a:n,b:s};return Ca.runKernel(rs,a)}}),ko=za({sum_:function(e,t=null,n=!1){let s=Ma(e,"x","sum");"bool"===s.dtype&&(s=Nr(s,"int32"));const a={x:s},r={axis:t,keepDims:n};return Ca.runKernel(Gn,a,r)}}),vo=za({logSoftmax_:function(e,t=-1){const n=Ma(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const s=pi(((e,n)=>{const s=bo(e,t,!0),a=wo(e,s),r=wo(Nr(a,"float32"),go(ko(ro(a),t,!0)));return n([r]),{value:r,gradFunc:(e,n)=>{const[s]=n,a=ro(s);return wo(e,xo(ko(e,t,!0),a))}}}));return s(n)}}),Io=za({logicalAnd_:function(e,t){const n=Ma(e,"a","logicalAnd","bool"),s=Ma(t,"b","logicalAnd","bool");Lr(n.shape,s.shape);const a={a:n,b:s};return Ca.runKernel(Vt,a)}}),No=za({matMul_:function(e,t,n=!1,s=!1){let a=Ma(e,"a","matMul"),r=Ma(t,"b","matMul");[a,r]=wa(a,r);const i={a,b:r},o={transposeA:n,transposeB:s};return Ca.runKernel(Oe,i,o)}}),So=za({maxPool_:function(e,t,n,s,a){const r=Ma(e,"x","maxPool");let i=r,o=!1;3===r.rank&&(o=!0,i=_i(r,[1,r.shape[0],r.shape[1],r.shape[2]])),R(4===i.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${i.rank}.`)),R(Ri(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),Di("maxPool",s,a);const l={x:i},u={filterSize:t,strides:n,pad:s,dimRoundingMode:a},c=Ca.runKernel(Xt,l,u);return o?_i(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),To=za({maxPool3d_:function(e,t=[1,1,1],n,s,a,r="NDHWC"){const i=Ma(e,"x","maxPool3d");let o=i,l=!1;4===i.rank&&(l=!0,o=_i(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),R(5===o.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${o.rank}.`)),R("NDHWC"===r,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${r}`)),Di("maxPool3d",s,a);const u={x:o},c={filterSize:t,strides:n,pad:s,dimRoundingMode:a,dataFormat:r},h=Ca.runKernel(Zt,u,c);return l?_i(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),$o=za({maximum_:function(e,t){let n=Ma(e,"a","maximum"),s=Ma(t,"b","maximum");[n,s]=wa(n,s),"bool"===n.dtype&&(n=Nr(n,"int32"),s=Nr(s,"int32")),Lr(n.shape,s.shape);const a={a:n,b:s};return Ca.runKernel(Kt,a)}}),Co=za({mean_:function(e,t=null,n=!1){const s={x:Ma(e,"x","mean")},a={axis:t,keepDims:n};return Ca.runKernel(en,s,a)}}),Eo=za({minimum_:function(e,t){let n=Ma(e,"a","minimum"),s=Ma(t,"b","minimum");[n,s]=wa(n,s),"bool"===n.dtype&&(n=Nr(n,"int32"),s=Nr(s,"int32")),Lr(n.shape,s.shape);const a={a:n,b:s};return Ca.runKernel(nn,a)}});function Ao(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function Ro(e,t,n){const s=e.length+t.length,a=[];let r=0,i=0;for(let o=0;o<s;o++)-1===n.indexOf(o)?a.push(e[r++]):a.push(t[i++]);return a}function Fo(e,t){const n=[],s=e.length;for(let a=0;a<s;a++)-1===t.indexOf(a)&&n.push(e[a]);return[n,t.map((t=>e[t]))]}function Do(e,t){return Ro(e,t.map((e=>1)),t)}function _o(e,t,n){R(Ao(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function Oo(e,t){if(Ao(e,t))return null;const n=[];for(let s=0;s<t;++s)-1===e.indexOf(s)&&n.push(s);return e.forEach((e=>n.push(e))),n}function Mo(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function Lo(e,t){const n=[];for(let s=t-e;s<t;++s)n.push(s);return n}const zo=za({square_:function(e){const t=Ma(e,"x","square");return Ca.runKernel("Square",{x:t},{})}}),Bo=za({moments_:function(e,t=null,n=!1){const s=V(t,(e=Ma(e,"x","moments")).shape),a=Co(e,s,n);let r=a.shape;n||(r=Do(a.shape,s));const i=zo(wo(Nr(e,"float32"),_i(a,r)));return{mean:a,variance:Co(i,s,n)}}}),Po=za({neg_:function(e){const t={x:Ma(e,"x","neg")};return Ca.runKernel(ln,t)}}),Wo=za({notEqual_:function(e,t){let n=Ma(e,"a","notEqual","string_or_numeric"),s=Ma(t,"b","notEqual","string_or_numeric");[n,s]=wa(n,s),Lr(n.shape,s.shape);const a={a:n,b:s};return Ca.runKernel(un,a)}}),Vo=za({oneHot_:function(e,t,n=1,s=0){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:Ma(e,"indices","oneHot","int32")},r={depth:t,onValue:n,offValue:s};return Ca.runKernel(fn,a,r)}});function Uo(e,t="float32"){if("complex64"===t){const t=Uo(e,"float32"),n=Uo(e,"float32");return Ba(t,n)}const n=ae(O(e),t);return Ca.makeTensor(n,e,t)}function Go(e,t="float32"){if("complex64"===t){const t=Go(e,"float32"),n=Uo(e,"float32");return Ba(t,n)}const n=se(O(e),t);return Ca.makeTensor(n,e,t)}const Ho=za({onesLike_:function(e){const t={x:Ma(e,"x","onesLike")};return Ca.runKernel(dn,t)}}),jo=za({pad_:function(e,t,n=0){const s=Ma(e,"x","pad");if(0===s.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const a={paddings:t,constantValue:n},r={x:s};return Ca.runKernel(gn,r,a)}}),qo=za({prelu_:function(e,t){const n={x:Ma(e,"x","prelu"),alpha:Ma(t,"alpha","prelu")};return Ca.runKernel(bn,n)}});var Ko=n(377);class Xo{constructor(e,t,n,s,a){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=s,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const r=a||Math.random();this.random=Ko.alea(r.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let s,a,r;do{s=2*this.random()-1,a=2*this.random()-1,r=s*s+a*a}while(r>=1||0===r);const i=Math.sqrt(-2*Math.log(r)/r);e=this.mean+this.stdDev*s*i,t=this.mean+this.stdDev*a*i,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Yo{constructor(e=0,t=1,n,s){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==s&&(s=Math.random()),"number"==typeof s&&(s=s.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Ko.alea(s)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Zo=za({randomNormal_:function(e,t=0,n=1,s,a){if(null!=s&&"bool"===s)throw new Error(`Unsupported data type ${s}`);const r=new Xo(t,n,s,!1,a),i=Ir(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=r.nextValue();return i.toTensor()}}),Jo=za({randomUniform_:function(e,t=0,n=1,s="float32",a){const r=Ir(e,s),i=new Yo(t,n,null,a);for(let e=0;e<r.values.length;e++)r.values[e]=i.nextValue();return r.toTensor()}}),Qo=za({relu_:function(e){const t={x:Ma(e,"x","relu")};return Ca.runKernel(In,t)}}),el=za({reverse_:function(e,t){const n={x:Ma(e,"x","reverse")},s={dims:t};return Ca.runKernel(An,n,s)}}),tl=za({selu_:function(e){const t={x:Ma(e,"x","selu")};return Ca.runKernel(Mn,t)}}),nl=za({separableConv2d_:function(e,t,n,s,a,r=[1,1],i="NHWC"){const o=Ma(e,"x","separableConv2d"),l=Ma(t,"depthwiseFilter","separableConv2d"),u=Ma(n,"pointwiseFilter","separableConv2d");let c=o,h=!1;if(3===o.rank&&(h=!0,c=_i(o,[1,o.shape[0],o.shape[1],o.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");R(4===c.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`)),R(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),R(4===u.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),R(1===u.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`)),R(1===u.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`));const p=l.shape[2],d=l.shape[3];R(u.shape[2]===p*d,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${p*d}, but got ${u.shape[2]}.`));const f=eo(c,l,s,a,i,r),m=qi(f,u,1,"valid",i);return h?_i(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),sl=za({sigmoid_:function(e){const t={x:Ma(e,"x","sigmoid","float32")};return Ca.runKernel(Wn,t)}}),al=za({slice_:function(e,t,n){const s=Ma(e,"x","slice","string_or_numeric");if(0===s.rank)throw new Error("Slicing scalar is not possible");const a={x:s},r={begin:t,size:n};return Ca.runKernel(Ln,a,r)}}),rl=za({slice1d_:function(e,t,n){const s=Ma(e,"x","slice1d");return R(1===s.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${s.rank} tensor`)),al(s,[t],[n])}}),il=za({slice2d_:function(e,t,n){const s=Ma(e,"x","slice2d");return R(2===s.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${s.rank} tensor`)),al(s,t,n)}}),ol=za({slice3d_:function(e,t,n){const s=Ma(e,"x","slice3d");return R(3===s.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${s.rank} tensor`)),al(s,t,n)}}),ll=za({slice4d_:function(e,t,n){const s=Ma(e,"x","slice4d");return R(4===s.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${s.rank} tensor`)),al(s,t,n)}}),ul=za({softmax_:function(e,t=-1){const n=Ma(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const s={logits:n},a={dim:t};return Ca.runKernel(qn,s,a)}}),cl=za({softplus_:function(e){const t={x:Ma(e,"x","softplus")};return Ca.runKernel(Vn,t)}}),hl=za({split_:function(e,t,n=0){const s={x:Ma(e,"x","split")},a={numOrSizeSplits:t,axis:n};return Ca.runKernel(jn,s,a)}}),pl=za({sqrt_:function(e){const t={x:Ma(e,"x","sqrt","float32")};return Ca.runKernel(Un,t)}}),dl=za({squeeze_:function(e,t){const n=Ma(e,"x","squeeze");return _i(n,U(n.shape,t).newShape)}}),fl=za({stack_:function(e,t=0){const n=La(e,"tensors","stack","string_or_numeric");R(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&R(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const s=n,a={axis:t};return Ca.runKernel(mn,s,a)}}),ml=za({tanh_:function(e){const t={x:Ma(e,"x","tanh","float32")};return Ca.runKernel(os,t)}});function gl(e,t){D(e);const n=Da(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Pa(e,null,n,t)}const yl=za({truncatedNormal_:function(e,t=0,n=1,s,a){if(null!=s&&"bool"===s)throw new Error("Unsupported data type $ { dtype }");const r=new Xo(t,n,s,!0,a),i=Ir(e,s);for(let e=0;e<i.values.length;e++)i.values[e]=r.nextValue();return i.toTensor()}}),bl=za({unstack_:function(e,t=0){const n=Ma(e,"x","unstack","string_or_numeric");R(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const s={value:n},a={axis:t};return Ca.runKernel(ds,s,a)}}),xl=za({broadcastTo_:function(e,t){let n=Ma(e,"broadcastTo","x");const s=n.shape;if(t.some((e=>!(e>0)||e%1!=0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=_i(n,e)}const a=n.shape,r=Array.from(t);for(let e=t.length-1;e>=0;e--)if(a[e]===t[e])r[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${s}] cannot be broadcast to [${t}].`);if(0===r.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return Sr(n);const i={x:n},o={reps:r};return Ca.runKernel(ls,i,o)}}),wl=za({where_:function(e,t,n){const s=Ma(t,"a","where"),a=Ma(n,"b","where"),r=Ma(e,"condition","where","bool"),i=Lr(Lr(r.shape,s.shape),a.shape),o={condition:xl(r,i),t:xl(s,i),e:xl(a,i)};return Ca.runKernel(On,o)}}),kl=za({zerosLike_:function(e){const t={x:Ma(e,"x","zerosLike")};return Ca.runKernel(ms,t)}}),vl=za({imag_:function(e){const t={input:Ma(e,"input","imag")};return Ca.runKernel(Ft,t)}}),Il=za({real_:function(e){const t={input:Ma(e,"input","real")};return Ca.runKernel(kn,t)}}),Nl=za({transpose_:function(e,t,n){const s=Ma(e,"x","transpose");if(null==t&&(t=s.shape.map(((e,t)=>t)).reverse()),R(s.rank===t.length,(()=>`Error in transpose: rank of input ${s.rank} must match length of perm ${t}.`)),t.forEach((e=>{R(e>=0&&e<s.rank,(()=>"All entries in 'perm' must be between 0 and "+(s.rank-1)+` but got ${t}`))})),s.rank<=1)return s.clone();const a={x:s},r={perm:t};return"complex64"===s.dtype?li((()=>{let e=Il(s),t=vl(s);return e=Ca.runKernel(hs,{x:e},r),t=Ca.runKernel(hs,{x:t},r),n&&(t=Po(t)),Ba(e,t)})):Ca.runKernel(hs,a,r)}}),Sl=za({dropout_:function(e,t,n,s){const a=Ma(e,"x","dropout");if(R("float32"===a.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${a.dtype} tensor instead.`)),R(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof ua?a.clone():a;const r=function(e,t){if(null==t)return e.shape.slice();if(M(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let s=0;s<e.shape.length;s++)null==t[s]&&null!=e.shape[s]?n.push(e.shape[s]):n.push(t[s]);return n}return t}(a,n),i=1-t,o=no(co(gi(Jo(r,0,1,"float32",s),i)),i);return xo(a,o)}}),Tl=za({fft_:function(e){R("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Ca.runKernel(wt,t)}}),$l=za({rfft_:function(e,t){R("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const s=e.size/n;let a;if(null!=t&&t<n){const s=e.shape.map((e=>0)),r=e.shape.map((e=>e));r[e.shape.length-1]=t,a=al(e,s,r),n=t}else if(null!=t&&t>n){const s=e.shape.map((e=>e));s[e.shape.length-1]=t-n,a=Vi([e,Uo(s)],e.shape.length-1),n=t}else a=e;const r=kl(a),i=_i(Ba(a,r),[s,n]),o=Tl(i),l=Math.floor(n/2)+1,u=Il(o),c=vl(o),h=hl(u,[l,n-l],u.shape.length-1),p=hl(c,[l,n-l],c.shape.length-1),d=a.shape.slice();return d[a.shape.length-1]=l,_i(Ba(h[0],p[0]),d)}}),Cl=za({ifft_:function(e){R("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return Ca.runKernel(Rt,t)}}),El=za({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let s;if(t<=2){const a=_i(e,[n,t]);s=Cl(a)}else{const a=[n,2*(t-1)],r=_i(Il(e),[n,t]),i=_i(vl(e),[n,t]),o=el(al(r,[0,1],[n,t-2]),1),l=xo(el(al(i,[0,1],[n,t-2]),1),di(-1)),u=Vi([r,o],1),c=Vi([i,l],1),h=_i(Ba(u,c),[a[0],a[1]]);s=Cl(h)}if(s=Il(s),3===e.rank&&0!==e.shape[0]){const t=s,n=e.shape[0];s=_i(s,[n,s.shape[0]/n,s.shape[1]]),t.dispose()}return s}}),Al=za({conv2DBackpropFilter_:function(e,t,n,s,a,r="NHWC",i){let o=e;3===e.rank&&(o=_i(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=_i(t,[1,t.shape[0],t.shape[1],t.shape[2]])),R(4===o.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${o.shape}.`)),R(4===l.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${l.shape}.`)),R(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const u="NHWC"===r?o.shape[3]:o.shape[1],c="NHWC"===r?l.shape[3]:l.shape[1];R(u===n[2],(()=>`Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${n[2]}.`)),R(c===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${n[3]}).`)),Di("conv2dDerFilter",a,i);const h={x:o,dy:l},p={strides:s,pad:a,dataFormat:r,dimRoundingMode:i,filterShape:n};return Ca.runKernel(je,h,p)}}),Rl=za({relu6_:function(e){const t={x:Ma(e,"x","relu6")};return Ca.runKernel(En,t)}}),Fl=za({step_:function(e,t=0){const n={x:Ma(e,"x","step")},s={alpha:t};return Ca.runKernel(gs,n,s)}});function Dl(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return xo(e,Fl(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function _l(e,t){let n=t;const s=Mr(e.shape,t.shape);return s.length>0&&(n=ko(n,s)),_i(n,e.shape)}function Ol(e,t,n,s){if("linear"===t)return e;if("relu"===t)return Qo(e);if("elu"===t)return so(e);if("relu6"===t)return Rl(e);if("prelu"===t)return qo(e,n);if("leakyrelu"===t)return mo(e,s);if("sigmoid"===t)return sl(e);throw new Error(`Unknown fused activation ${t}.`)}const Ml=(e,t)=>!(e>0)||"linear"===t,Ll=za({fusedConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:a="NHWC",dilations:r=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(l=l||"linear",!1===Ml(Ca.state.gradientDepth,l)){R("NHWC"===a,(()=>`Error in fused conv2d: got dataFormat of ${a} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let h=qi(e,t,n,s,a,r,i);return null!=o&&(h=gi(h,o)),Ol(h,l,u,c)}const h=Ma(e,"x","conv2d","float32"),p=Ma(t,"filter","conv2d","float32");let d=h,f=!1;3===h.rank&&(f=!0,d=_i(h,[1,h.shape[0],h.shape[1],h.shape[2]])),R(4===d.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`)),R(4===p.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${p.rank}.`)),Di("fused conv2d",s,i);const m="NHWC"===a?d.shape[3]:d.shape[1];R(p.shape[2]===m,(()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${p.shape[2]}.`)),R(Ri(n,r),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${r}'`));const g=Ii(d.shape,p.shape,n,r,s,i);let y,b;if(null!=o&&(y=Ma(o,"bias","fused conv2d"),[y]=wa(y,h),"NHWC"===a?Lr(g.outShape,y.shape):(R(y.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`)),R(0===y.shape.length||y.shape[0]===g.outChannels||1===y.shape[0],(()=>`Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${g.outChannels})`)))),null!=u){const e=u.shape;if(R(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)R(1===e[0]||e[0]===g.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${g.outChannels}).`));else if(3===e.length)try{Lr(e,g.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(n)}b=Ma(u,"prelu weights","fused conv2d")}const x=(e,t)=>{R("NHWC"===a,(()=>`Error in gradient of fused conv2D: got dataFormat of ${a} but only NHWC is currently supported.`));const[i,o,u,c]=t,h=Dl(e,u,l);R(Ai(r),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`));const p=[Xi(o.shape,h,i,n,s),Al(o,h,i.shape,n,s)];if(null!=c){const e=_l(c,h);p.push(e)}return p},w={x:d,filter:p,bias:y,preluActivationWeights:b},k={strides:n,pad:s,dataFormat:a,dilations:r,dimRoundingMode:i,activation:l,leakyreluAlpha:c};if(null==o){const e=pi(((e,t,n)=>{let s=Ca.runKernel(ws,w,k);return n([t,e,s]),f&&(s=_i(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:x}}));return e(d,p)}{const e=pi(((e,t,n,s)=>{let a=Ca.runKernel(ws,w,k);return s([t,e,a,n]),f&&(a=_i(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:x}}));return e(d,p,y)}}}),zl=za({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,s,a,r=[1,1],i){let o=e;3===e.rank&&(o=_i(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let l=t;3===l.rank&&(l=_i(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={x:o,dy:l},c={strides:s,pad:a,dimRoundingMode:i,dilations:r,filterShape:n};return Ca.runKernel(rt,u,c)}}),Bl=za({depthwiseConv2dNativeBackpropInput_:function(e,t,n,s,a,r=[1,1],i){let o=t,l=!1;3===t.rank&&(l=!0,o=_i(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const u={dy:o,filter:n},c={strides:s,pad:a,dimRoundingMode:i,dilations:r,inputShape:e},h=Ca.runKernel(it,u,c);return l?_i(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),Pl=za({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:s,dataFormat:a="NHWC",dilations:r=[1,1],dimRoundingMode:i,bias:o,activation:l="linear",preluActivationWeights:u,leakyreluAlpha:c}){if(!1===Ml(Ca.state.gradientDepth,l)){let h=eo(e,t,n,s,a,r,i);return null!=o&&(h=gi(h,o)),Ol(h,l,u,c)}const h=Ma(e,"x","depthwiseConv2d","float32"),p=Ma(t,"filter","depthwiseConv2d","float32");let d=h,f=!1;3===h.rank&&(f=!0,d=_i(h,[1,h.shape[0],h.shape[1],h.shape[2]])),R(4===d.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`)),R(4===p.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${p.rank}.`)),R(d.shape[3]===p.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${p.shape[2]}.`)),null==r&&(r=[1,1]),R(Ri(n,r),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${r}'`)),Di("fused depthwiseConv2d",s,i);const m=Ii(d.shape,p.shape,n,r,s,i,!0);let g,y;null!=o&&(g=Ma(o,"bias","fused conv2d"),[g]=wa(g,h),Lr(m.outShape,g.shape)),null!=u&&(y=Ma(u,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{R(Ai(r),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${r}'`));const[a,o,u,c]=t,h=Dl(e,u,l),p=Bl(o.shape,h,a,n,s,r,i),d=zl(o,h,a.shape,n,s,r,i);return null!=c?[p,d,_l(g,h)]:[p,d]},x={x:d,filter:p,bias:g,preluActivationWeights:y},w={strides:n,pad:s,dataFormat:a,dilations:r,dimRoundingMode:i,activation:l,leakyreluAlpha:c};if(null==o){const e=pi(((e,t,n)=>{let s=Ca.runKernel(ks,x,w);return n([t,e,s]),f&&(s=_i(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}}));return e(d,p)}{const e=pi(((e,t,n,s)=>{let a=Ca.runKernel(ks,x,w);return s([t,e,a,n]),f&&(a=_i(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:b}}));return e(d,p,g)}}}),Wl=za({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:s=!1,bias:a,activation:r="linear",preluActivationWeights:i,leakyreluAlpha:o}){if(!1===Ml(Ca.state.gradientDepth,r)){let l=No(e,t,n,s);return null!=a&&(l=gi(l,a)),Ol(l,r,i,o)}let l=Ma(e,"a","fused matMul"),u=Ma(t,"b","fused matMul");[l,u]=wa(l,u);const c=n?l.shape[l.rank-2]:l.shape[l.rank-1],h=s?u.shape[u.rank-1]:u.shape[u.rank-2],p=n?l.shape[l.rank-1]:l.shape[l.rank-2],d=s?u.shape[u.rank-2]:u.shape[u.rank-1],f=l.shape.slice(0,-2),m=u.shape.slice(0,-2),g=O(f),y=O(m);R(c===h,(()=>`Error in fused matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${l.shape} and ${u.shape} and transposeA=${n} and transposeB=${s} must match.`));const b=Lr(l.shape.slice(0,-2),u.shape.slice(0,-2)).concat([p,d]),x=_i(l,n?[g,c,p]:[g,p,c]),w=_i(u,s?[y,d,h]:[y,h,d]);let k,v;null!=a&&(k=Ma(a,"bias","fused matMul"),[k]=wa(k,l),Lr(b,k.shape)),null!=i&&(v=Ma(i,"prelu weights","fused matMul"));const I=(e,t)=>{const[i,o,l,u]=t,c=Dl(_i(e,l.shape),l,r);let h,p;return n||s?!n&&s?(h=No(c,o,!1,!1),p=No(c,i,!0,!1)):n&&!s?(h=No(o,c,!1,!0),p=No(i,c,!1,!1)):(h=No(o,c,!0,!0),p=No(c,i,!0,!0)):(h=No(c,o,!1,!0),p=No(i,c,!0,!1)),null!=a?[h,p,_l(u,c)]:[h,p]},N={a:x,b:w,bias:k,preluActivationWeights:v},S={transposeA:n,transposeB:s,activation:r,leakyreluAlpha:o};if(null==a){const e=pi(((e,t,n)=>{const s=Ca.runKernel(xs,N,S);return n([e,t,s]),{value:_i(s,b),gradFunc:I}}));return e(x,w)}{const e=pi(((e,t,n,s)=>{const a=Ca.runKernel(xs,N,S);return s([e,t,a,n]),{value:_i(a,b),gradFunc:I}}));return e(x,w,k)}}});function Vl(e,t,n){const s=1-e%2,a=new Float32Array(e);for(let r=0;r<e;++r){const i=2*Math.PI*r/(e+s-1);a[r]=t-n*Math.cos(i)}return gl(a,"float32")}za({hammingWindow_:function(e){return Vl(e,.54,.46)}});const Ul=za({hannWindow_:function(e){return Vl(e,.5,.5)}});function Gl(e,t,n){if(D(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const s=Da(e,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Pa(e,t,s,n)}const Hl=za({frame_:function(e,t,n,s=!1,a=0){let r=0;const i=[];for(;r+t<=e.size;)i.push(al(e,r,t)),r+=n;if(s)for(;r<e.size;){const s=r+t-e.size,o=Vi([al(e,r,t-s),uo([s],a)]);i.push(o),r+=n}return 0===i.length?Gl([],[0,t]):_i(Vi(i),[i.length,t])}});za({stft_:function(e,t,n,s,a=Ul){var r;null==s&&(r=t,s=Math.floor(Math.pow(2,Math.ceil(Math.log(r)/Math.log(2)))));const i=Hl(e,t,n),o=xo(i,a(t));return $l(o,s)}});const jl=za({cropAndResize_:function(e,t,n,s,a="bilinear",r=0){const i=Ma(e,"image","cropAndResize"),o=Ma(t,"boxes","cropAndResize","float32"),l=Ma(n,"boxInd","cropAndResize","int32"),u=o.shape[0];R(4===i.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${i.rank}.`)),R(2===o.rank&&4===o.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${u},4] but had shape ${o.shape}.`)),R(1===l.rank&&l.shape[0]===u,(()=>`Error in cropAndResize: boxInd must be have size [${u}] but had shape ${o.shape}.`)),R(2===s.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${s.length}.`)),R(s[0]>=1&&s[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${s}`)),R("bilinear"===a||"nearest"===a,(()=>`method must be bilinear or nearest, but was ${a}`));const c={image:i,boxes:o,boxInd:l},h={method:a,extrapolationValue:r,cropSize:s};return Ca.runKernel(tt,c,h)}}),ql=za({flipLeftRight_:function(e){const t=Ma(e,"image","flipLeftRight","float32");R(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return Ca.runKernel(vt,n,{})}}),Kl=za({grayscaleToRGB_:function(e){const t=Ma(e,"image","grayscaleToRGB"),n=t.rank-1,s=t.shape[n];R(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),R(1===s,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${s}.`));const a=new Array(t.rank);return a.fill(1,0,n),a[n]=3,oo(t,a)}}),Xl=za({rotateWithOffset_:function(e,t,n=0,s=.5){const a=Ma(e,"image","rotateWithOffset","float32");R(4===a.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${a.rank}.`));const r={image:a},i={radians:t,fillValue:n,center:s};return Ca.runKernel(bs,r,i)}});function Yl(e,t,n,s,a,r){null==s&&(s=.5),null==a&&(a=Number.NEGATIVE_INFINITY),null==r&&(r=0);const i=e.shape[0];return n=Math.min(n,i),R(0<=s&&s<=1,(()=>`iouThreshold must be in [0, 1], but was '${s}'`)),R(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),R(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),R(1===t.rank,(()=>"scores must be a 1D tensor")),R(t.shape[0]===i,(()=>`scores has incompatible shape with boxes. Expected ${i}, but was ${t.shape[0]}`)),R(0<=r&&r<=1,(()=>`softNmsSigma must be in [0, 1], but was '${r}'`)),{maxOutputSize:n,iouThreshold:s,scoreThreshold:a,softNmsSigma:r}}const Zl=za({nonMaxSuppression_:function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY){const r=Ma(e,"boxes","nonMaxSuppression","float32"),i=Ma(t,"scores","nonMaxSuppression","float32"),o=Yl(r,i,n,s,a),l={maxOutputSize:n=o.maxOutputSize,iouThreshold:s=o.iouThreshold,scoreThreshold:a=o.scoreThreshold};return Ca.runKernel(cn,{boxes:r,scores:i},l)}});function Jl(e,t,n){const s=function(e,t,n){return function(e,t,n){let s=0,a=e.length,r=0,i=!1;for(;s<a;){r=s+(a-s>>>1);const o=n(t,e[r]);o>0?s=r+1:(a=r,i=!o)}return i?s:-s-1}(e,t,n||Ql)}(e,t,n),a=s<0?-(s+1):s;e.splice(a,0,t)}function Ql(e,t){return e>t?1:e<t?-1:0}function eu(e,t,n,s,a){return su(e,t,n,s,a,0)}function tu(e,t,n,s,a,r){return su(e,t,n,s,a,0,!1,r,!0)}function nu(e,t,n,s,a,r){return su(e,t,n,s,a,r,!0)}function su(e,t,n,s,a,r,i=!1,o=!1,l=!1){const u=[];for(let e=0;e<t.length;e++)t[e]>a&&u.push({score:t[e],boxIndex:e,suppressBeginIndex:0});u.sort(iu);const c=r>0?-.5/r:0,h=[],p=[];for(;h.length<n&&u.length>0;){const t=u.pop(),{score:n,boxIndex:r,suppressBeginIndex:i}=t;if(n<a)break;let o=!1;for(let n=h.length-1;n>=i;--n){const i=au(e,r,h[n]);if(i>=s){o=!0;break}if(t.score=t.score*ru(s,c,i),t.score<=a)break}t.suppressBeginIndex=h.length,o||(t.score===n?(h.push(r),p.push(t.score)):t.score>a&&Jl(u,t,iu))}const d=h.length,f=n-d;o&&f>0&&(h.push(...new Array(f).fill(0)),p.push(...new Array(f).fill(0)));const m={selectedIndices:h};return i&&(m.selectedScores=p),l&&(m.validOutputs=d),m}function au(e,t,n){const s=e.subarray(4*t,4*t+4),a=e.subarray(4*n,4*n+4),r=Math.min(s[0],s[2]),i=Math.min(s[1],s[3]),o=Math.max(s[0],s[2]),l=Math.max(s[1],s[3]),u=Math.min(a[0],a[2]),c=Math.min(a[1],a[3]),h=Math.max(a[0],a[2]),p=Math.max(a[1],a[3]),d=(o-r)*(l-i),f=(h-u)*(p-c);if(d<=0||f<=0)return 0;const m=Math.max(r,u),g=Math.max(i,c),y=Math.min(o,h),b=Math.min(l,p),x=Math.max(y-m,0)*Math.max(b-g,0);return x/(d+f-x)}function ru(e,t,n){const s=Math.exp(t*n*n);return n<=e?s:0}function iu(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const ou=za({nonMaxSuppressionWithScore_:function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY,r=0){const i=Ma(e,"boxes","nonMaxSuppression"),o=Ma(t,"scores","nonMaxSuppression"),l=Yl(i,o,n,s,a,r),u={boxes:i,scores:o},c={maxOutputSize:n=l.maxOutputSize,iouThreshold:s=l.iouThreshold,scoreThreshold:a=l.scoreThreshold,softNmsSigma:r=l.softNmsSigma},h=Ca.runKernel(pn,u,c);return{selectedIndices:h[0],selectedScores:h[1]}}}),lu=za({nonMaxSuppressionPadded_:function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY,r=!1){const i=Ma(e,"boxes","nonMaxSuppression"),o=Ma(t,"scores","nonMaxSuppression"),l=Yl(i,o,n,s,a,null),u={boxes:i,scores:o},c={maxOutputSize:l.maxOutputSize,iouThreshold:l.iouThreshold,scoreThreshold:l.scoreThreshold,padToMaxOutputSize:r},h=Ca.runKernel(hn,u,c);return{selectedIndices:h[0],validOutputs:h[1]}}}),uu=za({resizeBilinear_:function(e,t,n=!1,s=!1){const a=Ma(e,"images","resizeBilinear");R(3===a.rank||4===a.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${a.rank}.`)),R(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),R(!1===s||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let r=a,i=!1;3===a.rank&&(i=!0,r=_i(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const[]=t,o={images:r},l={alignCorners:n,halfPixelCenters:s,size:t},u=Ca.runKernel($n,o,l);return i?_i(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),cu=za({resizeNearestNeighbor_:function(e,t,n=!1,s=!1){const a=Ma(e,"images","resizeNearestNeighbor");R(3===a.rank||4===a.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${a.rank}.`)),R(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),R("float32"===a.dtype||"int32"===a.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),R(!1===s||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let r=a,i=!1;3===a.rank&&(i=!0,r=_i(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const[]=t,o={images:r},l={alignCorners:n,halfPixelCenters:s,size:t},u=Ca.runKernel(Sn,o,l);return i?_i(u,[u.shape[1],u.shape[2],u.shape[3]]):u}}),hu=za({bincount_:function(e,t,n){const s=Ma(e,"x","bincount"),a=Ma(t,"weights","bincount");R("int32"===s.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${s.dtype}`)),R(n>=0,(()=>`size must be non-negative, but got ${n}.`)),R(a.size===s.size||0===a.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${s.shape}, weights shape: ${a.shape}.`));const r={x:s,weights:a},i={size:n};return Ca.runKernel(Le,r,i)}}),pu=za({lessEqual_:function(e,t){let n=Ma(e,"a","lessEqual","string_or_numeric"),s=Ma(t,"b","lessEqual","string_or_numeric");[n,s]=wa(n,s),Lr(n.shape,s.shape);const a={a:n,b:s};return Ca.runKernel(zt,a)}}),du=za({round_:function(e){const t={x:Ma(e,"x","round")};return Ca.runKernel(Rn,t)}});function fu(e,t,n=1,s="float32"){if(0===n)throw new Error("Cannot have a step of zero");const a={start:e,stop:t,step:n,dtype:s};return Ca.runKernel(wn,{},a)}const mu=za({threshold_:function(e,t="binary",n=!1,s=.5){const a=Ma(e,"image","threshold"),r=a.shape[0]*a.shape[1];let i,o,l,u,c=xo(gl([s]),255);if(R(3===a.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${a.rank}.`)),R(3===a.shape[2]||1===a.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${a.shape[2]}.`)),R("int32"===a.dtype||"float32"===a.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${a.dtype}.`)),R("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===a.shape[2]){[i,o,l]=hl(a,[1,1,1],-1);const e=xo(i,.2989),t=xo(o,.587),n=xo(l,.114);u=gi(gi(e,t),n)}else u=e;"otsu"===t&&(c=function(e,t){let n,s,a,r,i,o,l=gl([-1]),u=gl([0]),c=gl([0]);for(let h=0;h<e.size-1;h++){n=al(e,0,h+1),s=al(e,h+1),i=no(ko(n),t),o=no(ko(s),t);const p=ko(xo(n,fu(0,n.size)));a=no(p,ko(n));const d=uo(s.shape,n.size),f=gi(fu(0,s.size),d),m=xo(s,f);r=no(ko(m),ko(s));const g=wo(a,r),y=wo(a,r),b=xo(i,o);c=xo(xo(b,g),y);const x=po(c,u);u=wl(x,c,u),l=wl(x,gl([h]),l)}return l}(hu(Nr(du(u),"int32"),Wa([]),256),r));const h=n?pu(u,c):po(u,c);return Nr(xo(h,255),"int32")}}),gu=za({transform_:function(e,t,n="nearest",s="constant",a=0,r){const i=Ma(e,"image","transform","float32"),o=Ma(t,"transforms","transform","float32");R(4===i.rank,(()=>`Error in transform: image must be rank 4,but got rank ${i.rank}.`)),R(2===o.rank&&(o.shape[0]===i.shape[0]||1===o.shape[0])&&8===o.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),R(null==r||2===r.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${r}.`));const l={image:i,transforms:o},u={interpolation:n,fillMode:s,fillValue:a,outputShape:r};return Ca.runKernel(cs,l,u)}}),yu=za({bandPart_:function(e,t,n){R(t%1==0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),R(n%1==0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const s=Ma(e,"a","bandPart");R(s.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${s.rank}.`));const a=s.shape,[r,i]=s.shape.slice(-2);if(!(t<=r))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${r}).`);if(!(n<=i))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${i}).`);t<0&&(t=r),n<0&&(n=i);const o=_i(fu(0,r,1,"int32"),[-1,1]),l=fu(0,i,1,"int32"),u=wo(o,l),c=Io(pu(u,di(+t,"int32")),fo(u,di(-n,"int32"))),h=Uo([r,i],s.dtype);return _i(fl(bl(_i(s,[-1,r,i])).map((e=>wl(c,e,h)))),a)}}),bu=za({min_:function(e,t=null,n=!1){const s={x:Ma(e,"x","min")},a={axis:t,keepDims:n};return Ca.runKernel(tn,s,a)}}),xu=za({pow_:function(e,t){let n=Ma(e,"base","pow"),s=Ma(t,"exp","pow");[n,s]=wa(n,s);const a={a:n,b:s};return Ca.runKernel(yn,a)}});function wu(e,t,n=null){if(0===e.rank)return mi(e);if(1!==e.rank&&null===n)return wu(_i(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return ko(mi(e),n);if(t===1/0)return bo(mi(e),n);if(t===-1/0)return bu(mi(e),n);if("euclidean"===t||2===t)return pl(ko(xu(mi(e),di(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return bo(ko(mi(e),n[0]),n[1]-1);if(t===1/0)return bo(ko(mi(e),n[1]),n[0]);if(t===-1/0)return bu(ko(mi(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return pl(ko(zo(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const ku=za({norm_:function(e,t="euclidean",n=null,s=!1){const a=wu(e=Ma(e,"x","norm"),t,n);let r=a.shape;if(s){const t=V(n,e.shape);r=Do(a.shape,t)}return _i(a,r)}}),vu=za({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,R(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)R(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=hl(e,e.shape[0],0).map((e=>dl(e,[0])));R(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],s=e;for(let t=0;t<e.length;++t)n.push(Ca.tidy((()=>{let e=s[t];if(t>0)for(let s=0;s<t;++s){const t=xo(ko(xo(n[s],e)),n[s]);e=wo(e,t)}return no(e,ku(e,"euclidean"))})));return t?fl(n,0):n}});function Iu(e,t=!1){return Ca.tidy((()=>{R(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],s=e.shape[1];let a=lo(n),r=Sr(e);const i=Gl([[1]],[1,1]);let o=Sr(i);const l=n>=s?s:n;for(let e=0;e<l;++e){const t=r,l=o,u=a;[o,r,a]=Ca.tidy((()=>{const t=al(r,[e,e],[n-e,1]),l=ku(t),u=al(r,[e,e],[1,1]),c=wl(po(u,0),Gl([[-1]]),Gl([[1]])),h=wo(u,xo(c,l)),p=no(t,h);o=1===p.shape[0]?Sr(i):Vi([i,al(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const d=Po(no(No(c,h),l)),f=al(r,[e,0],[n-e,s]),m=xo(d,o),g=Nl(o);if(0===e)r=wo(f,No(m,No(g,f)));else{const t=wo(f,No(m,No(g,f)));r=Vi([al(r,[0,0],[e,s]),t],0)}const y=Nl(m),b=al(a,[0,e],[n,a.shape[1]-e]);if(0===e)a=wo(b,No(No(b,o),y));else{const t=wo(b,No(No(b,o),y));a=Vi([al(a,[0,0],[n,e]),t],1)}return[o,r,a]})),ui([t,l,u])}return!t&&n>s&&(a=al(a,[0,0],[n,s]),r=al(r,[0,0],[s,s])),[a,r]}))}const Nu=za({qr_:function(e,t=!1){if(R(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return Iu(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),s=bl(_i(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),a=[],r=[];return s.forEach((e=>{const[n,s]=Iu(e,t);a.push(n),r.push(s)})),[_i(fl(a,0),e.shape),_i(fl(r,0),e.shape)]}}});var Su;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Su||(Su={}));const Tu=za({computeWeightedLoss_:function(e,t,n=Su.SUM_BY_NONZERO_WEIGHTS){const s=Ma(e,"losses","computeWeightedLoss");let a=null;null!=t&&(a=Ma(t,"weights","computeWeightedLoss"));const r=null==a?s:xo(s,a);if(n===Su.NONE)return r;if(n===Su.SUM)return ko(r);if(n===Su.MEAN){if(null==a)return Co(r);{const e=s.size/a.size,t=no(ko(r),ko(a));return e>1?no(t,di(e)):t}}if(n===Su.SUM_BY_NONZERO_WEIGHTS){if(null==a)return no(ko(r),di(s.size));{const e=xo(a,Go(s.shape)),t=Nr(ko(Wo(e,di(0))),"float32");return no(ko(r),t)}}throw Error(`Unknown reduction: ${n}`)}});za({absoluteDifference_:function(e,t,n,s=Su.SUM_BY_NONZERO_WEIGHTS){const a=Ma(e,"labels","absoluteDifference"),r=Ma(t,"predictions","absoluteDifference");let i=null;null!=n&&(i=Ma(n,"weights","absoluteDifference")),F(a.shape,r.shape,"Error in absoluteDifference: ");const o=mi(wo(a,r));return Tu(o,i,s)}}),za({cosineDistance_:function(e,t,n,s,a=Su.SUM_BY_NONZERO_WEIGHTS){const r=Ma(e,"labels","cosineDistance"),i=Ma(t,"predictions","cosineDistance");let o=null;null!=s&&(o=Ma(s,"weights","cosineDistance")),F(r.shape,i.shape,"Error in cosineDistance: ");const l=di(1),u=wo(l,ko(xo(r,i),n,!0));return Tu(u,o,a)}}),za({hingeLoss_:function(e,t,n,s=Su.SUM_BY_NONZERO_WEIGHTS){let a=Ma(e,"labels","hingeLoss");const r=Ma(t,"predictions","hingeLoss");let i=null;null!=n&&(i=Ma(n,"weights","hingeLoss")),F(a.shape,r.shape,"Error in hingeLoss: ");const o=di(1);a=wo(xo(di(2),a),o);const l=Qo(wo(o,xo(a,r)));return Tu(l,i,s)}}),za({huberLoss_:function(e,t,n,s=1,a=Su.SUM_BY_NONZERO_WEIGHTS){const r=Ma(e,"labels","huberLoss"),i=Ma(t,"predictions","huberLoss");let o=null;null!=n&&(o=Ma(n,"weights","huberLoss")),F(r.shape,i.shape,"Error in huberLoss: ");const l=di(s),u=mi(wo(i,r)),c=Eo(u,l),h=wo(u,c),p=gi(xo(di(.5),zo(c)),xo(l,h));return Tu(p,o,a)}}),za({logLoss_:function(e,t,n,s=1e-7,a=Su.SUM_BY_NONZERO_WEIGHTS){const r=Ma(e,"labels","logLoss"),i=Ma(t,"predictions","logLoss");let o=null;null!=n&&(o=Ma(n,"weights","logLoss")),F(r.shape,i.shape,"Error in logLoss: ");const l=di(1),u=di(s),c=Po(xo(r,go(gi(i,u)))),h=xo(wo(l,r),go(gi(wo(l,i),u))),p=wo(c,h);return Tu(p,o,a)}});const $u=za({squaredDifference_:function(e,t){let n=Ma(e,"a","squaredDifference"),s=Ma(t,"b","squaredDifference");[n,s]=wa(n,s),Lr(n.shape,s.shape);const a={a:n,b:s};return Ca.runKernel(Qn,a,{})}});za({meanSquaredError_:function(e,t,n,s=Su.SUM_BY_NONZERO_WEIGHTS){const a=Ma(e,"labels","meanSquaredError"),r=Ma(t,"predictions","meanSquaredError");let i=null;null!=n&&(i=Ma(n,"weights","meanSquaredError")),F(a.shape,r.shape,"Error in meanSquaredError: ");const o=$u(a,r);return Tu(o,i,s)}}),za({sigmoidCrossEntropy_:function(e,t,n,s=0,a=Su.SUM_BY_NONZERO_WEIGHTS){let r=Ma(e,"multiClassLabels","sigmoidCrossEntropy");const i=Ma(t,"logits","sigmoidCrossEntropy");let o=null;if(null!=n&&(o=Ma(n,"weights","sigmoidCrossEntropy")),F(r.shape,i.shape,"Error in sigmoidCrossEntropy: "),s>0){const e=di(s),t=di(1),n=di(.5);r=gi(xo(r,wo(t,e)),xo(n,e))}const l=function(e,t){const n=Ma(e,"labels","sigmoidCrossEntropyWithLogits"),s=Ma(t,"logits","sigmoidCrossEntropyWithLogits");F(n.shape,s.shape,"Error in sigmoidCrossEntropyWithLogits: ");const a=Qo(s),r=xo(s,n),i=yo(ro(Po(mi(s))));return gi(wo(a,r),i)}(r,i);return Tu(l,o,a)}});const Cu=za({logSumExp_:function(e,t=null,n=!1){const s=Ma(e,"x","logSumExp"),a=V(t,s.shape),r=bo(s,a,!0),i=wo(s,r),o=ro(i),l=ko(o,a),u=go(l),c=gi(_i(r,u.shape),u);if(n){const e=Do(c.shape,a);return _i(c,e)}return c}});za({softmaxCrossEntropy_:function(e,t,n,s=0,a=Su.SUM_BY_NONZERO_WEIGHTS){let r=Ma(e,"onehotLabels","softmaxCrossEntropy");const i=Ma(t,"logits","softmaxCrossEntropy");let o=null;if(null!=n&&(o=Ma(n,"weights","softmaxCrossEntropy")),F(r.shape,i.shape,"Error in softmaxCrossEntropy: "),s>0){const e=di(s),t=di(1),n=di(r.shape[1]);r=gi(xo(r,wo(t,e)),no(e,n))}const l=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const s=pi(((e,t,s)=>{const a=Cu(t,[n],!0),r=wo(Nr(t,"float32"),a);s([e,r]);const i=Po(xo(r,e));return{value:ko(i,[n]),gradFunc:(e,t)=>{const[s,a]=t,r=Do(e.shape,[n]);return[xo(_i(e,r),wo(Nr(s,"float32"),ro(a))),xo(_i(e,r),wo(ro(a),Nr(s,"float32")))]}}}));return s(e,t)}(r,i);return Tu(l,o,a)}});const Eu=za({sparseFillEmptyRows_:function(e,t,n,s){const a=Ma(e,"indices","sparseFillEmptyRows","int32"),r=Ma(t,"values","sparseFillEmptyRows"),i=Ma(n,"denseShape","sparseFillEmptyRows","int32"),o=Ma(s,"defaultValue","sparseFillEmptyRows",r.dtype);if(2!==a.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${a.shape}`);if(1!==r.rank)throw new Error(`Values should be Tensor1D but received shape ${r.shape}`);if(1!==i.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${i.shape}`);if(0!==o.rank)throw new Error(`Default value should be a scalar but received shape ${o.shape}`);const l={indices:a,values:r,denseShape:i,defaultValue:o},u=Ca.runKernel(Kn,l);return{outputIndices:u[0],outputValues:u[1],emptyRowIndicator:u[2],reverseIndexMap:u[3]}}}),Au=za({sparseReshape_:function(e,t,n){const s=Ma(e,"inputIndices","sparseReshape","int32"),a=Ma(t,"inputShape","sparseReshape","int32"),r=Ma(n,"newShape","sparseReshape","int32");if(2!==s.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==a.rank)throw new Error(`Input shape should be Tensor1D but received shape ${a.shape}`);if(1!==r.rank)throw new Error(`New shape should be Tensor1D but received shape ${r.shape}`);const i={inputIndices:s,inputShape:a,newShape:r},o=Ca.runKernel(Xn,i);return{outputIndices:o[0],outputShape:o[1]}}}),Ru=za({sparseSegmentMean_:function(e,t,n){const s=Ma(e,"data","sparseSegmentMean"),a=Ma(t,"indices","sparseSegmentMean","int32"),r=Ma(n,"segmentIds","sparseSegmentMean","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${a.shape}`);if(1!==r.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${r.shape}`);const i={data:s,indices:a,segmentIds:r};return Ca.runKernel(Yn,i)}}),Fu=za({sparseSegmentSum_:function(e,t,n){const s=Ma(e,"data","sparseSegmentSum"),a=Ma(t,"indices","sparseSegmentSum","int32"),r=Ma(n,"segmentIds","sparseSegmentSum","int32");if(s.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${a.shape}`);if(1!==r.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${r.shape}`);const i={data:s,indices:a,segmentIds:r};return Ca.runKernel(Zn,i)}}),Du=za({stringNGrams_:function(e,t,n,s,a,r,i,o){const l=Ma(e,"data","stringNGrams","string");if("string"!==l.dtype)throw new Error("Data must be of datatype string");if(1!==l.shape.length)throw new Error(`Data must be a vector, saw: ${l.shape}`);const u=Ma(t,"dataSplits","stringNGrams");if("int32"!==u.dtype)throw new Error("Data splits must be of datatype int32");const c={separator:n,nGramWidths:s,leftPad:a,rightPad:r,padWidth:i,preserveShortSequences:o},h={data:l,dataSplits:u},p=Ca.runKernel(ns,h,c);return{nGrams:p[0],nGramsSplits:p[1]}}}),_u=za({stringSplit_:function(e,t,n=!0){const s=Ma(e,"input","stringSplit","string"),a=Ma(t,"delimiter","stringSplit","string");if(1!==s.rank)throw new Error(`Input should be Tensor1D but received shape ${s.shape}`);if(0!==a.rank)throw new Error(`Delimiter should be a scalar but received shape ${a.shape}`);const r={skipEmpty:n},i={input:s,delimiter:a},o=Ca.runKernel(ss,i,r);return{indices:o[0],values:o[1],shape:o[2]}}}),Ou=za({stringToHashBucketFast_:function(e,t){const n=Ma(e,"input","stringToHashBucketFast","string"),s={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const a={input:n};return Ca.runKernel(as,a,s)}}),Mu={flipLeftRight:ql,grayscaleToRGB:Kl,resizeNearestNeighbor:cu,resizeBilinear:uu,rotateWithOffset:Xl,cropAndResize:jl,nonMaxSuppression:Zl,nonMaxSuppressionAsync:async function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY){const r=Ma(e,"boxes","nonMaxSuppressionAsync"),i=Ma(t,"scores","nonMaxSuppressionAsync"),o=Yl(r,i,n,s,a);n=o.maxOutputSize,s=o.iouThreshold,a=o.scoreThreshold;const l=await Promise.all([r.data(),i.data()]),u=l[0],c=l[1],{selectedIndices:h}=eu(u,c,n,s,a);return r!==e&&r.dispose(),i!==t&&i.dispose(),gl(h,"int32")},nonMaxSuppressionWithScore:ou,nonMaxSuppressionWithScoreAsync:async function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY,r=0){const i=Ma(e,"boxes","nonMaxSuppressionAsync"),o=Ma(t,"scores","nonMaxSuppressionAsync"),l=Yl(i,o,n,s,a,r);n=l.maxOutputSize,s=l.iouThreshold,a=l.scoreThreshold,r=l.softNmsSigma;const u=await Promise.all([i.data(),o.data()]),c=u[0],h=u[1],{selectedIndices:p,selectedScores:d}=nu(c,h,n,s,a,r);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:gl(p,"int32"),selectedScores:gl(d)}},nonMaxSuppressionPadded:lu,nonMaxSuppressionPaddedAsync:async function(e,t,n,s=.5,a=Number.NEGATIVE_INFINITY,r=!1){const i=Ma(e,"boxes","nonMaxSuppressionAsync"),o=Ma(t,"scores","nonMaxSuppressionAsync"),l=Yl(i,o,n,s,a,null),u=l.maxOutputSize,c=l.iouThreshold,h=l.scoreThreshold,[p,d]=await Promise.all([i.data(),o.data()]),{selectedIndices:f,validOutputs:m}=tu(p,d,u,c,h,r);return i!==e&&i.dispose(),o!==t&&o.dispose(),{selectedIndices:gl(f,"int32"),validOutputs:di(m,"int32")}},threshold:mu,transform:gu},Lu={bandPart:yu,gramSchmidt:vu,qr:Nu},zu={sparseFillEmptyRows:Eu,sparseReshape:Au,sparseSegmentMean:Ru,sparseSegmentSum:Fu},Bu={stringNGrams:Du,stringSplit:_u,stringToHashBucketFast:Ou};class Pu extends fi{constructor(e,t,n=null){super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=Ca.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Ca.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:li((()=>kl(s).variable(!1)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:li((()=>kl(s).variable(!1)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const r=this.accumulatedGrads[n].variable,i=this.accumulatedUpdates[n].variable;li((()=>{const e=gi(xo(r,this.rho),xo(zo(a),1-this.rho)),t=xo(no(pl(gi(i,this.epsilon)),pl(gi(r,this.epsilon))),a),n=gi(xo(i,this.rho),xo(zo(t),1-this.rho));r.assign(e),i.assign(n);const o=gi(xo(t,-this.learningRate),s);s.assign(o)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&(ui(this.accumulatedGrads.map((e=>e.variable))),ui(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}Pu.className="Adadelta",ri(Pu);class Wu extends fi{constructor(e,t=.1){super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Ca.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:li((()=>uo(s.shape,this.initialAccumulatorValue).variable(e)))}}const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const r=this.accumulatedGrads[n].variable;li((()=>{const e=gi(r,zo(a));r.assign(e);const t=gi(xo(no(a,pl(gi(e,Ca.backend.epsilon()))),-this.learningRate),s);s.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&ui(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}Wu.className="Adagrad",ri(Wu);class Vu extends fi{constructor(e,t,n,s=null){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],li((()=>{this.accBeta1=di(t).variable(),this.accBeta2=di(n).variable()})),null==s&&(this.epsilon=Ca.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);li((()=>{const n=wo(1,this.accBeta1),s=wo(1,this.accBeta2);t.forEach(((t,a)=>{const r=Ca.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:li((()=>kl(r).variable(!1)))}),null==this.accumulatedSecondMoment[a]&&(this.accumulatedSecondMoment[a]={originalName:`${t}/v`,variable:li((()=>kl(r).variable(!1)))});const i=Array.isArray(e)?e[a].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[a].variable,l=this.accumulatedSecondMoment[a].variable,u=gi(xo(o,this.beta1),xo(i,1-this.beta1)),c=gi(xo(l,this.beta2),xo(zo(i),1-this.beta2)),h=no(u,n),p=no(c,s);o.assign(u),l.assign(c);const d=gi(xo(no(h,gi(pl(p),this.epsilon)),-this.learningRate),r);r.assign(d)})),this.accBeta1.assign(xo(this.accBeta1,this.beta1)),this.accBeta2.assign(xo(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&ui(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&ui(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),li((()=>{this.accBeta1.assign(xu(this.beta1,this.iterations_+1)),this.accBeta2.assign(xu(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}Vu.className="Adam",ri(Vu);class Uu extends fi{constructor(e,t,n,s=null,a=0){super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=s,this.decay=a,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],li((()=>{this.iteration=di(0).variable(),this.accBeta1=di(t).variable()})),null==s&&(this.epsilon=Ca.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);li((()=>{const n=wo(1,this.accBeta1),s=no(-this.learningRate,gi(xo(this.iteration,this.decay),1));t.forEach(((t,a)=>{const r=Ca.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:kl(r).variable(!1)}),null==this.accumulatedWeightedInfNorm[a]&&(this.accumulatedWeightedInfNorm[a]={originalName:`${t}/v`,variable:kl(r).variable(!1)});const i=Array.isArray(e)?e[a].tensor:e[t];if(null==i)return;const o=this.accumulatedFirstMoment[a].variable,l=this.accumulatedWeightedInfNorm[a].variable,u=gi(xo(o,this.beta1),xo(i,1-this.beta1)),c=xo(l,this.beta2),h=mi(i),p=$o(c,h);o.assign(u),l.assign(p);const d=gi(xo(no(s,n),no(u,gi(p,this.epsilon))),r);r.assign(d)})),this.iteration.assign(gi(this.iteration,1)),this.accBeta1.assign(xo(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&ui(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&ui(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}Uu.className="Adamax",ri(Uu);class Gu extends fi{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const a=Ca.registeredVariables[t];li((()=>{const e=gi(xo(this.c,s),a);a.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=ci(di(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}Gu.className="SGD",ri(Gu);class Hu extends Gu{constructor(e,t,n=!1){super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=di(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Ca.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:li((()=>kl(s).variable(e)))}}const a=this.accumulations[n].variable,r=Array.isArray(e)?e[n].tensor:e[t];null!=r&&li((()=>{let e;const t=gi(xo(this.m,a),r);e=this.useNesterov?gi(xo(this.c,gi(r,xo(t,this.m))),s):gi(xo(this.c,t),s),a.assign(t),s.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&ui(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(!1)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}Hu.className="Momentum",ri(Hu);class ju extends fi{constructor(e,t=.9,n=0,s=null,a=!1){if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=s,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,null==s&&(this.epsilon=Ca.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const s=Ca.registeredVariables[t],a=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:li((()=>kl(s).variable(a)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:li((()=>kl(s).variable(a)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:li((()=>kl(s).variable(a)))});const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const i=this.accumulatedMeanSquares[n].variable,o=this.accumulatedMoments[n].variable;li((()=>{const e=gi(xo(i,this.decay),xo(zo(r),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,a=gi(xo(t,this.decay),xo(r,1-this.decay)),l=no(xo(r,this.learningRate),pl(wo(e,gi(zo(a),this.epsilon)))),u=gi(xo(o,this.momentum),l);i.assign(e),t.assign(a),o.assign(u);const c=wo(s,u);s.assign(c)}else{const e=gi(xo(i,this.decay),xo(zo(r),1-this.decay)),t=gi(xo(o,this.momentum),no(xo(r,this.learningRate),pl(gi(e,this.epsilon))));i.assign(e),o.assign(t);const n=wo(s,t);s.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&ui(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&ui(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&ui(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}ju.className="RMSProp",ri(ju);class qu{static sgd(e){return new Gu(e)}static momentum(e,t,n=!1){return new Hu(e,t,n)}static rmsprop(e,t=.9,n=0,s=null,a=!1){return new ju(e,t,n,s,a)}static adam(e=.001,t=.9,n=.999,s=null){return new Vu(e,t,n,s)}static adadelta(e=.001,t=.95,n=null){return new Pu(e,t,n)}static adamax(e=.002,t=.9,n=.999,s=null,a=0){return new Uu(e,t,n,s,a)}static adagrad(e,t=.1){return new Wu(e,t)}}const Ku={sgd:qu.sgd,momentum:qu.momentum,adadelta:qu.adadelta,adagrad:qu.adagrad,rmsprop:qu.rmsprop,adamax:qu.adamax,adam:qu.adam},Xu="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:e=>e();function Yu(){return new Promise((e=>Xu((()=>e()))))}function Zu(e,t){const n=e[0].length;e.forEach(((e,t)=>{R(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),R(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const s=e[0];e.forEach(((e,a)=>{for(let r=0;r<n;r++)R(r===t||e[r]===s[r],(()=>`Error in concat${n}D: Shape of tensors[${a}] (${e}) does not match the shape of the rest (${s}) along the non-concatenated axis ${a}.`))}))}function Ju(e,t){const n=e[0].slice();for(let s=1;s<e.length;s++)n[t]+=e[s][t];return n}const Qu=30;function ec(e){return e<=Qu?e:Q(e,Math.floor(Math.sqrt(e)))}function tc(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}function nc(e,t,n,s=!0){let a=[];if(s)a=a.concat(t.slice(0)),a.push(e[0]/n),a=a.concat(e.slice(1));else{a=a.concat(e[0]);const n=t.length;for(let s=0;s<n;++s)a=a.concat([e[s+1]/t[s],t[s]]);a=a.concat(e.slice(n+1))}return a}function sc(e,t,n=!0){const s=[];if(n){s.push(t);for(let n=t+1;n<e;++n)n<=2*t?(s.push(n),s.push(n-(t+1))):s.push(n)}else{const n=[],a=[];for(let s=1;s<e;++s)s>=2*t+1||s%2==1?a.push(s):n.push(s);s.push(...n),s.push(0),s.push(...a)}return s}function ac(e,t,n,s=!0){const a=[];s?a.push(e[0]/n):a.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?s?a.push(t[n-1]*e[n]):a.push(e[n]/t[n-1]):a.push(e[n]);return a}function rc(e,t){const n=[0];for(let s=0;s<t;++s)n.push(e[s][0]);return n}function ic(e,t,n){const s=e.slice(0,1);for(let a=0;a<n;++a)s.push(e[a+1]-t[a][0]-t[a][1]);return s}function oc(e,t){const n=e.shape.length,s=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(s<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${s}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[s-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[s-1]} vs. ${n}`);if(0===O(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const a=t.shape,r=a[a.length-1];let i=1;for(let e=0;e<a.length-1;++e)i*=a[e];const o=e.shape,l=a.slice();l.pop();let u=1;for(let e=r;e<n;++e)u*=o[e],l.push(o[e]);const c=[...ee(e.shape).map((e=>e/u)),1].slice(0,r);return[l,i,u,c]}function lc(e,t,n){const s=t.rank>1?t.shape[t.rank-1]:1,a=t.rank>1?t.rank-1:1,r=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${s}, and batchDim: ${a}.`;if(n.rank<a)throw new Error(r+` update.rank < ${a}. `);if(e.length<s+(n.rank-a))throw new Error(r+` Output shape length < ${s+(n.rank-a)}`);if(n.rank!==a+e.length-s)throw new Error(r+" update.rank != "+(a+e.length-s));for(let e=0;e<a;++e)if(n.shape[e]!==t.shape[e])throw new Error(r+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-a;++t)if(n.shape[t+a]!==e[t+s])throw new Error(r+` updates.shape[${t+a}] (${n.shape[t+a]}) != shape[${t+a}] (${e[t+a]})`)}function uc(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}lc(n,t,e)}function cc(e,t,n){const s=t.shape.length,a=s>1?t.shape[s-1]:1,r=n.length;let i=1;for(let e=a;e<r;++e)i*=n[e];const o=a<1?1:a;return{sliceRank:a,numUpdates:O(t.shape)/o,sliceSize:i,strides:[...ee(n.slice(0,a)),1],outputSize:O(n)}}const hc=1.7580993408473768,pc=1.0507009873554805,dc=.3275911,fc=.254829592,mc=-.284496736,gc=1.421413741,yc=-1.453152027,bc=1.061405429;function xc(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let s=0;s<n.length;s+=2)n[s]=e[s/2],n[s+1]=t[s/2];return n}function wc(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let s=0;s<e.length;s+=2)t[s/2]=e[s],n[s/2]=e[s+1];return{real:t,imag:n}}function kc(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function vc(e){const t=Math.floor(e.length/4),n=new Float32Array(t),s=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],s[Math.floor(t/4)]=e[t+1];return{real:n,imag:s}}function Ic(e,t){return{real:e[2*t],imag:e[2*t+1]}}function Nc(e,t,n,s){e[2*s]=t,e[2*s+1]=n}function Sc(e,t){const n=new Float32Array(e/2),s=new Float32Array(e/2);for(let a=0;a<Math.ceil(e/2);a++){const r=(t?2:-2)*Math.PI*(a/e);n[a]=Math.cos(r),s[a]=Math.sin(r)}return{real:n,imag:s}}function Tc(e,t,n){const s=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(s),imag:Math.sin(s)}}const $c=/->/g;function Cc(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace($c,"").length)/"->".length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[s,a]=e.split("->");R(-1===s.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const r=s.split(","),i=r.length;if(t!==i)throw new Error(`Expected ${i} input tensors, received ${t}`);if(i>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const o=[];for(let e=0;e<a.length;++e){const t=a[e];if(!r.some((e=>-1!==e.indexOf(t))))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===o.indexOf(t)&&o.push(t)}for(let e=0;e<s.length;++e){const t=s[e];-1===o.indexOf(t)&&","!==t&&o.push(t)}const l=new Array(r.length);for(let e=0;e<i;++e){if(new Set(r[e].split("")).size!==r[e].length)throw new Error(`Found duplicate axes in input component ${r[e]}. Support for duplicate axes in input is not implemented yet.`);l[e]=[];for(let t=0;t<r[e].length;++t)l[e].push(o.indexOf(r[e][t]))}const u=o.length,c=[];for(let e=a.length;e<u;++e)c.push(e);return{allDims:o,summedDims:c,idDims:l}}function Ec(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const s=[];for(let t=0;t<e;++t)-1===n[t]&&s.push(t);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:s}}function Ac(e,t,n){const s=new Array(e);for(let e=0;e<n.length;++e){const a=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===s[t[e][n]]?s[t[e][n]]=a[n]:R(s[t[e][n]]===a[n],(()=>`Expected dimension ${s[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(a)}, but got dimension ${a[n]}`))}}function Rc(e,t){const n=e,s=[];let a=0;0===e.length&&n.push(-1),a=e.length+1;for(let e=0;e<a;++e)s.push([]);const r=[];for(let e=0;e<n.length;++e){const a=Dc(t,n[e]);for(const t of a)-1===r.indexOf(t)&&(s[e].push(t),r.push(t))}return{path:n,steps:s}}function Fc(e){return e.every(((e,t)=>e===t))}function Dc(e,t){const n=[];for(let s=0;s<e.length;++s)0!==e[s].length&&-1===e[s].indexOf(t)&&-1!==t||n.push(s);return n}function _c(e,t,n=0){let s=[];if("number"==typeof t)R(e.shape[n]%t==0,(()=>"Number of splits must evenly divide the axis.")),s=new Array(t).fill(e.shape[n]/t);else{const a=t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0);R(a<=1,(()=>"There should be only one negative value in split array."));const r=t.indexOf(-1);if(-1!==r){const s=t.reduce(((e,t)=>t>0?e+t:e));t[r]=e.shape[n]-s}R(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),s=t}return s}function Oc(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function Mc(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function Lc(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}function zc(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function Bc(e,t){return`size ${e} must be non-negative, not ${t}`}function Pc(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function Wc(e,t){return`Input to reshape is a SparseTensor with ${O(e)}\n  dense values, but the requested shape requires a multiple of ${O(t)}. inputShape=${e} outputShape= ${t}`}function Vc(e,t){return`Input to reshape is a tensor with ${O(e)} dense values, but the requested shape has ${O(t)}. inputShape=${e} outputShape=${t}`}function Uc(){return"segment ids must be >= 0"}function Gc(){return"segment ids are not increasing"}function Hc(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function jc(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function qc(e,t){let n,s=!1;for(e<=Qu?(n=e,s=!0):n=Q(e,Math.floor(Math.sqrt(e)));!s;)n>t||n===e?s=!0:n=Q(e,n+1);return n}function Kc(e,t,n){const s=[],a=e.length;for(let r=0;r<a;r++)r!==t?s.push(e[r]):s.push(n);return s}function Xc(e,t,n,s){const a=t.shape.length,r=e.shape.length;if(0!==s&&(s<-a||s>a))throw new Error(`Expect batchDims in the range of [-${a}, ${a}], but got ${s}`);if(s<0&&(s+=a),s>r)throw new Error(`batchDims (${s}) must be less than rank(x) (\n    ${r}).`);if(n<s)throw new Error(`batchDims (${s}) must be less than or equal to axis (${n}).`);for(let n=0;n<s;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const i=e.shape[n],o=[];let l=1,u=1,c=1;for(let t=0;t<s;++t)o.push(e.shape[t]),l*=e.shape[t];for(let t=s;t<n;t++)o.push(e.shape[t]),u*=e.shape[t];for(let e=s;e<a;e++)o.push(t.shape[e]);for(let t=n+1;t<r;t++)o.push(e.shape[t]),c*=e.shape[t];return{batchSize:l,sliceSize:c,outerSize:u,dimSize:i,outputShape:o}}function Yc(e){try{return e.map((e=>Ys(e)))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function Zc(e){return e.map((e=>Xs(e)))}function Jc(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const s=Ir(e,"int32"),a=Ir([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const r=s.indexToLoc(n[t]),i=t*e.length;a.values.set(r,i)}return a.toTensor()}const Qc={kernelName:ye,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xo(e,Fl(Nr(n,"float32"),-1))}}},eh={kernelName:be,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=zo(Nr(n,"float32")),s=pl(wo(di(1),t));return Po(no(e,s))}}}},th={kernelName:xe,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=pl(wo(zo(Nr(n,"float32")),1));return no(e,t)}}}},nh={kernelName:we,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=Lr(n.shape,s.shape);return{a:()=>{let t=e;const s=Mr(n.shape,a);return s.length>0&&(t=ko(t,s)),_i(t,n.shape)},b:()=>{let t=e;const n=Mr(s.shape,a);return n.length>0&&(t=ko(t,n)),_i(t,s.shape)}}}},sh={kernelName:ke,saveAllInputs:!0,gradFunc:(e,t)=>{const n={};return t.forEach(((t,s)=>{n[s]=()=>e.clone()})),n}},ah={kernelName:Ne,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>kl(n)}}},rh={kernelName:Se,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>kl(n)}}},ih={kernelName:Te,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>no(e,pl(wo(di(1),zo(Nr(n,"float32")))))}}},oh={kernelName:$e,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=pl(gi(di(1),zo(Nr(n,"float32"))));return no(e,t)}}}},lh={kernelName:Ae,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=Lr(n.shape,s.shape);return{a:()=>{const t=gi(zo(n),zo(s));let r=xo(e,no(s,t));const i=Mr(n.shape,a);return i.length>0&&(r=ko(r,i)),_i(r,n.shape)},b:()=>{const t=gi(zo(n),zo(s));let r=Po(xo(e,no(n,t)));const i=Mr(s.shape,a);return i.length>0&&(r=ko(r,i)),_i(r,s.shape)}}}},uh={kernelName:Ce,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>no(e,gi(zo(Nr(n,"float32")),1))}}},ch={kernelName:Ee,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>no(e,wo(di(1),zo(Nr(n,"float32"))))}}},hh=za({avgPool3dGrad_:function(e,t,n,s,a,r){const i=Ma(e,"dy","avgPool3dGrad"),o=Ma(t,"input","avgPool3dGrad");let l=i,u=o,c=!1;4===o.rank&&(c=!0,l=_i(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]]),u=_i(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),R(5===l.rank,(()=>`Error in avgPool3dGrad: dy must be rank 5 but got rank ${l.rank}.`)),R(5===u.rank,(()=>`Error in avgPool3dGrad: input must be rank 5 but got rank ${u.rank}.`)),Di("avgPool3dGrad",a,r);const h={dy:l,input:u},p={filterSize:n,strides:s,pad:a,dimRoundingMode:r},d=Ca.runKernel(_e,h,p);return c?_i(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),ph={kernelName:De,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:a,strides:r,pad:i,dimRoundingMode:o}=n;return{x:()=>hh(e,s,a,r,i,o)}}},dh=za({avgPoolGrad_:function(e,t,n,s,a){const r=Ma(e,"dy","avgPoolGrad"),i=Ma(t,"input","avgPoolGrad");R(i.rank===r.rank,(()=>`Rank of input (${i.rank}) does not match rank of dy (${r.rank})`));let o=i,l=r,u=!1;3===i.rank&&(u=!0,o=_i(i,[1,i.shape[0],i.shape[1],i.shape[2]]),l=_i(r,[1,r.shape[0],r.shape[1],r.shape[2]])),R(4===l.rank,(()=>`Error in avgPoolGrad: dy must be rank 4 but got rank ${l.rank}.`)),R(4===o.rank,(()=>`Error in avgPoolGrad: input must be rank 4 but got rank ${o.rank}.`));const c={dy:l,input:o},h={filterSize:n,strides:s,pad:a},p=Ca.runKernel(Fe,c,h);return u?_i(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),fh={kernelName:Re,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{filterSize:a,strides:r,pad:i}=n;return{x:()=>dh(e,s,a,r,i)}}},mh={kernelName:Oe,inputsToSave:["a","b"],gradFunc:(e,t,n)=>{const[s,a]=t,{transposeA:r,transposeB:i}=n;return r||i?!r&&i?{a:()=>No(e,a,!1,!1),b:()=>No(e,s,!0,!1)}:r&&!i?{a:()=>No(a,e,!1,!0),b:()=>No(s,e,!1,!1)}:{a:()=>No(a,e,!0,!0),b:()=>No(e,s,!0,!0)}:{a:()=>No(e,a,!1,!0),b:()=>No(s,e,!0,!1)}}},gh=za({spaceToBatchND_:function(e,t,n){const s=Ma(e,"x","spaceToBatchND");R(s.rank>=1+t.length,(()=>`input rank ${s.rank} should be > than [blockShape] ${t.length}`)),R(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),R(s.shape.reduce(((e,s,a)=>a>0&&a<=t.length?e&&(s+n[a-1][0]+n[a-1][1])%t[a-1]==0:e),!0),(()=>`input spatial dimensions ${s.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const a={x:s},r={blockShape:t,paddings:n};return Ca.runKernel(Hn,a,r)}}),yh={kernelName:Me,gradFunc:(e,t,n)=>{const{blockShape:s,crops:a}=n;return{x:()=>gh(e,s,a)}}},bh={kernelName:"BroadcastTo",gradFunc:(e,t,n)=>{const s=n,a=s.inputShape,r=s.shape,i=Array.from(r);for(let e=a.length-1;e>=0;e--)if(a[e]===r[e])i[e]=1;else if(1!==a[e])throw new Error(`broadcastTo(): [${a}] cannot be broadcast to [${r}].`);const o=[];for(let e=0;e<i.length;e++)i[e]>1&&o.push(e);return{x:()=>ko(e,o,!0)}}},xh={kernelName:Be,gradFunc:e=>({x:()=>e.clone()})},wh={kernelName:Pe,gradFunc:e=>({x:()=>kl(e)})},kh={kernelName:We,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{clipValueMin:a,clipValueMax:r}=n;return{x:()=>wl(Io(fo(s,a),pu(s,r)),e,kl(e))}}},vh={kernelName:Ue,inputsToSave:["x"],gradFunc:Qc.gradFunc},Ih={kernelName:Ge,saveAllInputs:!0,gradFunc:(e,t,n)=>{const s=t.map((e=>e.shape)),{axis:a}=n,r=V(a,t[0].shape)[0],i=s.map((e=>e[r]));return hl(e,i,r).map((e=>()=>e))}},Nh={kernelName:He,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,a]=t,{dilations:r,strides:i,pad:o,dataFormat:l}=n;return R(Ai(r),(()=>`Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${r}'`)),{x:()=>Xi(s.shape,e,a,i,o,l),filter:()=>Al(s,e,a.shape,i,o,l)}}},Sh={kernelName:qe,inputsToSave:["dy","filter"],gradFunc:(e,t,n)=>{const[s,a]=t,{strides:r,pad:i,dataFormat:o,dimRoundingMode:l}=n;return{dy:()=>qi(e,a,r,i,o,1,l),filter:()=>Al(e,s,a.shape,r,i,o,l)}}},Th=za({conv3DBackpropFilter_:function(e,t,n,s,a){let r=e;4===e.rank&&(r=_i(e,[1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]]));let i=t;4===i.rank&&(i=_i(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]])),R(5===r.rank,(()=>`Error in conv3dDerFilter: input must be rank 5, but got shape ${r.shape}.`)),R(5===i.rank,(()=>`Error in conv3dDerFilter: dy must be rank 5, but got shape ${i.shape}.`)),R(5===n.length,(()=>`Error in conv3dDerFilter: filterShape must be length 5, but got ${n}.`)),R(r.shape[4]===n[3],(()=>`Error in conv3dDerFilter: depth of input ${r.shape[4]}) must match input depth in filter (${n[3]}.`)),R(i.shape[4]===n[4],(()=>`Error in conv3dDerFilter: depth of dy (${i.shape[4]}) must match output depth for filter (${n[4]}).`));const o={x:r,dy:i},l={strides:s,pad:a,filterShape:n};return Ca.runKernel(Xe,o,l)}}),$h={kernelName:Ke,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:a,pad:r}=n;R(Ai(s),(()=>`Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`));const[i,o]=t;return{x:()=>Ji(i.shape,e,o,a,r),filter:()=>Th(i,e,o.shape,a,r)}}},Ch=za({sin_:function(e){const t={x:Ma(e,"x","sin","float32")};return Ca.runKernel(zn,t)}}),Eh={kernelName:Ze,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xo(Po(Ch(Nr(n,"float32"))),e)}}},Ah=za({sinh_:function(e){const t={x:Ma(e,"x","sinh")};return Ca.runKernel(Bn,t)}}),Rh={kernelName:Je,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xo(Ah(Nr(n,"float32")),e)}}},Fh=za({cumsum_:function(e,t=0,n=!1,s=!1){const a={x:Ma(e,"x","cumsum")},r={axis:t,exclusive:n,reverse:s};return Ca.runKernel(et,a,r)}}),Dh={kernelName:et,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:a,exclusive:r,reverse:i}=n;return{x:()=>{const t=Oo([a],s.rank);let n=Fh(e,a,r,!i);return null!=t&&(n=Nl(n,t)),n}}}},_h={kernelName:at,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const{dilations:s,strides:a,pad:r,dimRoundingMode:i}=n,o=null==s?[1,1]:s;R(Ai(o),(()=>`Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '${o}'`));const[l,u]=t;return R(4===l.rank,(()=>`Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank ${l.rank}.`)),R(4===u.rank,(()=>`Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank ${u.rank}.`)),R(l.shape[3]===u.shape[2],(()=>`Error in gradient of depthwiseConv2d: number of input channels (${l.shape[3]}) must match the inChannels dimension in filter ${u.shape[2]}.`)),R(Ri(a,o),(()=>`Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides ${a} and dilations '${o}'.`)),Di("depthwiseConv2d",r,i),{x:()=>Bl(l.shape,e,u,a,r,o,i),filter:()=>zl(l,e,u.shape,a,r,o,i)}}},Oh={kernelName:lt,inputsToSave:["x","filter"],gradFunc:(e,t,n)=>{const[s,a]=t,r={x:s,filter:a,dy:e},i={x:s,filter:a,dy:e};return{x:()=>Ca.runKernel(ut,r,n),filter:()=>Ca.runKernel(ct,i,n)}}},Mh={kernelName:dt,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t,s={dy:e,y:n};return{x:()=>Ca.runKernel(ft,s)}}},Lh={kernelName:mt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=xo(ro(Po(zo(n))),2/Math.sqrt(Math.PI));return{x:()=>xo(e,s)}}},zh={kernelName:yt,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xo(e,n)}}},Bh={kernelName:bt,inputsToSave:["input"],gradFunc:(e,t)=>{const[n]=t;return{input:()=>_i(e,n.shape)}}},Ph={kernelName:xt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xo(e,ro(n))}}},Wh={kernelName:It,gradFunc:e=>({x:()=>kl(e)})},Vh={kernelName:Nt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=Lr(n.shape,s.shape);return{a:()=>{const t=no(e,Nr(s,"float32")),r=Mr(n.shape,a);return r.length>0?_i(ko(t,r),n.shape):t},b:()=>{let t=xo(e,Nr(n,"float32"));const r=Mr(s.shape,a);r.length>0&&(t=_i(ko(t,r),s.shape));const i=zo(s);return Po(no(t,Nr(i,"float32")))}}}},Uh=za({rsqrt_:function(e){const t={x:Ma(e,"x","rsqrt","float32")};return Ca.runKernel(Fn,t)}}),Gh={kernelName:St,inputsToSave:["x","mean","variance","scale"],gradFunc:(e,t,n)=>{const{varianceEpsilon:s}=n,[a,r,i,o]=t,l=null==o?di(1):o,u=Mr(r.shape,a.shape),c=[];if(1===r.rank){for(let e=0;e<a.shape.length-1;++e)c.push(a.shape[e]);c.push(1)}const h=wo(a,r),p=xo(e,l),d=Uh(gi(i,di(s))),f=xo(xo(xo(d,d),d),di(-.5));return{x:()=>1===r.rank?_i(xo(xo(e,oo(_i(d,[1,1,1,r.shape[0]]),c)),l),a.shape):_i(xo(xo(e,d),l),a.shape),mean:()=>{let e=xo(xo(d,di(-1)),p);return 1===r.rank&&(e=ko(e,u)),_i(e,r.shape)},variance:()=>{let e=xo(xo(f,h),p);return 1===r.rank&&(e=ko(e,u)),_i(e,r.shape)},scale:()=>{const t=xo(h,d);let n=xo(e,t);return 1===r.rank&&(n=ko(n,u)),_i(n,r.shape)},offset:()=>{let t=e;return 1===r.rank&&(t=ko(t,u)),_i(t,r.shape)}}}},Hh=za({unsortedSegmentSum_:function(e,t,n){const s=Ma(e,"x","unsortedSegmentSum"),a=Ma(t,"segmentIds","unsortedSegmentSum","int32");R(L(n),(()=>"numSegments must be of dtype int"));const r={x:s,segmentIds:a},i={numSegments:n};return Ca.runKernel(fs,r,i)}}),jh={kernelName:Tt,inputsToSave:["x","indices"],gradFunc:(e,t,n)=>{const[s,a]=t,{axis:r}=n,i=V(r,s.shape)[0];return{x:()=>{const t=s.shape,n=a.size,o=t.slice(0,i),l=o.length,u=t.slice(r,t.length).slice(1),c=u.length,h=qh(0,l),p=qh(l+1,l+1+c),d=Kh([o,[n],u]),f=_i(e,d),m=_i(a,[n]),g=Kh([[l],h,p]),y=Nl(f,g);let b=Hh(y,m,s.shape[i]);const x=Mo(g);return b=Nl(b,x),b},indices:()=>a}}};function qh(e,t){const n=[];for(let s=e;s<t;++s)n.push(s);return n}function Kh(e){const t=[];for(let n=0;n<e.length;++n)for(let s=0;s<e[n].length;++s)t.push(e[n][s]);return t}const Xh={kernelName:Et,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>kl(n),b:()=>kl(s)}}},Yh={kernelName:At,gradFunc:e=>({x:()=>Nr(e,"float32")})},Zh={kernelName:Dt,gradFunc:e=>({x:()=>kl(e)})},Jh={kernelName:_t,gradFunc:e=>({x:()=>kl(e)})},Qh={kernelName:Ot,gradFunc:e=>({x:()=>kl(e)})},ep={kernelName:Mt,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{alpha:a}=n,r=po(s,0);return{x:()=>wl(r,e,xo(e,a))}}},tp={kernelName:Wt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>no(e,gi(n,1))}}},np={kernelName:Pt,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>no(e,Nr(n,"float32"))}}},sp={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{axis:a}=n;return{logits:()=>{const t=ro(s);return wo(e,xo(ko(e,a,!0),t))}}}},ap=za({localResponseNormalizationBackprop_:function(e,t,n,s=5,a=1,r=1,i=.5){const o={x:e,y:t,dy:n},l={depthRadius:s,bias:a,alpha:r,beta:i};return Ca.runKernel(jt,o,l)}}),rp={kernelName:Ht,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,a]=t,{depthRadius:r,bias:i,alpha:o,beta:l}=n;return{x:()=>ap(s,a,e,r,i,o,l)}}};function ip(e,t,n,s){return t.rank<n.rank&&(t=_i(t,Do(t.shape,s))),e.rank<n.rank&&(e=_i(e,Do(e.shape,s))),{x:()=>xo(e,Nr(ao(n,t),e.dtype))}}const op={kernelName:qt,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{reductionIndices:a}=s,r=t[0],i=ip(e,t[1],r,V(a,r.shape));return{x:()=>i.x()}}},lp=za({less_:function(e,t){let n=Ma(e,"a","less","string_or_numeric"),s=Ma(t,"b","less","string_or_numeric");[n,s]=wa(n,s),Lr(n.shape,s.shape);const a={a:n,b:s};return Ca.runKernel(Lt,a)}}),up={kernelName:Kt,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>xo(e,Nr(fo(n,s),"float32")),b:()=>xo(e,Nr(lp(n,s),"float32"))}}},cp=za({maxPool3dGrad_:function(e,t,n,s,a,r,i){const o=Ma(e,"dy","maxPool3dGrad"),l=Ma(t,"input","maxPool3dGrad"),u=Ma(n,"output","maxPool3dGrad");let c=o,h=l,p=u,d=!1;4===l.rank&&(d=!0,c=_i(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]]),h=_i(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]]),p=_i(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),R(5===c.rank,(()=>`Error in maxPool3dGrad: dy must be rank 5 but got rank ${c.rank}.`)),R(5===h.rank,(()=>`Error in maxPool3dGrad: input must be rank 5 but got rank ${h.rank}.`)),R(5===p.rank,(()=>`Error in maxPool3dGrad: output must be rank 5 but got rank ${p.rank}.`)),Di("maxPool3dGrad",r,i);const f={dy:c,input:h,output:p},m={filterSize:s,strides:a,pad:r,dimRoundingMode:i},g=Ca.runKernel(Jt,f,m);return d?_i(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),hp={kernelName:Zt,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,a]=t,{filterSize:r,strides:i,pad:o,dimRoundingMode:l}=n;return{x:()=>cp(e,s,a,r,i,o,l)}}},pp=za({maxPoolGrad_:function(e,t,n,s,a,r,i){const o=Ma(e,"dy","maxPoolGrad"),l=Ma(t,"input","maxPoolGrad"),u=Ma(n,"output","maxPoolGrad");R(l.rank===o.rank,(()=>`Rank of input (${l.rank}) does not match rank of dy (${o.rank})`)),R(4===o.rank,(()=>`Error in maxPoolGrad: dy must be rank 4 but got rank ${o.rank}.`)),R(4===l.rank,(()=>`Error in maxPoolGrad: input must be rank 4 but got rank ${l.rank}.`)),Di("maxPoolGrad",r,i);const c={dy:o,input:l,output:u},h={filterSize:s,strides:a,pad:r,dimRoundingMode:i};return Ca.runKernel(Yt,c,h)}}),dp={kernelName:Xt,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s,a]=t,{filterSize:r,strides:i,pad:o}=n;return{x:()=>pp(e,s,a,r,i,o)}}},fp={kernelName:en,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:a}=n,r=V(a,s.shape),i=O(Fo(s.shape,r)[1]);return{x:()=>{const t=s.shape.slice();r.forEach((e=>{t[e]=1}));const n=_i(e,t);return no(xo(n,Go(s.shape,"float32")),i)}}}},mp={kernelName:tn,inputsToSave:["x"],outputsToSave:[!0],gradFunc:(e,t,n)=>{const s=n,{axis:a}=s,[r,i]=t,o=ip(e,i,r,V(a,r.shape));return{x:()=>o.x()}}},gp={kernelName:nn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t;return{a:()=>xo(e,Nr(pu(n,s),"float32")),b:()=>xo(e,Nr(po(n,s),"float32"))}}},yp={kernelName:sn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:a}=n,r=a.map((e=>e[0]));return{x:()=>al(e,r,s.shape)}}},bp={kernelName:an,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=Lr(n.shape,s.shape);return{a:()=>{const t=Mr(n.shape,a);return t.length>0?_i(ko(e,t),n.shape):e},b:()=>{const t=xo(e,Po(co(no(n,s)))),r=Mr(s.shape,a);return r.length>0?_i(ko(t,r),s.shape):t}}}},xp={kernelName:on,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=Lr(n.shape,s.shape);return{a:()=>{const t=xo(e,Nr(s,"float32")),r=Mr(n.shape,a);return r.length>0?_i(ko(t,r),n.shape):t},b:()=>{const t=xo(e,Nr(n,"float32")),r=Mr(s.shape,a);return r.length>0?_i(ko(t,r),s.shape):t}}}},wp={kernelName:ln,gradFunc:e=>({x:()=>Po(e)})},kp={kernelName:fn,inputsToSave:["indices"],gradFunc:(e,t)=>{const n=t[0];return{indices:()=>Uo(n.shape,"float32")}}},vp={kernelName:dn,gradFunc:e=>({x:()=>kl(e)})},Ip={kernelName:mn,saveAllInputs:!0,gradFunc:(e,t,n)=>{const{axis:s}=n;return bl(e,s).map((e=>()=>e))}},Np={kernelName:gn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const s=t[0],{paddings:a}=n,r=a.map((e=>e[0]));return{x:()=>al(e,r,s.shape)}}},Sp={kernelName:yn,inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:(e,t)=>{const[n,s,a]=t,r=n,i=s,o=Lr(r.shape,i.shape);return{a:()=>{const t=Nr(i,"float32");let n=xo(e,xo(t,xu(r,wo(t,di(1)))));const s=Mr(r.shape,o);return s.length>0&&(n=ko(n,s)),_i(n,r.shape)},b:()=>{const t=po(r,0),n=wl(t,go(r),kl(r));let s=xo(e,xo(a,n));const l=Mr(i.shape,o);return l.length>0&&(s=ko(s,l)),_i(s,i.shape)}}}},Tp={kernelName:bn,inputsToSave:["x","alpha"],gradFunc:(e,t)=>{const[n,s]=t,a=po(n,0);return{x:()=>wl(a,e,xo(e,s)),alpha:()=>{let t=wl(a,kl(e),xo(e,n));const r=Mr(s.shape,e.shape);return r.length>0&&(t=ko(t,r)),_i(t,s.shape)}}}},$p=za({cumprod_:function(e,t=0,n=!1,s=!1){const a={x:Ma(e,"x","cumprod")},r={axis:t,exclusive:n,reverse:s};return Ca.runKernel(Qe,a,r)}});const Cp={kernelName:xn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{axis:a}=n;let r=[];return r=null==a?s.shape.map(((e,t)=>t)):"number"==typeof a?[a]:a,{x:()=>function(e,t,n){const s=e.shape.length,a=s-n.length,r=Oo(n,s);let i=e;null!=r&&(i=Nl(e,r));const o=i.shape.slice(),l=o.splice(s-n.length,n.length).reduce(((e,t)=>e*t),1);o.push(l);let u=function(e,t,n){const s=e.shape.slice();s[n]=1;const a=_i(t,s),r=$p(e,n,!0,!1),i=$p(e,n,!0,!0),o=xo(r,i);return xo(a,o)}(i.reshape(o),t,a);if(u=u.reshape(i.shape),null!=r){const e=Mo(r);u=Nl(u,e)}return u}(s,e,r)}}},Ep={kernelName:ht,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=Lr(n.shape,s.shape);return{a:()=>{const t=no(e,Nr(s,"float32")),r=Mr(n.shape,a);return r.length>0?_i(ko(t,r),n.shape):t},b:()=>{let t=xo(e,Nr(n,"float32"));const r=Mr(s.shape,a);r.length>0&&(t=_i(ko(t,r),s.shape));const i=zo(s);return Po(no(t,Nr(i,"float32")))}}}},Ap={kernelName:vn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>no(e,Po(zo(n)))}}},Rp={kernelName:En,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t,s=xo(pu(n,6),Fl(n));return{x:()=>xo(e,Nr(s,"float32"))}}},Fp={kernelName:In,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xo(e,Nr(Fl(n),"float32"))}}},Dp={kernelName:Nn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>_i(e,n.shape)}}},_p={kernelName:$n,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,a={dy:e,images:s};return{images:()=>Ca.runKernel(Cn,a,n)}}},Op={kernelName:Sn,inputsToSave:["images"],gradFunc:(e,t,n)=>{const[s]=t,a={dy:e,images:s};return{images:()=>Ca.runKernel(Tn,a,n)}}},Mp={kernelName:An,gradFunc:(e,t,n)=>{const{dims:s}=n,a=V(s,e.shape);return{x:()=>el(e,a)}}},Lp={kernelName:Rn,gradFunc:e=>({x:()=>kl(e)})},zp={kernelName:Fn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>Po(no(e,xo(xu(n,1.5),2)))}}},Bp=za({logicalNot_:function(e){const t={x:Ma(e,"x","logicalNot","bool")};return Ca.runKernel(Ut,t)}}),Pp={kernelName:On,inputsToSave:["condition"],gradFunc:(e,t)=>{const[n]=t;return{condition:()=>Nr(kl(n),"float32"),t:()=>xo(e,Nr(n,e.dtype)),e:()=>xo(e,Nr(Bp(n),e.dtype))}}},Wp={kernelName:Mn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>{const t=po(n,di(0)),s=di(hc),a=di(pc),r=xo(e,a),i=xo(xo(e,s),ro(Nr(n,"float32")));return wl(t,r,i)}}}},Vp={kernelName:Wn,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xo(e,xo(n,wo(di(1),n)))}}},Up={kernelName:Pn,gradFunc:e=>({x:()=>kl(e)})},Gp=za({cos_:function(e){const t={x:Ma(e,"x","cos","float32")};return Ca.runKernel(Ze,t)}}),Hp={kernelName:zn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xo(Gp(Nr(n,"float32")),e)}}},jp=za({cosh_:function(e){const t={x:Ma(e,"x","cosh","float32")};return Ca.runKernel(Je,t)}}),qp={kernelName:Bn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xo(jp(Nr(n,"float32")),e)}}},Kp={kernelName:Ln,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{begin:a,size:r}=n,i=s.shape,[o,l]=ei(s,a,r),u=[];for(let t=0;t<e.rank;t++)u.push([o[t],i[t]-o[t]-l[t]]);return{x:()=>jo(e,u)}}},Xp={kernelName:qn,outputsToSave:[!0],gradFunc:(e,t,n)=>{const[s]=t,{dim:a}=n,r=xo(e,s);return{logits:()=>wo(r,xo(ko(r,[a],!0),s))}}},Yp={kernelName:Vn,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xo(e,sl(n))}}},Zp=za({batchToSpaceND_:function(e,t,n){const s=Ma(e,"x","batchToSpaceND"),a=t.reduce(((e,t)=>e*t));R(s.rank>=1+t.length,(()=>`input rank is ${s.rank} but should be > than blockShape.length ${t.length}`)),R(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),R(s.shape[0]%a==0,(()=>`input tensor batch is ${s.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${a}`));const r={x:s},i={blockShape:t,crops:n};return Ca.runKernel(Me,r,i)}}),Jp={kernelName:Hn,gradFunc:(e,t,n)=>{const{blockShape:s,paddings:a}=n;return{x:()=>Zp(e,s,a)}}},Qp={kernelName:jn,gradFunc:(e,t,n)=>{const{axis:s}=n;return{x:()=>Vi(e,s)}}},ed=[Qc,eh,th,nh,sh,ah,rh,ih,oh,lh,uh,ch,ph,fh,mh,yh,bh,xh,wh,kh,vh,Ih,Sh,Nh,$h,Eh,Rh,Dh,_h,Oh,Ep,Mh,Lh,zh,Bh,Ph,Vh,Wh,Gh,jh,Xh,Yh,Zh,Jh,Qh,ep,tp,np,sp,rp,op,op,up,hp,dp,fp,mp,gp,yp,bp,xp,wp,kp,vp,Ip,Np,Np,Sp,Tp,Cp,Ap,Rp,Fp,Dp,_p,Op,Mp,Lp,zp,Pp,Wp,Vp,Up,Hp,qp,Kp,Xp,Yp,Jp,Jp,Qp,Qp,{kernelName:Un,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>no(e,xo(pl(Nr(n,"float32")),2))}}},{kernelName:Qn,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=di(2);return{a:()=>xo(e,xo(a,wo(n,s))),b:()=>xo(e,xo(a,wo(s,n)))}}},{kernelName:es,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xo(e,xo(Nr(n,"float32"),2))}}},{kernelName:gs,gradFunc:e=>({x:()=>kl(e)})},{kernelName:rs,inputsToSave:["a","b"],gradFunc:(e,t)=>{const[n,s]=t,a=Lr(n.shape,s.shape);return{a:()=>{let t=e;const s=Mr(n.shape,a);return s.length>0&&(t=ko(t,s)),_i(t,n.shape)},b:()=>{let t=e;const n=Mr(s.shape,a);return n.length>0&&(t=ko(t,n)),_i(Po(t),s.shape)}}}},{kernelName:Gn,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,a=s.shape.slice(),{axis:r}=n;V(r,s.shape).forEach((e=>{a[e]=1}));const i=_i(e,a),o=xo(i,Go(s.shape,"float32"));return{x:()=>o}}},{kernelName:is,inputsToSave:["x"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>no(e,zo(Gp(n)))}}},{kernelName:os,outputsToSave:[!0],gradFunc:(e,t)=>{const[n]=t;return{x:()=>xo(wo(di(1),zo(n)),e)}}},{kernelName:ls,inputsToSave:["x"],gradFunc:(e,t,n)=>{const[s]=t,{reps:a}=n;return{x:()=>{let t=kl(s);if(1===s.rank)for(let n=0;n<a[0];++n)t=gi(t,al(e,[n*s.shape[0]],[s.shape[0]]));else if(2===s.rank)for(let n=0;n<a[0];++n)for(let r=0;r<a[1];++r)t=gi(t,al(e,[n*s.shape[0],r*s.shape[1]],[s.shape[0],s.shape[1]]));else if(3===s.rank)for(let n=0;n<a[0];++n)for(let r=0;r<a[1];++r)for(let i=0;i<a[2];++i)t=gi(t,al(e,[n*s.shape[0],r*s.shape[1],i*s.shape[2]],[s.shape[0],s.shape[1],s.shape[2]]));else{if(4!==s.rank)throw new Error(`Gradient for tile operation is not implemented for rank-${s.rank} tensors yet.`);for(let n=0;n<a[0];++n)for(let r=0;r<a[1];++r)for(let i=0;i<a[2];++i)for(let o=0;o<a[3];++o)t=gi(t,al(e,[n*s.shape[0],r*s.shape[1],i*s.shape[2],o*s.shape[3]],[s.shape[0],s.shape[1],s.shape[2],s.shape[3]]))}return t}}}},{kernelName:hs,gradFunc:(e,t,n)=>{const s=n,{perm:a}=s,r=Mo(a);return{x:()=>Nl(e,r)}}},{kernelName:ds,gradFunc:(e,t,n)=>{const s=n,{axis:a}=s;return{value:()=>fl(e,a)}}},{kernelName:fs,inputsToSave:["segmentIds"],gradFunc:(e,t)=>{const[n]=t;return{x:()=>function(e,t){const n=$o(t,kl(t)),s=ho(e,n);let a=fo(t,di(0,"int32"));const r=s.rank-a.rank;for(let e=0;e<r;++e)a=io(a,e+1);a=Io(a,Go(s.shape,"bool"));const i=kl(s);return wl(a,s,i)}(e,n)}}},{kernelName:ms,gradFunc:e=>({x:()=>kl(e)})}];for(const e of ed)As(e);ca().prototype.abs=function(){return this.throwIfDisposed(),mi(this)};const td=za({acos_:function(e){const t={x:Ma(e,"x","acos")};return Ca.runKernel(be,t)}});ca().prototype.acos=function(){return this.throwIfDisposed(),td(this)};const nd=za({acosh_:function(e){const t={x:Ma(e,"x","acosh")};return Ca.runKernel(xe,t)}});ca().prototype.acosh=function(){return this.throwIfDisposed(),nd(this)},ca().prototype.add=function(e){return this.throwIfDisposed(),gi(this,e)},ca().prototype.all=function(e,t){return this.throwIfDisposed(),yi(this,e,t)},ca().prototype.any=function(e,t){return this.throwIfDisposed(),bi(this,e,t)},ca().prototype.argMax=function(e){return this.throwIfDisposed(),xi(this,e)};const sd=za({argMin_:function(e,t=0){const n={x:Ma(e,"x","argMin")},s={axis:t};return Ca.runKernel(Se,n,s)}});ca().prototype.argMin=function(e){return this.throwIfDisposed(),sd(this,e)},ca().prototype.asScalar=function(){return this.throwIfDisposed(),R(1===this.size,(()=>"The array must have only 1 element.")),_i(this,[])},ca().prototype.asType=function(e){return this.throwIfDisposed(),Nr(this,e)},ca().prototype.as1D=function(){return this.throwIfDisposed(),_i(this,[this.size])},ca().prototype.as2D=function(e,t){return this.throwIfDisposed(),_i(this,[e,t])},ca().prototype.as3D=function(e,t,n){return this.throwIfDisposed(),_i(this,[e,t,n])},ca().prototype.as4D=function(e,t,n,s){return this.throwIfDisposed(),_i(this,[e,t,n,s])},ca().prototype.as5D=function(e,t,n,s,a){return this.throwIfDisposed(),_i(this,[e,t,n,s,a])};const ad=za({asin_:function(e){const t={x:Ma(e,"x","asin")};return Ca.runKernel(Te,t)}});ca().prototype.asin=function(){return this.throwIfDisposed(),ad(this)};const rd=za({asinh_:function(e){const t={x:Ma(e,"x","asinh")};return Ca.runKernel($e,t)}});ca().prototype.asinh=function(){return this.throwIfDisposed(),rd(this)};const id=za({atan_:function(e){const t={x:Ma(e,"x","atan")};return Ca.runKernel(Ce,t)}});ca().prototype.atan=function(){return this.throwIfDisposed(),id(this)};const od=za({atan2_:function(e,t){let n=Ma(e,"a","atan2"),s=Ma(t,"b","atan2");[n,s]=wa(n,s);const a={a:n,b:s};return Ca.runKernel(Ae,a)}});ca().prototype.atan2=function(e){return this.throwIfDisposed(),od(this,e)};const ld=za({atanh_:function(e){const t={x:Ma(e,"x","atanh")};return Ca.runKernel(Ee,t)}});ca().prototype.atanh=function(){return this.throwIfDisposed(),ld(this)},ca().prototype.avgPool=function(e,t,n,s){return this.throwIfDisposed(),Oi(this,e,t,n,s)},ca().prototype.batchToSpaceND=function(e,t){return this.throwIfDisposed(),Zp(this,e,t)},ca().prototype.batchNorm=function(e,t,n,s,a){return this.throwIfDisposed(),Li(this,e,t,n,s,a)},ca().prototype.broadcastTo=function(e){return this.throwIfDisposed(),xl(this,e)},ca().prototype.cast=function(e){return this.throwIfDisposed(),Nr(this,e)};const ud=za({ceil_:function(e){const t={x:Ma(e,"x","ceil","float32")};return Ca.runKernel(Pe,t)}});ca().prototype.ceil=function(){return this.throwIfDisposed(),ud(this)},ca().prototype.clipByValue=function(e,t){return this.throwIfDisposed(),Wi(this,e,t)},ca().prototype.concat=function(e,t){return this.throwIfDisposed(),e instanceof ua&&(e=[e]),Vi([this,...e],t)},ca().prototype.conv1d=function(e,t,n,s,a,r){return this.throwIfDisposed(),Ki(this,e,t,n,s,a,r)},ca().prototype.conv2dTranspose=function(e,t,n,s,a){return this.throwIfDisposed(),Yi(this,e,t,n,s,a)},ca().prototype.conv2d=function(e,t,n,s,a,r){return this.throwIfDisposed(),qi(this,e,t,n,s,a,r)},ca().prototype.cos=function(){return this.throwIfDisposed(),Gp(this)},ca().prototype.cosh=function(){return this.throwIfDisposed(),jp(this)},ca().prototype.cumprod=function(e,t,n){return this.throwIfDisposed(),$p(this,e,t,n)},ca().prototype.cumsum=function(e,t,n){return this.throwIfDisposed(),Fh(this,e,t,n)};const cd=za({depthToSpace_:function(e,t,n="NHWC"){const s=Ma(e,"x","depthToSpace","float32"),a="NHWC"===n?s.shape[1]:s.shape[2],r="NHWC"===n?s.shape[2]:s.shape[3],i="NHWC"===n?s.shape[3]:s.shape[1];R(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),R(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t}  for depthToSpace with input shape\n    ${s.shape}`)),R(r*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${r} and ${t} for depthToSpace with input shape\n        ${s.shape}`)),R(i%(t*t)==0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${i} for depthToSpace with input shape ${s.shape}`));const o={x:s},l={blockSize:t,dataFormat:n};return Ca.runKernel(st,o,l)}});ca().prototype.depthToSpace=function(e,t){return this.throwIfDisposed(),cd(this,e,t)},ca().prototype.depthwiseConv2d=function(e,t,n,s,a,r){return this.throwIfDisposed(),eo(this,e,t,n,s,a,r)};const hd=za({dilation2d_:function(e,t,n,s,a=[1,1],r="NHWC"){const i=Ma(e,"x","dilation2d"),o=Ma(t,"filter","dilation2d");R(3===i.rank||4===i.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${i.rank}.`)),R(3===o.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${o.rank}.`)),R("NHWC"===r,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${r}`));let l=i,u=!1;3===i.rank&&(l=_i(i,[1,i.shape[0],i.shape[1],i.shape[2]]),u=!0);const c={x:l,filter:o},h={strides:n,pad:s,dilations:a},p=Ca.runKernel(lt,c,h);return u?_i(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});ca().prototype.dilation2d=function(e,t,n,s,a){return this.throwIfDisposed(),hd(this,e,t,n,s,a)};const pd=za({divNoNan_:function(e,t){let n=Ma(e,"a","div"),s=Ma(t,"b","div");[n,s]=wa(n,s);const a=no(n,s),r=kl(a),i=ao(s,r);return wl(i,r,a)}});ca().prototype.divNoNan=function(e){return this.throwIfDisposed(),pd(this,e)},ca().prototype.div=function(e){return this.throwIfDisposed(),no(this,e)};const dd=za({dot_:function(e,t){const n=Ma(e,"t1","dot"),s=Ma(t,"t2","dot");R(!(1!==n.rank&&2!==n.rank||1!==s.rank&&2!==s.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${s.rank}.`));const a=1===n.rank?n.size:n.shape[1],r=1===s.rank?s.size:s.shape[0];if(R(a===r,(()=>`Error in dot: inner dimensions of inputs must match, but got ${a} and ${r}.`)),1===n.rank&&1===s.rank){const e=_i(n,[1,-1]),t=_i(s,[-1,1]),a=No(e,t);return _i(a,[])}if(1===n.rank&&2===s.rank){const e=_i(n,[1,-1]),t=_i(s,[s.shape[0],s.shape[1]]),a=No(e,t);return _i(a,[a.size])}if(2===n.rank&&1===s.rank){const e=_i(s,[-1,1]),t=No(n,e);return _i(t,[t.size])}{const e=_i(s,[s.shape[0],s.shape[1]]);return No(n,e)}}});ca().prototype.dot=function(e){return this.throwIfDisposed(),dd(this,e)},ca().prototype.elu=function(){return this.throwIfDisposed(),so(this)},ca().prototype.equal=function(e){return this.throwIfDisposed(),ao(this,e)};const fd=za({erf_:function(e){let t=Ma(e,"x","erf");R("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=Nr(t,"float32"));const n={x:t};return Ca.runKernel(mt,n)}});ca().prototype.erf=function(){return this.throwIfDisposed(),fd(this)};const md=za({euclideanNorm_:function(e,t=null,n=!1){return ku(e,"euclidean",t,n)}});ca().prototype.euclideanNorm=function(e,t){return this.throwIfDisposed(),md(this,e,t)},ca().prototype.exp=function(){return this.throwIfDisposed(),ro(this)},ca().prototype.expandDims=function(e){return this.throwIfDisposed(),io(this,e)};const gd=za({expm1_:function(e){const t={x:Ma(e,"x","expm1")};return Ca.runKernel(xt,t)}});ca().prototype.expm1=function(){return this.throwIfDisposed(),gd(this)},ca().prototype.fft=function(){return this.throwIfDisposed(),Tl(this)},ca().prototype.flatten=function(){return this.throwIfDisposed(),_i(this,[this.size])},ca().prototype.floor=function(){return this.throwIfDisposed(),co(this)},ca().prototype.floorDiv=function(e){return this.throwIfDisposed(),to(this,e)},ca().prototype.gather=function(e,t){return this.throwIfDisposed(),ho(this,e,t)},ca().prototype.greaterEqual=function(e){return this.throwIfDisposed(),fo(this,e)},ca().prototype.greater=function(e){return this.throwIfDisposed(),po(this,e)},ca().prototype.ifft=function(){return this.throwIfDisposed(),Cl(this)},ca().prototype.irfft=function(){return this.throwIfDisposed(),El(this)};const yd=za({isFinite_:function(e){const t={x:Ma(e,"x","isFinite")};return Ca.runKernel(Dt,t)}});ca().prototype.isFinite=function(){return this.throwIfDisposed(),yd(this)};const bd=za({isInf_:function(e){const t={x:Ma(e,"x","isInf")};return Ca.runKernel(_t,t)}});ca().prototype.isInf=function(){return this.throwIfDisposed(),bd(this)};const xd=za({isNaN_:function(e){const t={x:Ma(e,"x","isNaN")};return Ca.runKernel(Ot,t)}});ca().prototype.isNaN=function(){return this.throwIfDisposed(),xd(this)},ca().prototype.leakyRelu=function(e){return this.throwIfDisposed(),mo(this,e)},ca().prototype.lessEqual=function(e){return this.throwIfDisposed(),pu(this,e)},ca().prototype.less=function(e){return this.throwIfDisposed(),lp(this,e)};const wd=za({localResponseNormalization_:function(e,t=5,n=1,s=1,a=.5){const r=Ma(e,"x","localResponseNormalization");R(4===r.rank||3===r.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${r.rank}.`)),R(L(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let i=r,o=!1;3===r.rank&&(o=!0,i=_i(r,[1,r.shape[0],r.shape[1],r.shape[2]]));const l={x:i},u={depthRadius:t,bias:n,alpha:s,beta:a},c=Ca.runKernel(Ht,l,u);return o?_i(c,[c.shape[1],c.shape[2],c.shape[3]]):c}});ca().prototype.localResponseNormalization=function(e,t,n,s){return this.throwIfDisposed(),wd(this,e,t,n,s)};const kd=za({logSigmoid_:function(e){const t=Ma(e,"x","logSigmoid"),n=pi((e=>({value:Po(cl(Po(e))),gradFunc:t=>xo(t,sl(Po(e)))})));return n(t)}});ca().prototype.logSigmoid=function(){return this.throwIfDisposed(),kd(this)},ca().prototype.logSoftmax=function(e){return this.throwIfDisposed(),vo(this,e)},ca().prototype.logSumExp=function(e,t){return this.throwIfDisposed(),Cu(this,e,t)},ca().prototype.log=function(){return this.throwIfDisposed(),go(this)},ca().prototype.log1p=function(){return this.throwIfDisposed(),yo(this)},ca().prototype.logicalAnd=function(e){return this.throwIfDisposed(),Io(this,e)},ca().prototype.logicalNot=function(){return this.throwIfDisposed(),Bp(this)};const vd=za({logicalOr_:function(e,t){const n=Ma(e,"a","logicalOr","bool"),s=Ma(t,"b","logicalOr","bool");Lr(n.shape,s.shape);const a={a:n,b:s};return Ca.runKernel(Gt,a)}});ca().prototype.logicalOr=function(e){return this.throwIfDisposed(),vd(this,e)};const Id=za({logicalXor_:function(e,t){const n=Ma(e,"a","logicalXor","bool"),s=Ma(t,"b","logicalXor","bool");return Lr(n.shape,s.shape),Io(vd(e,t),Bp(Io(e,t)))}});ca().prototype.logicalXor=function(e){return this.throwIfDisposed(),Id(this,e)},ca().prototype.matMul=function(e,t,n){return this.throwIfDisposed(),No(this,e,t,n)},ca().prototype.maxPool=function(e,t,n,s){return this.throwIfDisposed(),So(this,e,t,n,s)},ca().prototype.max=function(e,t){return this.throwIfDisposed(),bo(this,e,t)},ca().prototype.maximum=function(e){return this.throwIfDisposed(),$o(this,e)},ca().prototype.mean=function(e,t){return this.throwIfDisposed(),Co(this,e,t)},ca().prototype.min=function(e,t){return this.throwIfDisposed(),bu(this,e,t)},ca().prototype.minimum=function(e){return this.throwIfDisposed(),Eo(this,e)};const Nd=za({mirrorPad_:function(e,t,n){R("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const s=Ma(e,"x","mirrorPad");if(0===s.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");R(t.length===s.rank,(()=>`Padding doesn't match input. Must be ${s.rank}. Got ${t.length}.`));const a="reflect"===n?1:0;for(let e=0;e<s.rank;e++)R(2===t[e].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),R(t[e][0]>=0&&t[e][0]<=s.shape[e]-a&&t[e][1]>=0&&t[e][1]<=s.shape[e]-a,(()=>`Padding in dimension ${e} cannot be greater than or equal to ${s.shape[e]-a} or less than 0 for input of shape ${s.shape}`));const r={paddings:t,mode:n},i={x:s};return Ca.runKernel(sn,i,r)}});ca().prototype.mirrorPad=function(e,t){return this.throwIfDisposed(),Nd(this,e,t)};const Sd=za({mod_:function(e,t){let n=Ma(e,"a","mod"),s=Ma(t,"b","mod");[n,s]=wa(n,s);const a={a:n,b:s};return Ca.runKernel(an,a)}});ca().prototype.mod=function(e){return this.throwIfDisposed(),Sd(this,e)},ca().prototype.mul=function(e){return this.throwIfDisposed(),xo(this,e)},ca().prototype.neg=function(){return this.throwIfDisposed(),Po(this)},ca().prototype.norm=function(e,t,n){return this.throwIfDisposed(),ku(this,e,t,n)},ca().prototype.notEqual=function(e){return this.throwIfDisposed(),Wo(this,e)},ca().prototype.oneHot=function(e,t=1,n=0){return this.throwIfDisposed(),Vo(this,e,t,n)},ca().prototype.onesLike=function(){return this.throwIfDisposed(),Ho(this)},ca().prototype.pad=function(e,t){return this.throwIfDisposed(),jo(this,e,t)};const Td=za({pool_:function(e,t,n,s,a,r,i){null==a&&(a=[1,1]),null==r&&(r=1),0===s&&(s="valid");const o=Ma(e,"x","maxPool");let l=o,u=!1;3===o.rank&&(u=!0,l=_i(o,[1,o.shape[0],o.shape[1],o.shape[2]])),R(Ri(r,a),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${r} and dilations '${a}'`));const c=ki(l.shape,t,r,a,s),h=[c.dilationHeight,c.dilationWidth];let p;p="same"===s?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),s=n.map((e=>Math.floor(e/2))),a=n.map(((e,t)=>e-s[t]));return n.map(((e,t)=>[s[t],a[t]]))}([c.filterHeight,c.filterWidth],h):[[0,0],[0,0]];const d=1===h[0]&&1===h[1],[f,m]=function(e,t,n){const s=n.map((e=>e[0])),a=n.map((e=>e[1])),r=e.concat(s,a),i=t.map(((e,t)=>(e-r[t]%e)%e)),o=a.map(((e,t)=>e+i[t]));return[t.map(((e,t)=>[s[t],o[t]])),t.map(((e,t)=>[0,i[t]]))]}([c.inHeight,c.inWidth],h,p),g=d?s:"valid",y=d?l:gh(l,h,f),b=("avg"===n?()=>Oi(y,t,r,g,i):()=>So(y,t,r,g,i))(),x=d?b:Zp(b,h,m);return u?_i(x,[x.shape[1],x.shape[2],x.shape[3]]):x}});ca().prototype.pool=function(e,t,n,s,a,r){return this.throwIfDisposed(),Td(this,e,t,n,s,a,r)},ca().prototype.pow=function(e){return this.throwIfDisposed(),xu(this,e)},ca().prototype.prelu=function(e){return this.throwIfDisposed(),qo(this,e)};const $d=za({prod_:function(e,t=null,n=!1){let s=Ma(e,"x","prod");"bool"===s.dtype&&(s=Nr(s,"int32"));const a={x:s},r={axis:t,keepDims:n};return Ca.runKernel(xn,a,r)}});ca().prototype.prod=function(e,t){return this.throwIfDisposed(),$d(this,e,t)};const Cd=za({reciprocal_:function(e){const t={x:Ma(e,"x","reciprocal")};return Ca.runKernel(vn,t)}});ca().prototype.reciprocal=function(){return this.throwIfDisposed(),Cd(this)},ca().prototype.relu=function(){return this.throwIfDisposed(),Qo(this)},ca().prototype.relu6=function(){return this.throwIfDisposed(),Rl(this)},ca().prototype.reshapeAs=function(e){return this.throwIfDisposed(),_i(this,e.shape)},ca().prototype.reshape=function(e){return this.throwIfDisposed(),_i(this,e)},ca().prototype.resizeBilinear=function(e,t,n){return this.throwIfDisposed(),uu(this,e,t,n)},ca().prototype.resizeNearestNeighbor=function(e,t,n){return this.throwIfDisposed(),cu(this,e,t,n)},ca().prototype.reverse=function(e){return this.throwIfDisposed(),el(this,e)},ca().prototype.rfft=function(){return this.throwIfDisposed(),$l(this)},ca().prototype.round=function(){return this.throwIfDisposed(),du(this)},ca().prototype.rsqrt=function(){return this.throwIfDisposed(),Uh(this)},ca().prototype.selu=function(){return this.throwIfDisposed(),tl(this)},ca().prototype.separableConv2d=function(e,t,n,s,a,r){return this.throwIfDisposed(),nl(this,e,t,n,s,a,r)},ca().prototype.sigmoid=function(){return this.throwIfDisposed(),sl(this)};const Ed=za({sign_:function(e){const t={x:Ma(e,"x","sign")};return Ca.runKernel(Pn,t)}});ca().prototype.sign=function(){return this.throwIfDisposed(),Ed(this)},ca().prototype.sin=function(){return this.throwIfDisposed(),Ch(this)},ca().prototype.sinh=function(){return this.throwIfDisposed(),Ah(this)},ca().prototype.slice=function(e,t){return this.throwIfDisposed(),al(this,e,t)},ca().prototype.softmax=function(e){return this.throwIfDisposed(),ul(this,e)},ca().prototype.softplus=function(){return this.throwIfDisposed(),cl(this)},ca().prototype.spaceToBatchND=function(e,t){return this.throwIfDisposed(),gh(this,e,t)},ca().prototype.split=function(e,t){return this.throwIfDisposed(),hl(this,e,t)},ca().prototype.sqrt=function(){return this.throwIfDisposed(),pl(this)},ca().prototype.square=function(){return this.throwIfDisposed(),zo(this)},ca().prototype.squaredDifference=function(e){return this.throwIfDisposed(),$u(this,e)},ca().prototype.squeeze=function(e){return this.throwIfDisposed(),dl(this,e)},ca().prototype.stack=function(e,t){this.throwIfDisposed();const n=e instanceof ua?[this,e]:[this,...e];return fl(n,t)},ca().prototype.step=function(e){return this.throwIfDisposed(),Fl(this,e)};const Ad=za({stridedSlice_:function(e,t,n,s,a=0,r=0,i=0,o=0,l=0){const u={x:Ma(e,"x","stridedSlice","string_or_numeric")},c={begin:t,end:n,strides:s,beginMask:a,endMask:r,ellipsisMask:i,newAxisMask:o,shrinkAxisMask:l};return Ca.runKernel(ts,u,c)}});ca().prototype.stridedSlice=function(e,t,n,s,a,r,i,o){return this.throwIfDisposed(),Ad(this,e,t,n,s,a,r,i,o)},ca().prototype.sub=function(e){return this.throwIfDisposed(),wo(this,e)},ca().prototype.sum=function(e,t){return this.throwIfDisposed(),ko(this,e,t)};const Rd=za({tan_:function(e){const t={x:Ma(e,"x","tan","float32")};return Ca.runKernel(is,t)}});ca().prototype.tan=function(){return this.throwIfDisposed(),Rd(this)},ca().prototype.tanh=function(){return this.throwIfDisposed(),ml(this)},ca().prototype.tile=function(e){return this.throwIfDisposed(),oo(this,e)},ca().prototype.toBool=function(){return this.throwIfDisposed(),Nr(this,"bool")},ca().prototype.toFloat=function(){return this.throwIfDisposed(),Nr(this,"float32")},ca().prototype.toInt=function(){return this.throwIfDisposed(),Nr(this,"int32")};const Fd=za({topk_:function(e,t=1,n=!0){const s=Ma(e,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const a=s.shape[s.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>a)throw new Error(`'k' passed to topk() must be <= the last dimension (${a}) but got ${t}`);const r={x:s},i={k:t,sorted:n},[o,l]=Ca.runKernel(us,r,i);return{values:o,indices:l}}});ca().prototype.topk=function(e,t){return this.throwIfDisposed(),Fd(this,e,t)},ca().prototype.transpose=function(e){return this.throwIfDisposed(),Nl(this,e)};const Dd=za({unique_:function(e,t=0){const n=Ma(e,"x","unique","string_or_numeric");R(n.rank>0,(()=>"The input tensor must be at least 1D"));const s={x:n},a={axis:t},[r,i]=Ca.runKernel(ps,s,a);return{values:r,indices:i}}});ca().prototype.unique=function(e){return this.throwIfDisposed(),Dd(this,e)},ca().prototype.unsortedSegmentSum=function(e,t){return this.throwIfDisposed(),Hh(this,e,t)},ca().prototype.unstack=function(e){return this.throwIfDisposed(),bl(this,e)},ca().prototype.where=function(e,t){return this.throwIfDisposed(),wl(e,this,t)},ca().prototype.zerosLike=function(){return this.throwIfDisposed(),kl(this)};class _d extends Error{constructor(e){super(e),Object.setPrototypeOf(this,_d.prototype)}}class Od extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Od.prototype)}}class Md extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Md.prototype)}}class Ld extends Error{constructor(e){super(e),Object.setPrototypeOf(this,Ld.prototype)}}class zd extends Error{constructor(e){super(e),Object.setPrototypeOf(this,zd.prototype)}}Error;class Bd{constructor(e){this.maxEntries=e||100,this.cache=new Map}get(e){let t;return this.cache.has(e)&&(t=this.cache.get(e),this.cache.delete(e),this.cache.set(e,t)),t}put(e,t){if(this.cache.has(e))this.cache.delete(e);else if(this.cache.size>=this.maxEntries){const e=this.cache.keys().next().value;this.cache.delete(e)}this.cache.set(e,t)}getMaxEntries(){return this.maxEntries}setMaxEntries(e){if(e<0)throw new Error(`The maxEntries of LRU caches must be at least 0, but got ${e}.`);if(this.maxEntries>e)for(let t=0;t<this.maxEntries-e;t++){const e=this.cache.keys().next().value;this.cache.delete(e)}this.maxEntries=e}}function Pd(e,t){if(Array.isArray(e)){let n=[];for(let s=0;s<t;s++)n=n.concat(e);return n}{const n=new Array(t);return n.fill(e),n}}function Wd(e,t){if(!e)throw new zd(t)}function Vd(e,t){let n=0;for(const s of e)s===t&&n++;return n}function Ud(e){return 1===e.length?e[0]:e}function Gd(e){return Array.isArray(e)?e:[e]}function Hd(e){const t=e.replace(/(.)([A-Z][a-z0-9]+)/g,"$1_$2").replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase();return"_"!==t[0]?t:"private"+t}function jd(e){return e.length<=1||-1===e.indexOf("_")?e:e.replace(/[_]+(\w|$)/g,((e,t)=>t.toUpperCase()))}let qd={};function Kd(e){if(null==e)return null;const t={};return t.className=e.getClassName(),t.config=e.getConfig(),t}function Xd(e){if(null!=e&&"object"==typeof e)if(Array.isArray(e))e.forEach((e=>Xd(e)));else{const t=Object.keys(e);for(const n of t){const t=e[n];null!=t&&"object"==typeof t&&(Array.isArray(t)||"ndarray"!==t.type||"number"!=typeof t.value?Xd(t):e[n]=t.value)}}}function Yd(e,t={},n={},s="object",a=!1){if("string"==typeof e){const a=e;let r;if(a in n)r=n[a];else if(a in qd)r=qd[a];else if(r=t[a],null==r)throw new Md(`Unknown ${s}: ${e}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);return r}{const r=e;if(null==r.className||null==r.config)throw new Md(`${s}: Improper config format: ${JSON.stringify(r)}.\n'className' and 'config' must set.`);const i=r.className;let o,l;if(i in n?[o,l]=n[i]:i in qd?[o,l]=qd.className:i in t&&([o,l]=t[i]),null==o)throw new Md(`Unknown ${s}: ${i}. This may be due to one of the following reasons:\n1. The ${s} is defined in Python, in which case it needs to be ported to TensorFlow.js or your JavaScript code.\n2. The custom ${s} is defined in JavaScript, but is not registered properly with tf.serialization.registerClass().`);if(null!=l){const e={};for(const t of Object.keys(qd))e[t]=qd[t];for(const t of Object.keys(n))e[t]=n[t];r.config.customObjects=e;const t=Object.assign({},qd);for(const e of Object.keys(n))qd[e]=n[e];Xd(r.config);const s=l(o,r.config,n,a);return qd=Object.assign({},t),s}{const e=Object.assign({},qd);for(const e of Object.keys(n))qd[e]=n[e];const t=new o(r.config);return qd=Object.assign({},e),t}}}function Zd(e,t){return-1*function(e,t){return e<t?-1:e>t?1:0}(e,t)}function Jd(e){if(null==e)return e;const t=[];for(const n of e)-1===t.indexOf(n)&&t.push(n);return t}function Qd(e){if(null==e)throw new Md(`Invalid value in obj: ${JSON.stringify(e)}`);for(const t in e)if(e.hasOwnProperty(t))return!1;return!0}function ef(e,t,n){if(null!=n&&e.indexOf(n)<0)throw new Md(`${n} is not a valid ${t}.  Valid values are ${e} or null/undefined.`)}function tf(e,t,n=0,s=1/0){return Wd(n>=0),Wd(s>=n),Array.isArray(e)&&e.length>=n&&e.length<=s&&e.every((e=>typeof e===t))}function nf(e,t){Array.isArray(e)?(R(e.length>0,(()=>`${t} is unexpectedly an empty array.`)),e.forEach(((e,n)=>nf(e,`element ${n+1} of ${t}`)))):R(Number.isInteger(e)&&e>0,(()=>`Expected ${t} to be a positive integer, but got ${sf(e)}.`))}function sf(e){return null===e?"null":Array.isArray(e)?"["+e.map((e=>sf(e))).join(",")+"]":"string"==typeof e?`"${e}"`:`${e}`}function af(e){return"relu"===e?"relu":"linear"===e?"linear":"elu"===e?"elu":null}let rf=0;function of(){return rf++}const lf={};function uf(e=""){return e in lf||(lf[e]=0),lf[e]+=1,e+lf[e].toString()}const cf=["channelsFirst","channelsLast"],hf=["nearest","bilinear"],pf=["valid","same","causal"],df=["max","avg"],ff=["sum","mul","concat","ave"],mf=new Map;function gf(e){ef(cf,"DataFormat",e)}function yf(e){ef(pf,"PaddingMode",e)}function bf(e){ef(df,"PoolMode",e)}const xf=[];function wf(e,t){xf.push(e);try{const e=t();return xf.pop(),e}catch(e){throw xf.pop(),e}}function kf(e){if(!Nf(e))throw new Error("Not a valid tensor name: '"+e+"'");return(0===xf.length?"":xf.join("/")+"/")+e}function vf(e){if(!Nf(e))throw new Error("Not a valid tensor name: '"+e+"'");mf.has(e)||mf.set(e,0);const t=mf.get(e);if(mf.set(e,mf.get(e)+1),t>0){const n=`${e}_${t}`;return mf.set(n,1),n}return e}const If=new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\._\/]*$/);function Nf(e){return!!e.match(If)}function Sf(e,t,n){null==t&&(t=0),null==n&&(n=e.length);let s=1;for(let a=t;a<n;++a)s*=e[a];return s}function Tf(e){if(0===e.length)return Number.NaN;let t=Number.POSITIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s<t&&(t=s)}return t}function $f(e){if(0===e.length)return Number.NaN;let t=Number.NEGATIVE_INFINITY;for(let n=0;n<e.length;n++){const s=e[n];s>t&&(t=s)}return t}function Cf(e,t){if(t<e)throw new Md(`end (${t}) < begin (${e}) is forbidden.`);const n=[];for(let s=e;s<t;++s)n.push(s);return n}let Ef;function Af(){return null==Ef&&(Ef=Ca.backend.epsilon()),Ef}function Rf(e,t){return Nr(e,t)}function Ff(e,t=-1){const n=e.shape.slice();return t<0&&(t=n.length+t+1),n.splice(t,0,1),_i(e,n)}function Df(e,t,n){return li((()=>{switch(e.rank){case 1:return rl(e,t,n);case 2:return il(e,[t,0],[n,e.shape[1]]);case 3:return ol(e,[t,0,0],[n,e.shape[1],e.shape[2]]);case 4:return ll(e,[t,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3]]);case 5:return al(e,[t,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4]]);case 6:return al(e,[t,0,0,0,0,0],[n,e.shape[1],e.shape[2],e.shape[3],e.shape[4],e.shape[5]]);default:throw new Md(`sliceAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function _f(e,t,n){return li((()=>{switch(e.rank){case 1:return rl(e,t,n);case 2:return il(e,[0,t],[e.shape[0],n]);case 3:return ol(e,[0,0,t],[e.shape[0],e.shape[1],n]);case 4:return ll(e,[0,0,0,t],[e.shape[0],e.shape[1],e.shape[2],n]);default:throw new Md(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Of(e,t,n,s){return li((()=>{switch(e.rank){case 1:return rl(e,t,n);case 2:switch(s){case 1:return Df(e,t,n);case 2:return _f(e,t,n);default:throw new Md(`The axis is not within the rank of the tensor ${s}`)}case 3:switch(s){case 1:return Df(e,t,n);case 2:return ol(e,[0,t,0],[e.shape[0],n,e.shape[2]]);case 3:return _f(e,t,n);default:throw new Md(`The axis is not within the rank of the tensor ${s}`)}case 4:switch(s){case 1:return Df(e,t,n);case 2:return ll(e,[0,t,0,0],[e.shape[0],n,e.shape[2],e.shape[3]]);case 3:return ll(e,[0,0,t,0],[e.shape[0],e.shape[1],n,e.shape[3]]);case 4:return _f(e,t,n);default:throw new Md(`The axis is not within the rank of the tensor ${s}`)}default:throw new Md(`sliceAlongLastAxis() received an unsupported tensor rank: ${e.rank}`)}}))}function Mf(e,t=-1){let n;return t<0&&(n=e[0].rank,t=0!==n?n:0),t===e[0].rank&&(t=-1),Vi(e,t)}function Lf(e,t){switch(e.rank){case 1:return Ui([e,t]);case 2:return Gi([e,t],0);case 3:return Hi([e,t],0);case 4:return ji([e,t],0);default:throw new Md(`concatAlongFirstAxis() received an unsupported tensor rank: ${e.rank}`)}}function zf(e,t){if(Array.isArray(t)||(t=[t]),e.rank!==t.length)throw new Md(`The length of input n (${t.length}) does not match the number of dimensions in input x (${e.rank})`);return oo(e,t)}function Bf(e,t=0,n=1,s,a){return Zo(e,t,n,s,a)}function Pf(e,t,n,s){if(e.rank<2||t.rank<2)throw new Ld(`dot requires both inputs to be rank >= 2 but got x shape = ${e.shape} and y shape = ${t.shape}`);if(t.rank>=3&&e.shape.slice(-1)[0]!==t.shape.slice(-2)[0])throw new Ld(`If rank y >= 3, then the second last dim of y must equal the last dim of x but got x shape = ${e.shape} and  y shape = ${t.shape}`);if(2===e.rank&&2===t.rank)return Wl({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?Uf(e.rank,s,"channelsLast"):null,activation:n});{const a=e.shape.slice(),r=a.pop();e=_i(e,[-1,r]);const i=t.shape.slice(),o=i.pop(),l=i.pop(),u=[...i,o],c=Array.from({length:t.rank},((e,n)=>0===n?t.rank-2:n<=t.rank-2?n-1:n));t=_i(Nl(t,c),[l,-1]);const h=[...a,...u];return _i(Wl({a:e,b:t,transposeA:!1,transposeB:!1,bias:s?Uf(e.rank,s,"channelsLast"):null,activation:n}),h)}}function Wf(e,t,n){return li((()=>(t=Array.isArray(t)?gl(t,"int32"):Nr(t,"int32"),ho(e,t,n))))}function Vf(e){return xo(e,e)}function Uf(e,t,n){const s=t.shape;if(1!==t.rank&&t.rank!==e)throw new Md(`Unexpected bias dimensions: ${t.rank}; expected it to be 1 or ${e}`);if(5===e){if("channelsFirst"===n)return 1===s.length?_i(t,[1,s[0],1,1,1]):_i(t,[1,s[3],s[0],s[1],s[2]]);if("channelsLast"===n)return 1===s.length?_i(t,[1,1,1,1,s[0]]):_i(t,[1].concat(s))}else if(4===e){if("channelsFirst"===n)return 1===s.length?_i(t,[1,s[0],1,1]):_i(t,[1,s[2],s[0],s[1]]);if("channelsLast"===n)return 1===s.length?_i(t,[1,1,1,s[0]]):_i(t,[1].concat(s))}else if(3===e){if("channelsFirst"===n)return 1===s.length?_i(t,[1,s[0],1]):_i(t,[1,s[1],s[0]]);if("channelsLast"===n)return 1===s.length?_i(t,[1,1,s[0]]):_i(t,[1].concat(s))}else if(e<3)return t;throw new Md(`Unsupported input rank by biasAdd: ${t.rank}`)}function Gf(e,t,n){return li((()=>(null==n&&(n="channelsLast"),gf(n),gi(e,Uf(e.rank,t,n)))))}function Hf(e,t,n,s){return li((()=>Sl(e,t,n,s)))}function jf(e,t,n=!1){return n?e():t()}const qf=["fanIn","fanOut","fanAvg"],Kf=["normal","uniform","truncatedNormal"];class Xf extends si{fromConfigUsesCustomObjects(){return!1}getConfig(){return{}}}class Yf extends Xf{apply(e,t){return Uo(e,t)}}Yf.className="Zeros",ri(Yf);class Zf extends Xf{apply(e,t){return Go(e,t)}}Zf.className="Ones",ri(Zf);class Jf extends Xf{constructor(e){if(super(),"object"!=typeof e)throw new Md(`Expected argument of type ConstantConfig but got ${e}`);if(void 0===e.value)throw new Md(`config must have value set but got ${e}`);this.value=e.value}apply(e,t){return li((()=>xo(di(this.value),Go(e,t))))}getConfig(){return{value:this.value}}}Jf.className="Constant",ri(Jf);class Qf extends Xf{constructor(e){super(),this.DEFAULT_MINVAL=-.05,this.DEFAULT_MAXVAL=.05,this.minval=e.minval||this.DEFAULT_MINVAL,this.maxval=e.maxval||this.DEFAULT_MAXVAL,this.seed=e.seed}apply(e,t){return Jo(e,this.minval,this.maxval,t)}getConfig(){return{minval:this.minval,maxval:this.maxval,seed:this.seed}}}Qf.className="RandomUniform",ri(Qf);class em extends Xf{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Ld(`randomNormal does not support dType ${t}.`);return Bf(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}em.className="RandomNormal",ri(em);class tm extends Xf{constructor(e){super(),this.DEFAULT_MEAN=0,this.DEFAULT_STDDEV=.05,this.mean=e.mean||this.DEFAULT_MEAN,this.stddev=e.stddev||this.DEFAULT_STDDEV,this.seed=e.seed}apply(e,t){if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Ld(`truncatedNormal does not support dType ${t}.`);return yl(e,this.mean,this.stddev,t,this.seed)}getConfig(){return{mean:this.mean,stddev:this.stddev,seed:this.seed}}}tm.className="TruncatedNormal",ri(tm);class nm extends Xf{constructor(e){super(),this.gain=null!=e.gain?e.gain:1}apply(e,t){return li((()=>{if(2!==e.length||e[0]!==e[1])throw new Md("Identity matrix initializer can only be used for 2D square matrices.");return xo(this.gain,lo(e[0]))}))}getConfig(){return{gain:this.gain}}}nm.className="Identity",ri(nm);class sm extends Xf{constructor(e){if(super(),e.scale<0)throw new Md(`scale must be a positive float. Got: ${e.scale}`);var t;this.scale=null==e.scale?1:e.scale,this.mode=null==e.mode?"fanIn":e.mode,t=this.mode,ef(qf,"FanMode",t),this.distribution=null==e.distribution?"normal":e.distribution,function(e){ef(Kf,"Distribution",e)}(this.distribution),this.seed=e.seed}apply(e,t){const n=function(e,t="channelsLast"){let n,s;if(gf(t),2===e.length)n=e[0],s=e[1];else if(-1!==[3,4,5].indexOf(e.length)){if("channelsFirst"===t){const t=Sf(e,2);n=e[1]*t,s=e[0]*t}else if("channelsLast"===t){const t=Sf(e,0,e.length-2);n=e[e.length-2]*t,s=e[e.length-1]*t}}else{const t=Sf(e);n=Math.sqrt(t),s=Math.sqrt(t)}return[n,s]}(e),s=n[0],a=n[1];let r=this.scale;if("fanIn"===this.mode?r/=Math.max(1,s):"fanOut"===this.mode?r/=Math.max(1,a):r/=Math.max(1,(s+a)/2),"normal"===this.distribution){const n=Math.sqrt(r);if("float32"!==(t=t||"float32")&&"int32"!==t)throw new Ld(`${this.getClassName()} does not support dType ${t}.`);return yl(e,0,n,t,this.seed)}{const n=Math.sqrt(3*r);return Jo(e,-n,n,t)}}getConfig(){return{scale:this.scale,mode:this.mode,distribution:this.distribution,seed:this.seed}}}sm.className="VarianceScaling",ri(sm);class am extends sm{constructor(e){super({scale:1,mode:"fanAvg",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return sm.className}}am.className="GlorotUniform",ri(am);class rm extends sm{constructor(e){super({scale:1,mode:"fanAvg",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return sm.className}}rm.className="GlorotNormal",ri(rm);class im extends sm{constructor(e){super({scale:2,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return sm.className}}im.className="HeNormal",ri(im);class om extends sm{constructor(e){super({scale:2,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return sm.className}}om.className="HeUniform",ri(om);class lm extends sm{constructor(e){super({scale:1,mode:"fanIn",distribution:"normal",seed:null==e?null:e.seed})}getClassName(){return sm.className}}lm.className="LeCunNormal",ri(lm);class um extends sm{constructor(e){super({scale:1,mode:"fanIn",distribution:"uniform",seed:null==e?null:e.seed})}getClassName(){return sm.className}}um.className="LeCunNormal",ri(um);class cm extends Xf{constructor(e){if(super(),this.DEFAULT_GAIN=1,this.gain=null==e.gain?this.DEFAULT_GAIN:e.gain,this.seed=e.seed,null!=this.seed)throw new Ld("Random seed is not implemented for Orthogonal Initializer yet.")}apply(e,t){return li((()=>{if(e.length<2)throw new Ld("Shape must be at least 2D.");e[0]*e[1]>2e3&&console.warn(`Orthogonal initializer is being called on a matrix with more than 2000 (${e[0]*e[1]}) elements: Slowness may result.`);const t=Bf(e[0]>e[1]?[e[1],e[0]]:e,0,1,"float32");let n=Lu.gramSchmidt(t);return e[0]>e[1]&&(n=Nl(n)),xo(this.gain,n)}))}getConfig(){return{gain:this.gain,seed:this.seed}}}cm.className="Orthogonal",ri(cm);const hm={constant:"Constant",glorotNormal:"GlorotNormal",glorotUniform:"GlorotUniform",heNormal:"HeNormal",heUniform:"HeUniform",identity:"Identity",leCunNormal:"LeCunNormal",leCunUniform:"LeCunUniform",ones:"Ones",orthogonal:"Orthogonal",randomNormal:"RandomNormal",randomUniform:"RandomUniform",truncatedNormal:"TruncatedNormal",varianceScaling:"VarianceScaling",zeros:"Zeros"};function pm(e,t={}){return Yd(e,ai.getMap().classNameMap,t,"initializer")}function dm(e){return Kd(e)}function fm(e){if("string"==typeof e){const t=e in hm?hm[e]:e;if("GlorotNormal"===t)return new rm;if("GlorotUniform"===t)return new am;if("HeNormal"===t)return new im;if("HeUniform"===t)return new om;if("LeCunNormal"===t)return new lm;if("LeCunUniform"===t)return new um;{const e={};return e.className=t,e.config={},pm(e)}}return e instanceof Xf?e:pm(e)}function mm(e){return Array.isArray(e)&&Array.isArray(e[0])}function gm(e){return 0===e.length?[]:Array.isArray(e[0])?e:[e]}function ym(e){let t;if(Array.isArray(e)){if(1!==e.length)throw new Md(`Expected Tensor length to be 1; got ${e.length}`);t=e[0]}else t=e;return t}function bm(e){if(Array.isArray(e)&&Array.isArray(e[0])){if(1===e.length)return e[0];throw new Md(`Expected exactly 1 Shape; got ${e.length}`)}return e}function xm(e){let t=0;for(const n of e)0===n.shape.length?t+=1:t+=n.shape.reduce(((e,t)=>e*t));return t}class wm{constructor(e,t="float32",n="Variable",s=!0,a=null){this.dtype=null==t?"float32":t,this.shape=e.shape,this.id=of(),n=null==n?"Variable":n,this.originalName=kf(n),this.name=vf(this.originalName),this.trainable_=s,this.constraint=a,this.val=function(e,t=!0,n,s){return Ca.makeVariable(e,t,n,s)}(e,this.trainable_,this.name,this.dtype)}read(){return this.assertNotDisposed(),this.val}write(e){return this.assertNotDisposed(),function(e,t){if(e.shape.toString()!==t.shape.toString())throw new Error("Shape mismatch: "+JSON.stringify(e.shape)+" vs. "+JSON.stringify(t.shape))}(this.val,e),this.val.id!==e.id&&(this.val.assign(e),null!=this.constraint&&this.val.assign(this.constraint.apply(this.val))),this}dispose(){this.assertNotDisposed(),this.val.dispose()}assertNotDisposed(){if(this.val.isDisposed)throw new Error(`LayersVariable ${this.name} is already disposed.`)}get trainable(){return this.trainable_}set trainable(e){this.trainable_=e,this.val.trainable=e}}function km(e){return e.map((e=>e.read()))}function vm(e){e.forEach((e=>{e[0].write(e[1])}))}class Im{constructor(e){this.dtype=e.dtype,this.shape=e.shape,null!=e.shape?this.ndim=e.shape.length:this.ndim=e.ndim,this.maxNDim=e.maxNDim,this.minNDim=e.minNDim,this.axes=e.axes||{}}}class Nm{constructor(e,t,n,s,a,r,i){this.dtype=e,this.shape=t,this.sourceLayer=n,this.inputs=s,this.callArgs=a,this.outputTensorIndex=i,this.id=of(),null!=r&&(this.originalName=kf(r),this.name=vf(this.originalName)),this.rank=t.length}}let Sm=0;class Tm{constructor(e,t){this.callArgs=t,this.id=Sm++,this.outboundLayer=e.outboundLayer,this.inboundLayers=e.inboundLayers,this.nodeIndices=e.nodeIndices,this.tensorIndices=e.tensorIndices,this.inputTensors=e.inputTensors,this.outputTensors=e.outputTensors,this.inputMasks=e.inputMasks,this.outputMasks=e.outputMasks,this.inputShapes=e.inputShapes,this.outputShapes=e.outputShapes;for(const t of e.inboundLayers)null!=t&&t.outboundNodes.push(this);e.outboundLayer.inboundNodes.push(this)}getConfig(){const e=[];for(const t of this.inboundLayers)null!=t?e.push(t.name):e.push(null);return{outboundLayer:this.outboundLayer?this.outboundLayer.name:null,inboundLayers:e,nodeIndices:this.nodeIndices,tensorIndices:this.tensorIndices}}}let $m=0;class Cm extends si{constructor(e={}){super(),this._callHook=null,this._addedWeightNames=[],this._stateful=!1,this.id=$m++,this.activityRegularizer=null,this.inputSpec=null,this.supportsMasking=!1,this._trainableWeights=[],this._nonTrainableWeights=[],this._losses=[],this._updates=[],this._built=!1,this.inboundNodes=[],this.outboundNodes=[];let t=e.name;if(!t){const e=this.getClassName();t=Hd(e)+"_"+uf(e)}if(this.name=t,this.trainable_=null==e.trainable||e.trainable,null!=e.inputShape||null!=e.batchInputShape){let t;if(null!=e.batchInputShape)t=e.batchInputShape;else if(null!=e.inputShape){let n=null;null!=e.batchSize&&(n=e.batchSize),t=[n].concat(e.inputShape)}this.batchInputShape=t;let n=e.dtype;null==n&&(n=e.inputDType),null==n&&(n="float32"),this.dtype=n}null!=e.weights?this.initialWeights=e.weights:this.initialWeights=null,this._refCount=null,this.fastWeightInitDuringBuild=!1}static nodeKey(e,t){return e.name+"_ib-"+t.toString()}getNodeAtIndex(e,t){if(0===this.inboundNodes.length)throw new Od(`The layer has never been called and thus has no defined ${t}.`);if(this.inboundNodes.length<=e)throw new Md(`Asked to get ${t} at node ${e}, but the layer has only ${this.inboundNodes.length} inbound nodes.`);return this.inboundNodes[e]}getInputAt(e){return Ud(this.getNodeAtIndex(e,"input").inputTensors)}getOutputAt(e){return Ud(this.getNodeAtIndex(e,"output").outputTensors)}get input(){if(this.inboundNodes.length>1)throw new _d(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer input" is ill-defined. Use \`getInputAt(nodeIndex)\` instead.`);if(0===this.inboundNodes.length)throw new _d(`Layer ${this.name} is not connected, no input to return.`);return Ud(this.getNodeAtIndex(0,"input").inputTensors)}get output(){if(0===this.inboundNodes.length)throw new _d(`Layer ${this.name} has no inbound nodes.`);if(this.inboundNodes.length>1)throw new _d(`Layer ${this.name} has multiple inbound nodes, hence the notion of "layer output" is ill-defined. Use \`getOutputAt(nodeIndex)\` instead.`);return Ud(this.getNodeAtIndex(0,"output").outputTensors)}get losses(){return this._losses}calculateLosses(){return this.losses.map((e=>e()))}get updates(){return this._updates}get built(){return this._built}set built(e){this._built=e}get trainable(){return this.trainable_}set trainable(e){this._trainableWeights.forEach((t=>t.trainable=e)),this.trainable_=e}get trainableWeights(){return this.trainable_?this._trainableWeights.filter((e=>e.trainable)):[]}set trainableWeights(e){this._trainableWeights=e}get nonTrainableWeights(){return this.trainable?this._trainableWeights.filter((e=>!e.trainable)).concat(this._nonTrainableWeights):this._trainableWeights.concat(this._nonTrainableWeights)}set nonTrainableWeights(e){this._nonTrainableWeights=e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}get stateful(){return this._stateful}resetStates(){if(!this.stateful)throw new Error("Cannot call the resetStates() method of a non-stateful Layer object.")}assertInputCompatibility(e){if(e=Gd(e),null==this.inputSpec||0===this.inputSpec.length)return;const t=Gd(this.inputSpec);if(e.length!==t.length)throw new Md(`Layer ${this.name} expects ${t.length} inputs, but it received ${e.length} input tensors. Input received: ${e}`);for(let n=0;n<e.length;n++){const s=e[n],a=t[n];if(null==a)continue;const r=s.rank;if(null!=a.ndim&&r!==a.ndim)throw new Md(`Input ${n} is incompatible with layer ${this.name}: expected ndim=${a.ndim}, found ndim=${r}`);if(null!=a.maxNDim&&r>a.maxNDim)throw new Md(`Input ${n} is incompatible with layer ${this.name}: expected max_ndim=${a.maxNDim}, found ndim=${r}`);if(null!=a.minNDim&&r<a.minNDim)throw new Md(`Input ${n} is incompatible with layer ${this.name}: expected min_ndim=${a.minNDim}, found ndim=${r}.`);if(null!=a.dtype&&s.dtype!==a.dtype)throw new Md(`Input ${n} is incompatible with layer ${this.name} : expected dtype=${a.dtype}, found dtype=${s.dtype}.`);if(a.axes){const e=s.shape;for(const t in a.axes){const s=Number(t),r=a.axes[t],i=s>=0?e[s]:e[e.length+s];if(null!=r&&-1===[r,null].indexOf(i))throw new Md(`Input ${n} is incompatible with layer ${this.name}: expected axis ${s} of input shape to have value ${r} but got shape ${e}.`)}}if(null!=a.shape)for(let e=0;e<a.shape.length;++e){const t=a.shape[e],r=s.shape[e];if(null!=t&&null!=r&&t!==r)throw new Md(`Input ${n} is incompatible with layer ${this.name}: expected shape=${a.shape}, found shape=${s.shape}.`)}}}call(e,t){return e}invokeCallHook(e,t){null!=this._callHook&&this._callHook(e,t)}setCallHook(e){this._callHook=e}clearCallHook(){this._callHook=null}apply(e,t){t=t||{},this.assertNotDisposed();const n=Gd(e);let s=!0;for(const e of n)if(!(e instanceof Nm)){s=!1;break}let a=!0;for(const e of n)if(e instanceof Nm){a=!1;break}if(s===a)throw new Md("Arguments to apply() must be all SymbolicTensors or all Tensors");return wf(this.name,(()=>{if(!this.built){this.assertInputCompatibility(e);const t=[];for(const n of Gd(e))t.push(n.shape);this.build(Ud(t)),this.built=!0,this.initialWeights&&this.setWeights(this.initialWeights),null===this._refCount&&a&&(this._refCount=1)}if(this.assertInputCompatibility(e),a){let s=this.call(e,t);const a=Gd(s),r=[];for(let e of a)-1!==n.indexOf(e)&&(e=e.clone()),r.push(e);if(s=Ud(r),null!=this.activityRegularizer)throw new Ld("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return s}{const n=function(e){e=Gd(e);const t=[];for(const n of e)t.push(n.shape);return Ud(t)}(e),s=this.computeOutputShape(n);let a;const r="float32";if(this.warnOnIncompatibleInputShape(Array.isArray(e)?n[0]:n),a=null!=s&&s.length>0&&Array.isArray(s[0])?s.map(((n,s)=>new Nm(r,n,this,Gd(e),t,this.name,s))):new Nm(r,s,this,Gd(e),t,this.name),this.addInboundNode(e,a,null,null,n,s,t),this._refCount++,null!=this.activityRegularizer)throw new Ld("Layer invocation in the presence of activity regularizer(s) is not supported yet.");return a}}))}warnOnIncompatibleInputShape(e){if(null!=this.batchInputShape)if(e.length!==this.batchInputShape.length)console.warn(`The rank of the input tensor provided (shape: ${JSON.stringify(e)}) does not match that of the batchInputShape (${JSON.stringify(this.batchInputShape)}) of the layer ${this.name}`);else{let t=!1;this.batchInputShape.forEach(((n,s)=>{null!=n&&null!=e[s]&&e[s]!==n&&(t=!0)})),t&&console.warn(`The shape of the input tensor (${JSON.stringify(e)}) does not match the expectation of layer ${this.name}: ${JSON.stringify(this.batchInputShape)}`)}}get outputShape(){if(null==this.inboundNodes||0===this.inboundNodes.length)throw new _d(`The layer ${this.name} has never been called and thus has no defined output shape.`);const e=[];for(const t of this.inboundNodes){const n=JSON.stringify(t.outputShapes);-1===e.indexOf(n)&&e.push(n)}if(1===e.length){const e=this.inboundNodes[0].outputShapes;return Array.isArray(e)&&Array.isArray(e[0])&&1===e.length?e[0]:e}throw new _d(`The layer ${this.name} has multiple inbound nodes with different output shapes. Hence the notion of "output shape" is ill-defined for the layer.`)}countParams(){if(!this.built)throw new Od(`You tried to call countParams() on ${this.name}, but the layer is not built yet. Build it first by calling build(batchInputShape).`);return xm(this.weights)}build(e){this.built=!0}getWeights(e=!1){return km(e?this.trainableWeights:this.weights)}setWeights(e){li((()=>{const t=this.weights;if(t.length!==e.length)throw new Md(`You called setWeights(weights) on layer "${this.name}" with a weight list of length ${e.length}, but the layer was expecting ${t.length} weights. Provided weights: ${e}...`);if(0===t.length)return;const n=[],s=km(t);for(let a=0;a<s.length;++a){const r=s[a],i=t[a],o=e[a];if(!M(r.shape,o.shape))throw new Md(`Layer weight shape ${r.shape} not compatible with provided weight shape ${o.shape}`);n.push([i,o])}vm(n)}))}addWeight(e,t,n,s,a,r,i,o){if(-1!==this._addedWeightNames.indexOf(e))throw new Md(`Duplicate weight name ${e} for layer ${this.name}`);this._addedWeightNames.push(e),null==n&&(n="float32"),this.fastWeightInitDuringBuild&&(s=null!=o?o():fm("zeros"));const l=s.apply(t,n),u=new wm(l,n,e,r,i);return l.dispose(),null!=a&&this.addLoss((()=>a.apply(u.read()))),null==r&&(r=!0),r?this._trainableWeights.push(u):this._nonTrainableWeights.push(u),u}setFastWeightInitDuringBuild(e){this.fastWeightInitDuringBuild=e}addLoss(e){null==e||Array.isArray(e)&&0===e.length||(e=Gd(e),void 0!==this._losses&&null!==this._losses&&this.losses.push(...e))}computeOutputShape(e){return e}computeMask(e,t){if(!this.supportsMasking){if(null!=t){if(!Array.isArray(t))throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`);t.forEach((e=>{if(null!=e)throw new TypeError(`Layer ${this.name} does not support masking, but was passed an inputMask.`)}))}return null}return t}addInboundNode(e,t,n,s,a,r,i=null){const o=Gd(e);t=Gd(t),n=Gd(n),s=Gd(s),a=gm(a),r=gm(r);const l=[],u=[],c=[];for(const e of o)l.push(e.sourceLayer),u.push(e.nodeIndex),c.push(e.tensorIndex);new Tm({outboundLayer:this,inboundLayers:l,nodeIndices:u,tensorIndices:c,inputTensors:o,outputTensors:t,inputMasks:n,outputMasks:s,inputShapes:a,outputShapes:r},i);for(let e=0;e<t.length;e++)t[e].sourceLayer=this,t[e].nodeIndex=this.inboundNodes.length-1,t[e].tensorIndex=e}getConfig(){const e={name:this.name,trainable:this.trainable};return null!=this.batchInputShape&&(e.batchInputShape=this.batchInputShape),null!=this.dtype&&(e.dtype=this.dtype),e}disposeWeights(){return this.weights.forEach((e=>e.dispose())),this.weights.length}assertNotDisposed(){if(0===this._refCount)throw new Error(`Layer '${this.name}' is already disposed.`)}dispose(){if(!this.built)throw new Error(`Cannot dispose Layer ${this.name} because it has not been built yet.`);if(null===this._refCount)throw new Error(`Cannot dispose Layer ${this.name} because it has not been used yet.`);this.assertNotDisposed();let e=0;return 0==--this._refCount&&(e=this.disposeWeights()),{refCountAfterDispose:this._refCount,numDisposedVariables:e}}}function Em(e,t,n){if((null==t||null!=n&&n>0)&&(t=e.sourceLayer,n=e.nodeIndex),0===t.inboundNodes.length)return[e];{const e=t.inboundNodes[n];if(0===e.inboundLayers.length)return e.inputTensors;{const t=[];for(let n=0;n<e.inboundLayers.length;n++){const s=Em(e.inputTensors[n],e.inboundLayers[n],e.nodeIndices[n]);for(const e of s)-1===t.indexOf(e)&&t.push(e)}return t}}}class Am extends Cm{constructor(e){if(super({dtype:e.dtype,name:null!=e.name?e.name:uf("input").toString()}),null==e.batchSize&&(e.batchSize=null),null==e.sparse&&(e.sparse=!1),this.trainable=!1,this.built=!0,this.sparse=e.sparse,null!=e.inputShape&&null!=e.batchInputShape)throw new Md("Only provide the inputShape OR batchInputShape argument to inputLayer, not both at the same time.");let t=e.batchInputShape;if(null==t){if(null==e.inputShape)throw new Md("An InputLayer should be passed either a `batchInputShape` or an `inputShape`.");t=[e.batchSize].concat(e.inputShape)}else if(null!=e.batchSize)throw new Md("Cannot specify batchSize if batchInputShape is specified when creating an InputLayer.");const n=e.dtype||"float32";this.batchInputShape=t,this.dtype=n,this.inputSpec=[{shape:t}];const s=new Nm(this.dtype,this.batchInputShape,this,[],{},this.name);s.nodeIndex=0,s.tensorIndex=0,new Tm({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:[s],outputTensors:[s],inputMasks:[null],outputMasks:[null],inputShapes:[t],outputShapes:[t]})}apply(e,t){throw new Md(`Cannot pass any input to an InputLayer's apply() method. InputLayer name: ${this.name}`)}dispose(){return{refCountAfterDispose:this._refCount,numDisposedVariables:0}}getConfig(){return{batchInputShape:this.batchInputShape,dtype:this.dtype,sparse:this.sparse,name:this.name}}}Am.className="InputLayer",ri(Am);class Rm{constructor(e){if(this.id2Value={},this.id2Mask={},this.name2Id={},e instanceof Rm)for(const t in e.id2Value)this.id2Value[t]=e.id2Value[t],t in e.id2Mask&&(this.id2Mask[t]=e.id2Mask[t]);else{if(null==e)return;for(const t of e)this.add(t.key,t.value)}}add(e,t,n){if(null!=this.id2Value[e.id])throw new Md(`Duplicate key: name=${e.name}, id=${e.id}`);return this.id2Value[e.id]=function(e,t){if(null==e.dtype||e.dtype===t.dtype)return t;try{return Nr(t,e.dtype)}catch(n){throw new Md(`The dtype of the feed (${t.dtype}) can not be cast to the dtype of the key '${e.name}' (${e.dtype}).`)}}(e,t),this.name2Id[e.name]=e.id,null!=n&&(this.id2Mask[e.id]=n),this}addFeed(e){this.add(e.key,e.value)}hasKey(e){return null!=this.id2Value[e.id]}names(){return Object.keys(this.name2Id)}getValue(e){if(e instanceof Nm){if(null==this.id2Value[e.id])throw new Md(`Nonexistent key: ${e.name}`);return this.id2Value[e.id]}{const t=this.name2Id[e];if(null==t)throw new Md(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Value[t]}}getMask(e){if(e instanceof Nm){if(null==this.id2Value[e.id])throw new Md(`Nonexistent key: ${e.name}`);return this.id2Mask[e.id]}{const t=this.name2Id[e];if(null==t)throw new Md(`Feed dict has no SymbolicTensor name: ${e}`);return this.id2Mask[t]}}disposeMasks(){null!=this.id2Mask&&ui(this.id2Mask)}}const Fm=new Bd,Dm=new Bd;function _m(e,t,n,s){const a=null!=n&&n.training,r=Array.isArray(e),i=r?e:[e],o=i.map((e=>e.name)),l=[],u=t.names();for(const e of o)-1!==u.indexOf(e)?l.push(t.getValue(e)):l.push(null);null!=s&&(s.maxNumTensors=-1/0,s.minNumTensors=1/0);const c=o.join(",")+"|"+t.names().sort().join(",");let h,p=Fm.get(c);if(null==p){const e=function(e,t){R(null!=e&&e.length>0,(()=>"Expected at least one fetch, got none"));let n=[],s={};if(1===e.length){const a=Mm(e[0],t);n=a.sorted,s=a.recipientMap}else{const a=new Set;for(const r of e){const{sorted:e,recipientMap:i}=Mm(r,t);for(const t of e)a.has(t.name)||(n.push(t),a.add(t.name));for(const e in i)null==s[e]&&(s[e]=new Set),i[e].forEach((t=>s[e].add(t)))}}return{sorted:n,recipientCounts:Om(s)}}(i,t);p=e.sorted,h=e.recipientCounts,Fm.put(c,p),Dm.put(c,h)}h={},a||Object.assign(h,Dm.get(c));const d=new Rm(t);for(let e=0;e<p.length;++e){if(null!=s){const e=oi().numTensors;e>s.maxNumTensors&&(s.maxNumTensors=e),e<s.minNumTensors&&(s.minNumTensors=e)}const r=p[e],i=r.sourceLayer;if(i instanceof Am)continue;const u=[],c=[],f=[];let m=!1;for(const e of r.inputs){const n=d.getValue(e),s=d.getMask(e);u.push(n),c.push(s),null!=s&&(m=!0),a||(h[e.name]--,0!==h[e.name]||t.hasKey(e)||-1!==o.indexOf(e.name)||n.isDisposed||!0===e.sourceLayer.stateful||f.push(n))}m&&((n=n||{}).mask=c[0]);const g=Gd(i.apply(u,n));let y=null;i.supportsMasking&&(y=i.computeMask(u,c));const b=Lm(r),x=Array.isArray(b)?b:[b];for(let e=0;e<x.length;++e){d.hasKey(x[e])||d.add(x[e],g[e],Array.isArray(y)?y[0]:y);const t=o.indexOf(x[e].name);-1!==t&&(l[t]=g[e])}a||ui(f)}return d.disposeMasks(),r?l:l[0]}function Om(e){const t={};for(const n in e)t[n]=e[n].size;return t}function Mm(e,t){const n=new Set,s=[],a={};for(const e of t.names())n.add(e);const r=[],i=[];for(r.push(e);r.length>0;){const e=r[r.length-1];if(n.has(e.name)){r.pop();continue}const t=i[i.length-1]===r.length-1;if(0===e.inputs.length||t)r.pop(),s.push(e),n.add(e.name),t&&i.pop();else{i.push(r.length-1);for(const t of e.inputs)null==a[t.name]&&(a[t.name]=new Set),a[t.name].add(e.name),n.has(t.name)||r.push(t)}}return{sorted:s,recipientMap:a}}function Lm(e){let t;if(1===e.sourceLayer.inboundNodes.length)t=e.sourceLayer.output;else{let n=null;for(let t=0;t<e.sourceLayer.inboundNodes.length;++t)for(const s of e.sourceLayer.inboundNodes[t].outputTensors)if(s.id===e.id){n=t;break}t=e.sourceLayer.getOutputAt(n)}return t}function zm(e,t){return li((()=>pl(ko(xo(e,e),t,!0))))}pe().registerFlag("TOPOLOGICAL_SORT_CACHE_MAX_ENTRIES",(()=>100),(function(e){null!=Fm&&Fm.setMaxEntries(e),null!=Dm&&Dm.setMaxEntries(e)}));class Bm extends si{getConfig(){return{}}}class Pm extends Bm{constructor(e){super(),this.defaultMaxValue=2,this.defaultAxis=0,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return li((()=>{const t=zm(e,this.axis),n=Wi(t,0,this.maxValue);return xo(e,no(n,gi(Af(),t)))}))}getConfig(){return{maxValue:this.maxValue,axis:this.axis}}}Pm.className="MaxNorm",ri(Pm);class Wm extends Bm{constructor(e){super(),this.defaultAxis=0,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return li((()=>no(e,gi(Af(),zm(e,this.axis)))))}getConfig(){return{axis:this.axis}}}Wm.className="UnitNorm",ri(Wm);class Vm extends Bm{apply(e){return Qo(e)}}Vm.className="NonNeg",ri(Vm);class Um extends Bm{constructor(e){super(),this.defaultMinValue=0,this.defaultMaxValue=1,this.defaultRate=1,this.defaultAxis=0,this.minValue=null!=e.minValue?e.minValue:this.defaultMinValue,this.maxValue=null!=e.maxValue?e.maxValue:this.defaultMaxValue,this.rate=null!=e.rate?e.rate:this.defaultRate,this.axis=null!=e.axis?e.axis:this.defaultAxis}apply(e){return li((()=>{const t=zm(e,this.axis),n=gi(xo(this.rate,Wi(t,this.minValue,this.maxValue)),xo(1-this.rate,t));return xo(e,no(n,gi(Af(),t)))}))}getConfig(){return{minValue:this.minValue,maxValue:this.maxValue,rate:this.rate,axis:this.axis}}}Um.className="MinMaxNorm",ri(Um);const Gm={maxNorm:"MaxNorm",minMaxNorm:"MinMaxNorm",nonNeg:"NonNeg",unitNorm:"UnitNorm"};function Hm(e){return Kd(e)}function jm(e,t={}){return Yd(e,ai.getMap().classNameMap,t,"constraint")}function qm(e){return null==e?null:"string"==typeof e?jm({className:e in Gm?Gm[e]:e,config:{}}):e instanceof Bm?e:jm(e)}async function Km(e){if(null==e)return;const t=[],n=[],s=[];for(const a in e){const r=e[a];if("number"!=typeof r){const e=r;t.push(e.data()),n.push(a),s.push(e)}}if(t.length>0){const a=await Promise.all(t);for(let t=0;t<a.length;++t)e[n[t]]=a[t][0];ui(s)}}function Xm(e){if(null!=e)for(const t in e){const n=e[t];"number"!=typeof n&&n.dispose()}}var Ym;!function(e){e[e.SILENT=0]="SILENT",e[e.VERBOSE=1]="VERBOSE"}(Ym||(Ym={}));class Zm{constructor(){this.validationData=null}setParams(e){this.params=e}async onEpochBegin(e,t){}async onEpochEnd(e,t){}async onBatchBegin(e,t){}async onBatchEnd(e,t){}async onTrainBegin(e){}async onTrainEnd(e){}setModel(e){}}class Jm{constructor(e,t=10){null==e&&(e=[]),this.callbacks=e,this.queueLength=t}append(e){this.callbacks.push(e)}setParams(e){for(const t of this.callbacks)t.setParams(e)}setModel(e){for(const t of this.callbacks)t.setModel(e)}async onEpochBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochBegin(e,t)}async onEpochEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onEpochEnd(e,t)}async onBatchBegin(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchBegin(e,t)}async onBatchEnd(e,t){null==t&&(t={});for(const n of this.callbacks)await n.onBatchEnd(e,t)}async onTrainBegin(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainBegin(e)}async onTrainEnd(e){null==e&&(e={});for(const t of this.callbacks)await t.onTrainEnd(e)}}class Qm extends Zm{constructor(){super()}async onEpochBegin(e){this.seen=0,this.totals={}}async onBatchEnd(e,t){null==t&&(t={});const n=null==t.size?0:t.size;this.seen+=n;for(const e in t){const s=t[e];if("number"==typeof s)this.totals.hasOwnProperty(e)||(this.totals[e]=0),this.totals[e]=this.totals[e]+s*n;else{let t;e in this.totals?t=this.totals[e]:this.totals[e]=0;const a=li((()=>gi(this.totals[e],xo(s,n))));this.totals[e]=a,null!=t&&t.dispose()}}}async onEpochEnd(e,t){if(null!=t)for(const e of this.params.metrics)null!=this.totals[e]&&("number"==typeof this.totals[e]?t[e]=this.totals[e]/this.seen:li((()=>{const n=xo(no(1,this.seen),this.totals[e]);t[e]=n,this.totals[e].dispose(),ci(t[e])})))}}class eg extends Zm{async onTrainBegin(e){this.epoch=[],this.history={}}async onEpochEnd(e,t){null==t&&(t={}),this.epoch.push(e);for(const e in t)null==this.history[e]&&(this.history[e]=[]),this.history[e].push(t[e])}async syncData(){const e=[],t=[],n=[];for(const s in this.history){const a=this.history[s];for(let r=0;r<a.length;++r)if("number"!=typeof a[r]){const i=a[r];e.push(i.data()),t.push(s),n.push(r)}}const s=await Promise.all(e);for(let e=0;e<s.length;++e)this.history[t[e]][n[e]].dispose(),this.history[t[e]][n[e]]=s[e][0]}}class tg extends Zm{constructor(e,t){if(super(),this.currentEpoch=0,this.nowFunc=e.nowFunc,this.nextFrameFunc=e.nextFrameFunc||Yu,this.yieldEvery=t||"auto","auto"===this.yieldEvery&&(this.yieldEvery=125),"never"===this.yieldEvery&&null!=e.onYield)throw new Error("yieldEvery is `never` but you provided an `onYield` callback. Either change `yieldEvery` or remove the callback");Y(this.yieldEvery)&&(this.maybeWait=function(e,t,n){let s,a=null!=n?n():Ks();return(...r)=>{const i=null!=n?n():Ks();return i-a<t||(a=i,s=e(...r)),s}}(this.maybeWait.bind(this),this.yieldEvery,this.nowFunc)),this.trainBegin=e.onTrainBegin,this.trainEnd=e.onTrainEnd,this.epochBegin=e.onEpochBegin,this.epochEnd=e.onEpochEnd,this.batchBegin=e.onBatchBegin,this.batchEnd=e.onBatchEnd,this.yield=e.onYield}async maybeWait(e,t,n){const s=[];null!=this.yield&&(await Km(n),s.push(this.yield(e,t,n))),s.push(this.nextFrameFunc()),await Promise.all(s)}async onEpochBegin(e,t){this.currentEpoch=e,null!=this.epochBegin&&(await Km(t),await this.epochBegin(e,t))}async onEpochEnd(e,t){const n=[];null!=this.epochEnd&&(await Km(t),n.push(this.epochEnd(e,t))),"epoch"===this.yieldEvery&&n.push(this.nextFrameFunc()),await Promise.all(n)}async onBatchBegin(e,t){null!=this.batchBegin&&(await Km(t),await this.batchBegin(e,t))}async onBatchEnd(e,t){const n=[];null!=this.batchEnd&&(await Km(t),n.push(this.batchEnd(e,t))),"batch"===this.yieldEvery?n.push(this.nextFrameFunc()):Y(this.yieldEvery)&&n.push(this.maybeWait(this.currentEpoch,e,t)),await Promise.all(n)}async onTrainBegin(e){null!=this.trainBegin&&(await Km(e),await this.trainBegin(e))}async onTrainEnd(e){null!=this.trainEnd&&(await Km(e),await this.trainEnd(e))}}function ng(e,t){return null==e&&(e={}),e instanceof Zm?[e]:Array.isArray(e)&&e[0]instanceof Zm?e:Gd(e).map((e=>new tg(e,t)))}class sg{constructor(){}static registerCallbackConstructor(e,t){R(e>=0&&Number.isInteger(e),(()=>`Verbosity level is expected to be an integer >= 0, but got ${e}`)),sg.checkForDuplicate(t),null==sg.constructors[e]&&(sg.constructors[e]=[]),sg.constructors[e].push(t)}static checkForDuplicate(e){for(const t in sg.constructors)sg.constructors[+t].forEach((t=>{if(t===e)throw new Md("Duplicate callback constructor.")}))}static clear(){sg.constructors={}}static createCallbacks(e){const t=[];for(const n in sg.constructors){const s=+n;e>=s&&t.push(...sg.constructors[s])}return t.map((e=>new e))}}function ag(e,t,n,s,a,r,i,o,l){const u=new eg,c=[new Qm,...sg.createCallbacks(t)];null!=e&&c.push(...e),c.push(u);const h=new Jm(c);return h.setParams({epochs:n,initialEpoch:s,samples:a,steps:r,batchSize:i,verbose:t,doValidation:o,metrics:l}),{callbackList:h,history:u}}function rg(e,t={},n=!1){return Yd(e,ai.getMap().classNameMap,t,"layer",n)}function ig(e,t){return li((()=>{"float32"!==e.dtype&&(e=Nr(e,"float32"));const n=ko(Vf(e),t,!0),s=uo(n.shape,Af()),a=pl($o(n,s));return no(e,a)}))}function og(e,t){return li((()=>Co(Vf(wo(t,e)),-1)))}function lg(e,t){return li((()=>Co(mi(wo(t,e)),-1)))}function ug(e,t){return li((()=>{const n=wo(e,t),s=Wi(mi(e),Af(),Number.MAX_VALUE),a=mi(no(n,s));return xo(100,Co(a,-1))}))}function cg(e,t,n=!1){return li((()=>{if(n)t=ul(t);else{const e=ko(t,t.shape.length-1,!0);t=no(t,e)}return t=Wi(t,Af(),1-Af()),Po(ko(xo(Nr(e,"float32"),go(t)),t.shape.length-1))}))}function hg(e,t,n=!1){return li((()=>{const s=Nr(co(function(e){const t=[Sf(e.shape)];return _i(e,t)}(e)),"int32"),a=(t=Wi(t,Af(),1-Af())).shape;return cg(_i(Vo(s,a[a.length-1]),a),t,n)}))}function pg(e,t){return li((()=>{let n;return n=Wi(t,Af(),1-Af()),n=go(no(n,wo(1,n))),Co(function(e,t){if(!M(e.shape,t.shape))throw new Md(`logits and labels must have the same shape, but got shapes ${JSON.stringify(e.shape)} and ${JSON.stringify(t.shape)}`);return li((()=>{const n=Qo(t),s=Po(mi(t));return gi(wo(n,xo(t,e)),yo(ro(s)))}))}(e,n),-1)}))}function dg(e,t){return li((()=>{const n=ig(e,-1),s=ig(t,-1),a=xo(n,s);return Po(ko(a,-1))}))}sg.constructors={};const fg={meanSquaredError:og,meanAbsoluteError:lg,meanAbsolutePercentageError:ug,meanSquaredLogarithmicError:function(e,t){return li((()=>{const n=Wi(t,Af(),Number.MAX_VALUE),s=go(gi(1,n)),a=Wi(e,Af(),Number.MAX_VALUE),r=go(gi(1,a));return Co(Vf(wo(s,r)),-1)}))},squaredHinge:function(e,t){return li((()=>{const n=$o(0,wo(1,xo(e,t)));return Co(Vf(n),-1)}))},hinge:function(e,t){return li((()=>{const n=$o(0,wo(1,xo(e,t)));return Co(n,-1)}))},categoricalHinge:function(e,t){return li((()=>{const n=ko(xo(e,t),-1),s=bo(xo(wo(1,e),t),-1);return $o(0,gi(1,wo(s,n)))}))},logcosh:function(e,t){return li((()=>{const n=Math.log(2),s=wo(t,e),a=wo(gi(s,cl(xo(-2,s))),n);return Co(a,-1)}))},categoricalCrossentropy:cg,sparseCategoricalCrossentropy:hg,binaryCrossentropy:pg,kullbackLeiblerDivergence:function(e,t){return li((()=>{const n=Wi(e,Af(),1),s=Wi(t,Af(),1);return ko(xo(e,go(no(n,s))),-1)}))},poisson:function(e,t){return li((()=>{const n=go(gi(Af(),t));return Co(wo(t,xo(e,n)),-1)}))},cosineProximity:dg};function mg(e){if("string"==typeof e){if(e in fg)return fg[e];let t=`Unknown loss ${e}`;throw e.toLowerCase().includes("softmaxcrossentropy")&&(t=`Unknown loss ${e}. Use "categoricalCrossentropy" as the string name for tf.losses.softmaxCrossEntropy`),new Md(t)}return e}function gg(e,t){return li((()=>{const n=xo(.5,Ho(t)),s=Rf(po(t,n),e.dtype);return Co(ao(e,s),-1)}))}function yg(e,t){return li((()=>Rf(ao(xi(e,-1),xi(t,-1)),"float32")))}function bg(e,t){return pg(e,t)}function xg(e,t){return e.rank===t.rank&&(e=dl(e,[e.rank-1])),(t=xi(t,-1)).dtype!==e.dtype&&(t=Nr(t,e.dtype)),Nr(ao(e,t),"float32")}const wg=cg,kg=hg,vg={binaryAccuracy:gg,categoricalAccuracy:yg,precision:function(e,t){return li((()=>{const n=function(e,t){return li((()=>Nr(ko(Io(ao(e,1),ao(t,1))),"float32")))}(e,t),s=function(e,t){return li((()=>Nr(ko(Io(ao(e,0),ao(t,1))),"float32")))}(e,t),a=gi(n,s);return Nr(wl(po(a,0),no(n,a),0),"float32")}))},categoricalCrossentropy:wg,sparseCategoricalCrossentropy:kg,mse:og,MSE:og,mae:lg,MAE:lg,mape:ug,MAPE:ug,cosine:dg};function Ig(e){if("string"==typeof e&&e in vg)return vg[e];if("string"!=typeof e&&null!=e)return e;throw new Md(`Unknown metric ${e}`)}function Ng(e){if(Wd(null!==e,`Unknown LossOrMetricFn ${e}`),"string"==typeof e)return e;{let t;for(const n of Object.keys(fg))if(fg[n]===e){t=n;break}if(void 0!==t)return t;for(const n of Object.keys(vg))if(vg[n]===e){t=n;break}return void 0!==t?t:e.name}}function Sg(e,t,n=!1){if(null==e||"object"!=typeof e||Object.getPrototypeOf(e)!==Object.prototype||!Tg(e))throw new Error("User-defined metadata is expected to be a JSON object, but is not.");if(n){const n=JSON.stringify(e);n.length>1048576&&console.warn(`User-defined metadata of model "${t}" is too large in size (length=${n.length} when serialized). It is not recommended to store such large objects in user-defined metadata. Please make sure its serialized length is <= 1048576.`)}}function Tg(e){if(null===e)return!0;if("object"==typeof e){if(Object.getPrototypeOf(e)===Object.prototype){const t=Object.keys(e);for(const n of t){if("string"!=typeof n)return!1;if(!Tg(e[n]))return!1}return!0}if(Array.isArray(e)){for(const t of e)if(!Tg(t))return!1;return!0}return!1}{const t=typeof e;return"string"===t||"number"===t||"boolean"===t}}function $g(e,t,n=console.log){let s="";for(let n=0;n<e.length;++n)n>0&&(s=s.slice(0,s.length-1)+" "),s+=e[n],s=s.slice(0,t[n]),s+=" ".repeat(t[n]-s.length);n(s)}function Cg(e,t,n){let s,a;try{a=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){a="multiple"}try{s=JSON.stringify(e.outputShape)}catch(e){s="multiple"}$g([`${e.name} (${e.getClassName()})`,a,s,e.countParams().toString()],t,n)}function Eg(e,t,n,s){let a,r;try{r=e.inboundNodes.map((e=>JSON.stringify(e.inputShapes))).join(",")}catch(e){r="multiple"}try{a=JSON.stringify(e.outputShape)}catch(e){a="multiple"}const i=[];for(const t of e.inboundNodes)if(!(null!=n&&n.length>0&&-1===n.indexOf(t)))for(let e=0;e<t.inboundLayers.length;++e){const n=t.inboundLayers[e].name,s=t.nodeIndices[e],a=t.tensorIndices[e];i.push(`${n}[${s}][${a}]`)}const o=e.name,l=e.getClassName(),u=0===i.length?"":i[0];$g([`${o} (${l})`,r,a,e.countParams().toString(),u],t,s);for(let e=1;e<i.length;++e)$g(["","","","",i[e]],t,s)}function Ag(e,t,n){return("inboundNodes"===e||"outputLayers"===e||"inputLayers"===e)&&0===t&&"string"==typeof n}function Rg(e,t){if(null===e)return null;if("string"==typeof e)return jd(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let a=0;a<s;++a){const s=e[a];Ag(t,a,s)?n.push(s):n.push(Rg(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];if("name"===n&&"string"==typeof s)t[n]=s;else{const e=jd(n);t[e]=Rg(s,e)}}return t}}function Fg(e,t){if(null==e)return null;if("string"==typeof e)return Hd(e);if("number"==typeof e||"boolean"==typeof e)return e;if(e instanceof Array){const n=[],s=e.length;for(let a=0;a<s;++a){const s=e[a];Ag(t,a,s)?n.push(s):n.push(Fg(s,t))}return n}{const t={};for(const n of Object.keys(e)){const s=e[n];t[Hd(n)]="name"!==n&&"className"!==n||"string"!=typeof s?Fg(s,n):s}return t}}class Dg extends Cm{constructor(e){if(super({}),this.containerNodes=new Set,this.name=e.name,null==this.name){const e=this.getClassName().toLowerCase();this.name=uf(e)}if(this.supportsMasking=!1,this.trainable_=!0,Array.isArray(e.inputs)?this.inputs=e.inputs.slice():this.inputs=[e.inputs],Array.isArray(e.outputs)?this.outputs=e.outputs.slice():this.outputs=[e.outputs],Jd(this.inputs).length!==this.inputs.length)throw new Md(`The list of inputs passed to the model is redundant. All inputs should only appear once. Found: ${this.inputs.map((e=>e.name))}`);Jd(this.outputs).length!==this.outputs.length&&console.warn(`The list of outputs passed to the model is redundant. All outputs should only appear once. Found: ${this.outputs.map((e=>e.name))}`),this.inputLayers=[],this.inputLayersNodeIndices=[],this.inputLayersTensorIndices=[],this.outputLayers=[],this.outputLayersNodeIndices=[],this.outputLayersTensorIndices=[],this.layers=[],this.internalContainerRefs=[];for(const e of this.outputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;this.outputLayers.push(t),this.outputLayersNodeIndices.push(n),this.outputLayersTensorIndices.push(s)}for(const e of this.inputs){const t=e.sourceLayer,n=e.nodeIndex,s=e.tensorIndex;Wd(0===n,"input layer has >1 nodes"),Wd(0===s,"input layer has >1 tensors"),this.inputLayers.push(t),this.inputLayersNodeIndices.push(n),this.inputLayersTensorIndices.push(s)}this.inputNames=[],this.outputNames=[],this.feedInputShapes=[],this.feedInputNames=[],this.feedOutputNames=[];for(let t=0;t<this.inputLayers.length;t++){const n=this.inputLayers[t];if(!(n instanceof Am))throw new TypeError(`Input layers to a LayersModel must be InputLayer objects. Received inputs: ${e.inputs}. Input ${t} (0-based) originates from layer type ${n.getClassName()}.`);this.inputNames.push(n.name),this.feedInputShapes.push(n.batchInputShape),this.feedInputNames.push(n.name)}for(const e of this.outputLayers)this.outputNames.push(e.name);this.internalInputShapes=this.inputs.map((e=>e.shape)),this.internalOutputShapes=this.outputs.map((e=>e.shape));const t={},n={},s={},a={},r={},i=[],o=(e,t,n,s,a,l)=>{null!=s&&null!=a&&null!=l||(s=e.sourceLayer,a=e.nodeIndex,l=e.tensorIndex);const u=s.inboundNodes[a];if(-1!==n.indexOf(u))throw new Od(`The tensor ${e.name} at layer "${s.name}" is part of a cycle.`);if(-1!==t.indexOf(u))return;this.containerNodes.add(Dg.nodeKey(s,a)),s.id in r||(r[s.id]=Object.keys(r).length),-1===n.indexOf(u)&&n.push(u);const c=u.inboundLayers.length;for(let e=0;e<c;e++){const s=u.inputTensors[e],a=u.inboundLayers[e],r=u.nodeIndices[e],i=u.tensorIndices[e];o(s,t,n,a,r,i)}for(t.push(u);n.indexOf(u)>=0;)n.splice(n.indexOf(u),1);i.push(u)},l=[],u=[];for(const e of this.outputs)o(e,l,u);const c=i.slice().reverse();for(const e of c){n[e.id]=e,e.id in t||(t[e.id]=0);let r=t[e.id];const i=null==s[e.outboundLayer.id]?0:s[e.outboundLayer.id];r=Math.max(r,i),s[e.outboundLayer.id]=r,a[e.outboundLayer.id]=e.outboundLayer,t[e.id]=r;for(let s=0;s<e.inboundLayers.length;s++){const a=e.inboundLayers[s],i=e.nodeIndices[s],o=a.inboundNodes[i],l=null==t[o.id]?0:t[o.id];t[o.id]=Math.max(r+1,l),n[o.id]=o}}const h={};for(const e in t){const s=t[e];s in h||(h[s]=[]),h[s].push(n[e])}const p={};for(const e in s){const t=s[e];t in p||(p[t]=[]),p[t].push(a[e])}let d=Object.keys(p).map((e=>parseInt(e,10))).sort(Zd);this.layers=[];for(const e of d){const t=p[e];t.sort(((e,t)=>{const n=r[e.id],s=r[t.id];return n<s?-1:n>s?1:0}));for(const e of t)e instanceof Dg&&this.internalContainerRefs.push(e),this.layers.push(e)}this.layersByDepth=p,d=Object.keys(h).map((e=>parseInt(e,10))).sort(Zd);const f=this.inputs.slice(),m=[];for(const e of d)for(const t of h[e]){const e=t.outboundLayer;if(null!=e){for(const n of t.inputTensors)if(-1===f.indexOf(n))throw new Od(`Graph disconnected: cannot obtain value for tensor ${n} at layer "${e.name}". The following previous layers were accessed without issue: ${m}`);for(const e of t.outputTensors)f.push(e);m.push(e.name)}}this.nodesByDepth=h;const g=this.layers.map((e=>e.name));for(const e of g){const t=g.filter((t=>t===e)).length;if(1!==t)throw new Od(`The name "${e}" is used ${t} times in the model. All layer names should be unique. Layer names: `+JSON.stringify(g))}this.outboundNodes=[],this.inboundNodes=[],new Tm({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:this.inputs.map((e=>null)),outputMasks:this.outputs.map((e=>null)),inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs.map((e=>e.shape))}),this.built=!0,this._refCount=1}assertNotDisposed(){if(0===this._refCount)throw new Error(`Container '${this.name}' is already disposed.`)}dispose(){this.assertNotDisposed();const e={refCountAfterDispose:null,numDisposedVariables:0};if(0==--this._refCount){for(const t of this.layers)e.numDisposedVariables+=t.dispose().numDisposedVariables;for(const t of this.internalContainerRefs)e.numDisposedVariables+=t.dispose().numDisposedVariables}return e.refCountAfterDispose=this._refCount,e}get trainable(){return this.trainable_}set trainable(e){this.layers.forEach((t=>{t._trainableWeights.forEach((t=>t.trainable=e))})),this.trainable_=e}get trainableWeights(){if(this._trainableWeights.length>0)throw new Md("Container instance unexpectedly contains _trainableWeights.The trainable weights of a Container are a union of the trainable weights of its consituent Layers. Its own _trainableWeights must remain an empty Array.");if(!this.trainable)return[];let e=[];for(const t of this.layers)e=e.concat(t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.layers)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.layers)t.push(...e.trainableWeights);return t.concat(e)}return e}get weights(){return this.trainableWeights.concat(this.nonTrainableWeights)}loadWeights(e,t=!0){const n={};let s=0;for(const e of this.layers)for(const t of e.weights){if(null!=n[t.originalName])throw new Md(`Duplicate weight name: ${t.originalName}`);n[t.originalName]=t,s++}const a=[];for(const s in e){let r=s;if(null==n[s]){const e=s.split("/");r=e.slice(0,-2).concat([e[e.length-1]]).join("/")}if(null!=n[r])a.push([n[r],e[s]]);else if(t)throw new Md(`Provided weight data has no target variable: ${s}`);delete n[r]}if(t){const e=[];for(const t in n)e.push(t);if(e.length>0)throw new Md(`${e.length} of ${s} weights are not set: ${e}`)}vm(a)}updatedConfig(){const e=this.getConfig(),t={};return t.className=this.getClassName(),t.config=e,t.kerasVersion="tfjs-layers 3.18.0",t.backend="TensorFlow.js",t}toJSON(e,t=!0){const n=Fg(this.updatedConfig());return t?JSON.stringify(n):n}call(e,t){return li((()=>{e=Gd(e);const n=new Rm;for(let t=0;t<this.inputs.length;++t)n.add(this.inputs[t],e[t]);return _m(this.outputs,n,t)}))}computeMask(e,t){return li((()=>{let n;return e=Gd(e),n=null==t?Pd(null,e.length):Gd(t),this.runInternalGraph(e,n)[1]}))}computeOutputShape(e){const t=gm(e);if(t.length!==this.inputLayers.length)throw new Md(`Invalid inputShape argument ${e}: model has ${this.inputLayers.length} tensor inputs.`);const n={};for(let e=0;e<t.length;e++){const s=this.inputLayers[e],a=t[e];n[s.name+"_0_0"]=a}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(Zd);if(s.length>1)for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer;if(-1!==this.inputLayers.map((e=>e.id)).indexOf(t.id))continue;const s=[];for(let t=0;t<e.inboundLayers.length;t++){const a=e.inboundLayers[t],r=e.nodeIndices[t],i=e.tensorIndices[t],o=n[`${a.name}_${r}_${i}`];s.push(o)}const a=gm(t.computeOutputShape(Ud(s))),r=t.inboundNodes.indexOf(e);for(let e=0;e<a.length;e++)n[`${t.name}_${r}_${e}`]=a[e]}}const a=[],r=[];for(let e=0;e<this.outputLayers.length;e++){const t=this.outputLayers[e],n=this.outputLayersNodeIndices[e],s=this.outputLayersTensorIndices[e],a=`${t.name}_${n}_${s}`;r.push(a)}for(let e=0;e<r.length;e++){const t=r[e];Wd(t in n),a.push(n[t])}return Ud(a)}runInternalGraph(e,t){null==t&&(t=Pd(null,e.length));const n={};for(let s=0;s<this.inputs.length;++s){const a=this.inputs[s],r=e[s],i=t[s];n[a.id]=[r,i]}const s=Object.keys(this.nodesByDepth).map((e=>parseInt(e,10))).sort(Zd);for(const e of s){const t=this.nodesByDepth[e];for(const e of t){const t=e.outboundLayer,s=e.inputTensors,a=e.outputTensors,r=new Array;for(const e of s)e.id in n&&r.push(n[e.id]);if(r.length===s.length){let s,i,o,l,u={};if(null!=e.callArgs&&(u=e.callArgs),1===r.length){const[e,n]=r[0];null==u.mask&&(u.mask=n),o=Gd(t.call(e,u)),l=Gd(t.computeMask(e,n)),s=[e],i=[n]}else s=r.map((e=>e[0])),i=r.map((e=>e[1])),null==u.mask&&(u.mask=i),o=Gd(t.call(s,u)),l=Gd(t.computeMask(s,i));if(t.activityRegularizer)throw new Ld("LayersModel invocation with concrete Tensor value(s) in the presence of activity regularizer(s) is not supported yet.");for(let e=0;e<a.length;++e){const t=a[e],s=o[e],r=l[e];n[t.id]=[s,r]}}}}const a=[],r=[],i=[];for(const e of this.outputs){Wd(e.id in n,`Could not compute output ${e.name} : ${e.id}`);const[t,s]=n[e.id];i.push(t.shape),a.push(t),r.push(s)}return[a,r,i]}buildNodeConversionMap(e){const t={};let n;for(const e of this.layers){n=e instanceof Dg?1:0;for(let s=0;s<e.inboundNodes.length;s++){const a=Dg.nodeKey(e,s);this.containerNodes.has(a)&&(t[a]=n,n+=1)}}return t}getLayer(e,t){if(null!=t){if(this.layers.length<=t)throw new Md(`Was asked to retrieve layer at index ${t}, but model only has ${this.layers.length} layer(s).`);return this.layers[t]}if(null==e)throw new Md("Provide either a layer name or layer index");for(const t of this.layers)if(t.name===e)return t;throw new Md(`No such layer: ${e}`)}calculateLosses(){return li((()=>{const e=[];for(const t of this.layers)for(let n=0;n<t.inboundNodes.length;++n){const s=Dg.nodeKey(t,n);this.containerNodes.has(s)&&e.push(...t.calculateLosses())}return e}))}getConfig(){const e={name:this.name},t=this.buildNodeConversionMap(this.layers),n=[];for(const e of this.layers){const s=e.getClassName(),a=e.getConfig(),r=[];for(let n=0;n<e.inboundNodes.length;n++){const s=e.inboundNodes[n],a=Dg.nodeKey(e,n);let i={};if(this.containerNodes.has(a)){if(s.callArgs)try{JSON.stringify(s.callArgs),i=s.callArgs}catch(t){console.warn(`Layer ${e.name} was passed non-serializable keyword arguments: ${s.callArgs}. They will not be included in the serialized model (and thus will be missing at deserialization time).`),i={}}if(s.inboundLayers.length>0){const e=[];for(let n=0;n<s.inboundLayers.length;n++){const a=s.inboundLayers[n],r=s.nodeIndices[n],o=s.tensorIndices[n];let l=t[Dg.nodeKey(a,r)];null==l&&(l=0),e.push([a.name,l,o,i])}r.push(e)}}}const i={};i.name=e.name,i.className=s,i.config=a,i.inboundNodes=r,n.push(i)}e.layers=n;const s=[];for(let e=0;e<this.inputLayers.length;e++){const n=this.inputLayers[e],a=this.inputLayersNodeIndices[e],r=Dg.nodeKey(n,a);if(!this.containerNodes.has(r))continue;let i=t[r];null==i&&(i=0);const o=this.inputLayersTensorIndices[e];s.push([n.name,i,o])}e.inputLayers=s;const a=[];for(let e=0;e<this.outputLayers.length;e++){const n=this.outputLayers[e],s=this.outputLayersNodeIndices[e],r=Dg.nodeKey(n,s);if(!this.containerNodes.has(r))continue;let i=t[r];null==i&&(i=0);const o=this.outputLayersTensorIndices[e];a.push([n.name,i,o])}return e.outputLayers=a,e}static fromConfig(e,t,n={},s=!1){const a={},r={};function i(e,t){e.name in r?r[e.name].push(t):r[e.name]=[t]}function o(e,t){const n=[];let s;for(const r of t){const o=r[0],l=r[1],u=r[2];if(s=null==r[3]?{}:r[3],!(o in a))return void i(e,t);const c=a[o];if(c.inboundNodes.length<=l)return void i(e,t);const h=c.inboundNodes[l];n.push(h.outputTensors[u])}n.length>0&&e.apply(Ud(n),s)}function l(e){const n=e.name,r=rg(e,null!=t.customObjects?t.customObjects:{});r.setFastWeightInitDuringBuild(s),a[n]=r,e.inboundNodes.forEach((e=>{if(!(e instanceof Array))throw new Md(`Corrupted configuration, expected array for nodeData: ${e}`);i(r,e)}))}const u=t.name,c=t.layers;for(const e of c)l(e);for(;!Qd(r);)for(const e of c){const t=a[e.name];if(t.name in r){const e=r[t.name];delete r[t.name];for(const n of e)o(t,n)}}const h=[],p=[],d=t.inputLayers;for(const e of d){const t=e[0],n=e[1],s=e[2];Wd(t in a);const r=a[t].inboundNodes[n].outputTensors;h.push(r[s])}const f=t.outputLayers;for(const e of f){const t=e[0],n=e[1],s=e[2];Wd(t in a);const r=a[t].inboundNodes[n].outputTensors;p.push(r[s])}return new e({inputs:h,outputs:p,name:u})}get stateful(){if(this._stateful)throw new Md("Container instance unexpectedly has _stateful = true. The statefulness of a Container is determined by the Layers it contains. Its _stateful property must remain the default false.");for(const e of this.layers)if(e.stateful)return!0;return!1}resetStates(){li((()=>{this.layers.forEach((e=>{e.stateful&&e.resetStates()}))}))}}function _g(e,t){return function(e,t,n){const s=t.length;if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>null));if(1===s)return Array.isArray(e)&&1===e.length?e:"object"==typeof e&&t[0]in e?[e[t[0]]]:[e];if(Array.isArray(e)){if(e.length!==s)throw new Error(`Provided ${n} is an array of ${e.length} element(s), but the model has ${s} outputs. Make sure a set of weights is provided for each model output.`);return e}if("object"==typeof e&&Object.keys(e).length>0&&"object"==typeof e[Object.keys(e)[0]]){const n=[];return t.forEach((t=>{t in e?n.push(e[t]):n.push(null)})),n}throw new Error(`The model has multiple (${s}) outputs, so ${n} must be either an array with ${s} elements or an object with ${t} keys. Provided ${n} not understood: ${JSON.stringify(e)}`)}(e,t,"classWeight")}async function Og(e,t,n,s){if(null!=t||null!=s)throw new Error("Support sampleWeight is not implemented yet");if(null!=n){const t=li((()=>{if(1===e.shape.length)return Sr(e);if(2===e.shape.length){if(e.shape[1]>1)return xi(e,1);if(1===e.shape[1])return _i(e,[e.shape[0]]);throw new Error(`Encountered unexpected last-dimension size (${e.shape[1]}) during handling of class weights. The size is expected to be >= 1.`)}throw new Error(`Unexpected rank of target (y) tensor (${e.rank}) during handling of class weights. The rank is expected to be 1 or 2.`)})),s=Array.from(await t.data());ui(t);const a=[];return s.forEach((e=>{if(null==n[e])throw new Error(`classWeight must contain all classes in the training data. The class ${e} exists in the data but not in classWeight`);a.push(n[e])})),gl(a,"float32")}return null}function Mg(e,t){return xo(e,t)}function Lg(e,t){let n,s;const a=t;n=a.xs,s=a.ys,R(null!=n&&null!=s,(()=>`A Dataset iterator for fitDataset() is expected to generate objects of the form \`{xs: xVal, ys: yVal}\`, where the two values may be \`tf.Tensor\`, an array of Tensors, or a map of string to Tensor.  The provided Dataset instead generates ${t}`));const r=zg("input",e.inputNames,n),i=zg("output",e.outputNames,s),o=r[0].shape[0];R(r.length===e.inputs.length,(()=>`LayersModel has ${e.inputs.length} inputs, but the dataset provides ${r.length} inputs.  (Expected input keys: ${JSON.stringify(e.inputNames)})`)),R(i.length===e.outputs.length,(()=>`LayersModel has ${e.outputs.length} outputs, but the dataset provides ${i.length} outputs.  (Expected output keys: ${JSON.stringify(e.outputNames)})`));for(let t=0;t<r.length;t++)R(r[t].shape[0]===o,(()=>`Batch size mismatch: input ${e.inputNames[t]} has ${r[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));for(let t=0;t<i.length;t++)R(i[t].shape[0]===o,(()=>`Batch size mismatch: output ${e.outputNames[t]} has ${i[t].shape[0]}; expected  ${o} based on input ${e.inputNames[0]}.`));return{xs:r,ys:i}}function zg(e,t,n){if(n instanceof ua)return[n];if(Array.isArray(n))return R(n.length===t.length,(()=>`Received an array of ${n.length} Tensors, but expected ${t.length} to match the ${e} keys ${t}.`)),n;{const s=[];for(const a of t){if(null==n[a])throw new Md(`The feature data generated by the dataset lacks the required ${e} key '${a}'.`);s.push(n[a])}return s}}function Bg(e){return"function"==typeof e.iterator}function Pg(e){R(e>0&&Number.isInteger(e),(()=>`batchSize is required to be a positive integer, but got ${e}`))}function Wg(e,t,n){return null==e?[null]:Array.isArray(e)?e.map((e=>Df(e,t,n-t))):Df(e,t,n-t)}function Vg(e,t){return li((()=>null==e?null:Array.isArray(e)?e.map((e=>Vg(e,t))):Wf(e,"int32"===t.dtype?t:Nr(t,"int32"))))}function Ug(e,t){const n=[];let s=0,a=null;for(;s<e;)a=s+t,a>=e&&(a=e),n.push([s,a]),s=a;return n}function Gg(e){const t=[];e instanceof ua&&(e=[e]);for(let n=0;n<e.length;++n){const s=e[n];if(1===s.rank)t.push(Ff(s,1));else{if(0===s.rank)throw new Error("Expected tensor to be at least 1D, but received a 0D tensor (scalar).");t.push(s)}}return t}function Hg(e,t){if(null==e)return;const n=[];if(t instanceof ua)n.push(t.id);else if(Array.isArray(t))t.forEach((e=>n.push(e.id)));else if(null!=t)for(const e in t){const s=t[e];n.push(s.id)}const s=[];if(e instanceof ua)-1===n.indexOf(e.id)&&s.push(e);else if(Array.isArray(e))e.forEach((e=>{-1===n.indexOf(e.id)&&s.push(e)}));else if(null!=e)for(const t in e){const a=e[t];-1===n.indexOf(a.id)&&s.push(a)}s.forEach((e=>{e.isDisposed||e.dispose()}))}function jg(e){return Array.isArray(e)}function qg(e){return!function(e){return e instanceof ua}(e)&&!jg(e)}function Kg(e,t,n,s=!0,a=""){if(null==t||0===t.length){if(null!=e){let t=!1;if(jg(e)&&e.length>0)t=!0;else if(qg(e)){for(const n in e)if(e.hasOwnProperty(n)){t=!0;break}}else t=!0;if(t)throw new Md(`Error when checking model ${a} expected no data, but got ${e}`)}return[]}if(null==e)return t.map((e=>null));let r;if(qg(e)){r=[];for(const n of t){if(null==e[n])throw new Md(`No data provided for "${n}". Need data for each key in: ${t}`);r.push(e[n])}}else if(jg(e)){if(e.length!==t.length)throw new Md(`Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the model expected. Expected to see ${t.length} Tensor(s), but instead got the following list of Tensor(s): ${e}`);r=e}else{if(t.length>1)throw new Md(`The model ${a} expects ${t.length} Tensor(s), but only received one Tensor. Found: Tensor with shape ${e.shape}`);r=[e]}if(r=Gg(r),null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=r[e];if(i.shape.length!==n[e].length)throw new Md(`Error when checking ${a}: expected ${t[e]} to have ${n[e].length} dimension(s). but got array with shape ${i.shape}`);for(let t=0;t<n[e].length;++t){if(0===t&&!s)continue;const r=i.shape[t],o=n[e][t];if(null!=o&&o>=0&&r!==o)throw new Md(`${a} expected a batch of elements where each example has shape [${n[e].slice(1,n[e].length)}] (i.e.,tensor shape [*,${n[e].slice(1,n[e].length)}]) but the ${a} received an input with ${i.shape[0]} examples, each with shape [${i.shape.slice(1,i.shape.length)}] (tensor shape [${i.shape}])`)}}return r}function Xg(e,t,n,s=!0,a=""){let r;if(Array.isArray(e)){if(e.length!==t.length)throw new Md(`Error when checking model ${a}: the Array of Tensors that you are passing to your model is not the size the the model expected. Expected to see ${t.length} Tensor(s), but instead got ${e.length} Tensors(s).`);r=e}else{if(t.length>1)throw new Md(`The model expects ${t.length} ${a} Tensors, but only received one Tensor. Found: array with shape ${JSON.stringify(e.shape)}.`);r=[e]}if(null!=n)for(let e=0;e<t.length;++e){if(null==n[e])continue;const i=r[e];if(i.shape.length!==n[e].length)throw new Md(`Error when checking ${a}: expected ${t[e]} to have ${n[e].length} dimension(s), but got array with shape ${JSON.stringify(i.shape)}`);for(let r=0;r<n[e].length;++r){if(0===r&&!s)continue;const o=i.shape[r],l=n[e][r];if(null!=l&&l!==o)throw new Md(`Error when checking ${a}: expected ${t[e]} to have shape ${JSON.stringify(n[e])} but got array with shape ${JSON.stringify(i.shape)}.`)}}}class Yg extends Dg{constructor(e){super(e),this.isTraining=!1}summary(e,t,n=console.log){if(!this.built)throw new Md("This model has never been called, thus its weights have not been created yet. So no summary can be displayed. Build the model first (e.g., by calling it on some test data).");!function(e,t,n,s=console.log){const a=function(e){let t=!0;const n=[],s=[];for(const t in e.nodesByDepth)n.push(e.nodesByDepth[t]);for(const e of n){if(e.length>1||1===e.length&&e[0].inboundLayers.length>1){t=!1;break}s.push(...e)}if(t)for(const n of e.layers){let e=!1;for(const a of n.inboundNodes)if(-1!==s.indexOf(a)){if(e){t=!1;break}e=!0}if(!t)break}return t}(e),r=["Layer (type)","Input Shape","Output shape","Param #"];let i;if(a?(t=t||90,n=n||[.32,.61,.89,1]):(t=t||115,n=n||[.24,.48,.7,.8,1]),n[n.length-1]<=1&&(n=n.map((e=>Math.floor(t*e)))),!a){r.push("Receives inputs"),i=[];for(const t in e.nodesByDepth)i.push(...e.nodesByDepth[t])}s("_".repeat(t)),$g(r,n,s),s("=".repeat(t));const o=e.layers;for(let e=0;e<o.length;++e)a?Cg(o[e],n,s):Eg(o[e],n,i,s),s((e===o.length-1?"=":"_").repeat(t));e.checkTrainableWeightsConsistency();const l=function(e){let t;return t=null!=e.collectedTrainableWeights?xm(e.collectedTrainableWeights):xm(e.trainableWeights),t}(e),u=xm(e.nonTrainableWeights);s(`Total params: ${l+u}`),s(`Trainable params: ${l}`),s(`Non-trainable params: ${u}`),s("_".repeat(t))}(this,e,t,n)}compile(e){if(null==e.loss&&(e.loss=[]),this.loss=e.loss,"string"==typeof e.optimizer)this.optimizer_=function(e){const t={Adagrad:()=>Ku.adagrad(.01),Adadelta:()=>Ku.adadelta(1,.95,Af()),Adam:()=>Ku.adam(.001,.9,.999,Af()),Adamax:()=>Ku.adamax(.002,.9,.999,Af(),0),RMSProp:()=>Ku.rmsprop(.001,.9,0,Af()),SGD:()=>Ku.sgd(.01)};if(t.adagrad=t.Adagrad,t.adadelta=t.Adadelta,t.adam=t.Adam,t.adamax=t.Adamax,t.rmsprop=t.RMSProp,t.sgd=t.SGD,e in t)return t[e]();throw new Md(`Unknown Optimizer ${e}`)}(e.optimizer),this.isOptimizerOwned=!0;else{if(!(e.optimizer instanceof fi))throw new Md("User-defined optimizer must be an instance of tf.Optimizer.");this.optimizer_=e.optimizer,this.isOptimizerOwned=!1}let t=[];if(Array.isArray(e.loss)||"string"==typeof e.loss||"function"==typeof e.loss)if(Array.isArray(e.loss)){if(e.loss.length!==this.outputs.length)throw new Md(`When passing an Array as loss, it should have one entry per model output. The model has ${this.outputs.length} output(s), but you passed loss=${e.loss}.`);const n=e.loss;t=n.map((e=>mg(e)))}else{const n=mg(e.loss);this.outputs.forEach((e=>{t.push(n)}))}else{e.loss=e.loss;for(const t in e.loss)if(-1===this.outputNames.indexOf(t))throw new Md(`Unknown entry in loss dictionary: "${t}". Only expected the following keys: ${this.outputNames}`);for(const n of this.outputNames)null==e.loss[n]&&console.warn(`Output "${n}" is missing from loss dictionary. We assume this was done on purpose, and we will not be expecting data to be passed to ${n} during training`),t.push(mg(e.loss[n]))}this.lossFunctions=t,this.feedOutputNames=[],this.feedOutputShapes=[],this.feedLossFns=[];for(let e=0;e<this.outputs.length;++e){const t=this.internalOutputShapes[e],n=this.outputNames[e];this.feedOutputNames.push(n),this.feedOutputShapes.push(t),this.feedLossFns.push(this.lossFunctions[e])}const n=[];this.metrics=e.metrics,this.metricsNames=["loss"],this.metricsTensors=[],wf("loss",(()=>{for(let e=0;e<this.outputs.length;++e){if(-1!==n.indexOf(e))continue;const t=this.lossFunctions[e];this.outputs.length>1&&(this.metricsTensors.push([t,e]),this.metricsNames.push(this.outputNames[e]+"_loss"))}}));const s=function(e,t){if(null==e||Array.isArray(e)&&0===e.length)return t.map((e=>[]));let n;if("string"==typeof e||"function"==typeof e)n=[e];else{if(!Array.isArray(e)&&"object"!=typeof e)throw new TypeError(`Type of metrics argument not understood. Expected an string,function, Array, or Object, found: ${e}`);n=e}if(Array.isArray(n))return t.map((e=>n));{const e=[];for(const s of t){let t=n.hasOwnProperty(s)?n[s]:[];Array.isArray(t)||(t=[t]),e.push(t)}return e}}(e.metrics,this.outputNames),a=(e,t,n)=>{this.outputNames.length>1&&(t=this.outputNames[e]+"_"+t),this.metricsNames.push(t),this.metricsTensors.push([n,e])};wf("metric",(()=>{for(let e=0;e<this.outputs.length;++e)-1===n.indexOf(e)&&(t=>{let n,s,r;for(const i of t){if("string"==typeof i&&-1!==["accuracy","acc","crossentropy","ce"].indexOf(i)){const t=this.internalOutputShapes[e];let a;1===t[t.length-1]||this.lossFunctions[e]===pg?-1!==["accuracy","acc"].indexOf(i)?s=gg:-1!==["crossentropy","ce"].indexOf(i)&&(s=bg):this.lossFunctions[e]===hg?-1!==["accuracy","acc"].indexOf(i)?s=xg:-1!==["crossentropy","ce"].indexOf(i)&&(s=kg):-1!==["accuracy","acc"].indexOf(i)?s=yg:-1!==["crossentropy","ce"].indexOf(i)&&(s=wg),-1!==["accuracy","acc"].indexOf(i)?a="acc":-1!==["crossentropy","ce"].indexOf(i)&&(a="ce"),r=s,n=""+a}else{const e=Ig(i);r=e,n=""+Ng(i)}let t;wf(n,(()=>{t=r})),a(e,n,t)}})(s[e])})),this.collectedTrainableWeights=this.trainableWeights}checkTrainableWeightsConsistency(){null!=this.collectedTrainableWeights&&this.trainableWeights.length!==this.collectedTrainableWeights.length&&console.warn("Discrepancy between trainableweights and collected trainable weights. Did you set `model.trainable` without calling `model.compile()` afterwards?")}evaluate(e,t,n={}){const s=null==n.batchSize?32:n.batchSize;Pg(s);const a=this.standardizeUserDataXY(e,t,!0,s);try{const r=a[0].concat(a[1]);this.makeTestFunction();const i=this.testFunction;return Ud(this.testLoop(i,r,s,n.verbose,n.steps))}finally{Hg(a[0],e),Hg(a[1],t)}}async evaluateDataset(e,t){return this.makeTestFunction(),async function(e,t,n){const s=null!=(n=n||{}).batches,a=e.testFunction;let r=[];if(n.verbose>0)throw new Ld("Verbose mode is not implemented yet.");R(!s||n.batches>0&&Number.isInteger(n.batches),(()=>`Test loop expects \`batches\` to be a positive integer, but received ${JSON.stringify(n.batches)}`));const i="function"==typeof t.next?t:await t.iterator();let o=0,l=0;for(;!s||l<n.batches;){const t=await i.next();if(r=li((()=>{if(t.value){const{xs:n,ys:s}=Lg(e,t.value),i=n.concat(s),u=li((()=>a(i)));if(ui(i),0===l)for(let e=0;e<u.length;++e)r.push(di(0));const c=i[0].shape[0];for(let e=0;e<u.length;++e){const t=u[e],n=r[e];r[e]=li((()=>gi(r[e],xo(c,t)))),l>0&&ui(n)}ui(u),o+=c,++l}return r})),t.done){s&&console.warn(`Your dataset iterator ran out of data during evaluateDataset(). Interrupting evalution. Make sure that your dataset can generate at least \`batches\` batches (in this case, ${n.batches} batches). You may need to use the repeat() function when building your dataset.`);break}}for(let e=0;e<r.length;++e){const t=r[e];r[e]=no(r[e],o),ui(t)}return Ud(r)}(this,e,t)}checkNumSamples(e,t,n,s="steps"){let a;if(null!=n){if(a=null,null!=t)throw new Md(`If ${s} is set, batchSize must be null or undefined.Got batchSize = ${t}`)}else{if(null==e)throw new Md(`Either the input data should have a defined shape, or ${s} shoud be specified.`);a=Array.isArray(e)?e[0].shape[0]:e.shape[0]}return a}execute(e,t){if(Array.isArray(t)&&0===t.length)throw new Md("`outputs` is an empty Array, which is not allowed.");const n=Array.isArray(t),s=n?t:[t],a=this.retrieveSymbolicTensors(s),r=new Rm;if(e instanceof ua&&(e=[e]),Array.isArray(e)){if(e.length!==this.inputs.length)throw new Md(`The number of inputs provided (${e.length}) does not match the number of inputs of this model (${this.inputs.length}).`);for(let t=0;t<this.inputs.length;++t)r.add(this.inputs[t],e[t])}else for(const t of this.inputs){const n=e[t.name];if(null==n)throw new Md(`No value is provided for the model's input ${t.name}`);r.add(t,n)}const i=_m(a,r);return n?i:i[0]}retrieveSymbolicTensors(e){const t=Pd(null,e.length);let n=e.length;for(const s of this.layers){const a=Array.isArray(s.output)?s.output:[s.output],r=a.map((e=>e.name));for(let s=0;s<e.length;++s){const i=r.indexOf(e[s]);if(-1!==i&&(t[s]=a[i],n--),0===n)break}if(0===n)break}if(n>0){const n=[];throw t.forEach(((t,s)=>{null==t&&n.push(e[s])})),new Md(`Cannot find SymbolicTensors for output name(s): ${JSON.stringify(n)}`)}return t}predictLoop(e,t=32,n=!1){return li((()=>{const s=this.checkNumSamples(e);if(n)throw new Ld("Verbose predictLoop() is not implemented yet.");const a=Ug(s,t),r=this.outputs.map((e=>[]));for(let t=0;t<a.length;++t)li((()=>{const n=a[t][0],s=a[t][1],r=Wg(e,n,s),i=[];if(Array.isArray(r))for(let e=0;e<r.length;++e)i.push({key:this.inputs[e],value:r[e]});else i.push({key:this.inputs[0],value:r});const o=new Rm(i);return _m(this.outputs,o)})).forEach(((e,t)=>r[t].push(e)));return Ud(r.map((e=>Vi(e,0))))}))}predict(e,t={}){const n=Gg(e);Xg(n,this.inputNames,this.feedInputShapes,!1);try{const s=null==t.batchSize?32:t.batchSize;return Pg(s),this.predictLoop(n,s)}finally{Hg(n,e)}}predictOnBatch(e){Xg(e,this.inputNames,this.feedInputShapes,!0);const t=(Array.isArray(e)?e[0]:e).shape[0];return this.predictLoop(e,t)}standardizeUserDataXY(e,t,n=!0,s){if(null==this.optimizer_)throw new Od("You must compile a model before training/testing. Use LayersModel.compile(modelCompileArgs).");const a=[];for(let e=0;e<this.feedOutputShapes.length;++e){const t=this.feedOutputShapes[e];this.feedLossFns[e]===hg?a.push(t.slice(0,t.length-1).concat([1])):a.push(t)}if(function(e,t,n){const s=Jd(e.map((e=>e.shape[0])));s.sort();const a=Jd(t.map((e=>e.shape[0])));if(a.sort(),s.length>1)throw new Md(`All input Tensors (x) should have the same number of samples. Got array shapes: ${JSON.stringify(e.map((e=>e.shape)))}`);if(a.length>1)throw new Md(`All target Tensors (y) should have the same number of samples. Got array shapes: ${JSON.stringify(t.map((e=>e.shape)))}`);if(s.length>0&&a.length>0&&!M(s,a))throw new Md(`Input Tensors should have the same number of samples as target Tensors. Found ${s[0]} input sample(s) and ${a[0]} target sample(s).`)}(e=Kg(e,this.feedInputNames,this.feedInputShapes,!1,"input"),t=Kg(t,this.feedOutputNames,a,!1,"target")),function(e,t,n){const s=[og,pg,cg];for(let a=0;a<e.length;++a){const r=e[a],i=t[a],o=n[a];if(null!=i){if(i===cg&&1===r.shape[r.shape.length-1])throw new Md(`You are passing a target array of shape ${r.shape} while using a loss 'categorical_crossentropy'. 'categorical_crossentropy'expects targets to be binary matrices (1s and 0s) of shape [samples, classes].`);if(-1!==s.indexOf(i)){const e=r.shape.slice(1),t=o.slice(1);for(let n=0;n<e.length;++n){const s=e[n],a=t[n];if(null!=a&&s!==a)throw new Md(`A target Tensor with shape ${r.shape} was passed for an output of shape ${o}, while using a loss function that expects targets to have the same shape as the output.`)}}}}}(t,this.feedLossFns,this.feedOutputShapes),this.stateful&&null!=s&&s>0&&e[0].shape[0]%s!=0)throw new Md(`In a stateful network, you should only pass inputs with a number of samples that is divisible by the batch size ${s}. Found: ${e[0].shape[0]} sample(s).`);return[e,t]}async standardizeUserData(e,t,n,s,a=!0,r){const[i,o]=this.standardizeUserDataXY(e,t,a,r);if(null!=n)throw new Error("sample weight is not supported yet.");let l=null;if(null!=s){const e=_g(s,this.outputNames);l=[];for(let t=0;t<e.length;++t)l.push(await Og(o[t],null,e[t]))}return[i,o,l]}testLoop(e,t,n,s=0,a){return li((()=>{const r=this.checkNumSamples(t,n,a,"steps"),i=[];if(s>0)throw new Ld("Verbose mode is not implemented yet.");if(null!=a)throw new Ld("steps mode in testLoop() is not implemented yet");{const s=Ug(r,n),a=gl(Cf(0,r));for(let n=0;n<s.length;++n){const r=s[n][0],o=s[n][1],l=Df(a,r,o-r),u=Vg(t,l),c=e(u);if(0===n)for(let e=0;e<c.length;++e)i.push(di(0));for(let e=0;e<c.length;++e){const t=c[e];i[e]=gi(i[e],xo(o-r,t))}}for(let e=0;e<i.length;++e)i[e]=no(i[e],r)}return i}))}getDedupedMetricsNames(){const e=this.metricsNames,t=[];for(let n=0;n<e.length;++n){const s=e[n];let a=s;Vd(e,s)>1&&(a+=`_${Vd(e.slice(0,n),s)}`),t.push(a)}return t}makeTrainFunction(){return e=>{const t=[],n=e.slice(0,this.inputs.length),s=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),a=e.slice(this.inputs.length+this.outputs.length,this.inputs.length+2*this.outputs.length),r=[],i=this.collectedTrainableWeights.map((e=>e.read()));return[this.optimizer_.minimize((()=>{const e=[];for(let t=0;t<this.inputs.length;++t)e.push({key:this.inputs[t],value:n[t]});const i=new Rm(e),o=_m(this.outputs,i,{training:!0});let l;for(let e=0;e<this.lossFunctions.length;++e){let n=(0,this.lossFunctions[e])(s[e],o[e]);null!=a[e]&&(n=Mg(n,a[e]));const r=Co(n);t.push(r),l=0===e?n:gi(l,n)}for(let e=0;e<this.metricsTensors.length;++e){let n;if(this.outputs.length>1&&e<this.outputs.length)n=t[e];else{const t=this.metricsTensors[e][0],a=this.metricsTensors[e][1];n=Co(t(s[a],o[a]))}ci(n),r.push(n)}return l=Co(l),this.calculateLosses().forEach((e=>{l=gi(l,e)})),l}),!0,i)].concat(r)}}makeTestFunction(){this.testFunction=e=>li((()=>{const t=[];let n;const s=e.slice(0,this.inputs.length),a=e.slice(this.inputs.length,this.inputs.length+this.outputs.length),r=[];for(let e=0;e<this.inputs.length;++e)r.push({key:this.inputs[e],value:s[e]});const i=new Rm(r),o=_m(this.outputs,i);for(let e=0;e<this.lossFunctions.length;++e){const s=this.lossFunctions[e],r=Co(s(a[e],o[e]));n=0===e?r:gi(n,r),t.push(n)}for(let e=0;e<this.metricsTensors.length;++e){const n=this.metricsTensors[e][0],s=this.metricsTensors[e][1],r=Co(n(a[s],o[s]));t.push(r)}return t}))}async fit(e,t,n={}){return async function(e,t,n,s={}){if(e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");let a,r,i,o,l,u,c,h,p;e.isTraining=!0;try{const d=null==s.batchSize?32:s.batchSize;Pg(d);const f=!1,m=await e.standardizeUserData(t,n,s.sampleWeight,s.classWeight,f,d);a=m[0],r=m[1],p=m[2];let g,y=!1;if(null!=s.validationData&&s.validationData.length>0){if(y=!0,2!==s.validationData.length)throw 3===s.validationData.length?new Ld("validationData including sample weights is not supported yet."):new Md(`When passing validation data, it must contain 2 (valX, valY) or 3 (valX, valY, valSampleWeight) items; ${s.validationData} is invalid.`);l=s.validationData[0],u=s.validationData[1];const t=!0,n=await e.standardizeUserData(l,u,null,null,t,d);c=n[0],h=n[1],g=c.concat(h)}else if(null!=s.validationSplit&&s.validationSplit>0&&s.validationSplit<1){y=!0;const e=Math.floor(a[0].shape[0]*(1-s.validationSplit)),t=a[0].shape[0];c=Wg(a,e,t),i=a,a=Wg(a,0,e),h=Wg(r,e,t),o=r,r=Wg(r,0,e),g=c.concat(h)}else null!=s.validationSteps&&(y=!0);const b=a.concat(r).concat(p);e.checkTrainableWeightsConsistency();const x=e.makeTrainFunction(),w=e.getDedupedMetricsNames();let k,v;y?(e.makeTestFunction(),k=e.testFunction,v=w.slice().concat(w.map((e=>"val_"+e)))):(k=null,g=[],v=w.slice());const I=ng(s.callbacks,s.yieldEvery),N=await async function(e,t,n,s,a,r,i,o,l,u,c,h,p,d,f){null==a&&(a=32),null==r&&(r=1),null==c&&(c=!0),null==p&&(p=0);let m=!1;null!=l&&null!=u&&(m=!0);const g=e.checkNumSamples(n,a,d,"steps_per_epoch");let y;null!=g&&(y=Cf(0,g)),null==i&&(i=1);const{callbackList:b,history:x}=ag(o,i,r,p,g,d,a,m,h);b.setModel(e),e.history=x,await b.onTrainBegin(),e.stopTraining_=!1;for(let i=p;i<r;++i){await b.onEpochBegin(i);const r={};{if("batch"===c)throw new Ld("batch shuffling is not implemneted yet");c&&$(y);const i=gl(y),o=Ug(g,a);for(let c=0;c<o.length;++c){const h={};if(await b.onBatchBegin(c,h),li((()=>{const p=o[c][0],d=o[c][1],f=Df(i,p,d-p);h.batch=c,h.size=d-p;const g=Vg(n,f),y=t(g);for(let e=0;e<s.length;++e){const t=s[e],n=y[e];h[t]=n,ci(n)}if(c===o.length-1&&m){const t=e.testLoop(l,u,a);for(let e=0;e<s.length;++e){const n=s[e],a=t[e];ci(a),r["val_"+n]=a}}})),await b.onBatchEnd(c,h),Xm(h),e.stopTraining_)break}i.dispose()}if(await b.onEpochEnd(i,r),e.stopTraining_)break}return await b.onTrainEnd(),await e.history.syncData(),e.history}(e,x,b,w,d,s.epochs,s.verbose,I,k,g,s.shuffle,v,s.initialEpoch,null);return N}finally{e.isTraining=!1,Hg(a,t),Hg(r,n),Hg(i,t),Hg(o,n),Hg(c,l),Hg(h,u),null!=p&&ui(p)}}(this,e,t,n)}async fitDataset(e,t){return async function(e,t,n){const s=null!=n.batchesPerEpoch;if(R(null!=e.optimizer,(()=>"You must compile a model before training/testing. Use LayersModel.compile(modelCompileConfig).")),R(null!=n,(()=>"For fitDataset(), the 2nd argument (config) is required, but it is not provided in this call.")),R(null!=n.epochs&&n.epochs>0&&Number.isInteger(n.epochs),(()=>`For fitDataset(), config.epochs is expected to be a positive integer, but got ${n.epochs}`)),R(!s||n.batchesPerEpoch>0&&Number.isInteger(n.batchesPerEpoch),(()=>`For fitDataset(), config.batchesPerEpoch is expected to be a positive integer if specified, but got ${n.batchesPerEpoch}`)),R(null==n.validationSplit,(()=>"`validationSplit` is not supported by `fitDataset()`. Use validationData instead.")),e.isTraining)throw new Error("Cannot start training because another fit() call is ongoing.");e.isTraining=!0;try{const a=null!=n.validationData;let r,i;if(a)if(Bg(n.validationData))R(null==n.validationBatches||n.validationBatches>0&&Number.isInteger(n.validationBatches),(()=>`For fitDataset() with dataset-based validation, config.validationBatches is expected not to be provided, or to be a positive integer, but got ${n.validationBatches}`));else{const e=function(e){if(3===e.length)throw new Ld("Validation with sample weights is not implemented yet.");return{xs:e[0],ys:e[1]}}(n.validationData);r=e.xs,i=e.ys}const o=e.makeTrainFunction(),l=e.getDedupedMetricsNames();let u;u=a?l.slice().concat(l.map((e=>"val_"+e))):l.slice();const c=ng(n.callbacks,n.yieldEvery),h=null==n.verbose?1:n.verbose,{callbackList:p,history:d}=ag(c,h,n.epochs,null,null,function(e,t){let n=null;return null!=t.batchesPerEpoch?n=t.batchesPerEpoch:Number.isFinite(e.size)&&(n=e.size),n}(t,n),null,a,u);p.setModel(e),e.history=d,await p.onTrainBegin(),e.stopTraining_=!1;let f=null==n.initialEpoch?0:n.initialEpoch,m=await t.iterator();for(;f<n.epochs;){const u={};await p.onEpochBegin(f);let c=0,h=0;for(s||(m=await t.iterator());!s||c<n.batchesPerEpoch;){const t=await m.next();if(s&&t.done){console.warn(`You provided \`batchesPerEpoch\` as ${n.batchesPerEpoch}, but your dataset iterator ran out of data after ${c} batches; interrupting training. Make sure that your dataset can generate at least \`batchesPerEpoch * epochs\` batches (in this case, `+n.batchesPerEpoch*n.epochs+" batches). You may need to use the repeat() function when building your dataset.");break}if(null!=t.value){const{xs:s,ys:a}=Lg(e,t.value),r={};r.batch=h,r.size=s[0].shape[0],await p.onBatchBegin(h,r);const i=[];if(null!=n.classWeight){const t=_g(n.classWeight,e.outputNames);for(let e=0;e<t.length;++e)i.push(await Og(a[e],null,t[e]))}const u=s.concat(a).concat(i),d=o(u);ui(u);for(let e=0;e<l.length;++e){const t=l[e],n=d[e];r[t]=n,ci(n)}await p.onBatchEnd(h,r),Xm(r),h++,c++}if(s?c>=n.batchesPerEpoch:t.done){if(a){let t;t=Bg(n.validationData)?Gd(await e.evaluateDataset(n.validationData,{batches:n.validationBatches})):Gd(e.evaluate(r,i,{batchSize:null==n.validationBatchSize?32:n.validationBatchSize,verbose:0}));for(let n=0;n<e.metricsNames.length;++n)u[`val_${e.metricsNames[n]}`]=t[n]}break}if(e.stopTraining_)break}if(await p.onEpochEnd(f,u),f++,e.stopTraining_)break}return await p.onTrainEnd(),await e.history.syncData(),e.history}finally{e.isTraining=!1}}(this,e,t)}async trainOnBatch(e,t){const n=await this.standardizeUserData(e,t),s=n[0],a=n[1],r=this.makeTrainFunction()(s.concat(a)),i=[];for(const e of r){const t=await e.data();i.push(t[0])}return ui(r),Hg(n[0],e),Hg(n[1],t),Ud(i)}getNamedWeights(e){const t=[],n=null!=e&&e.trainableOnly,s=n?this.trainableWeights:this.weights,a=this.getWeights(n);for(let e=0;e<s.length;++e)n&&!s[e].trainable||t.push({name:s[e].originalName,tensor:a[e]});return t}set stopTraining(e){this.stopTraining_=e}get stopTraining(){return this.stopTraining_}get optimizer(){return this.optimizer_}set optimizer(e){this.optimizer_!==e&&(this.optimizer_=e,this.isOptimizerOwned=!1)}dispose(){const e=super.dispose();if(0===e.refCountAfterDispose&&null!=this.optimizer&&this.isOptimizerOwned){const t=oi().numTensors;this.optimizer_.dispose(),e.numDisposedVariables+=t-oi().numTensors}return e}getLossIdentifiers(){let e;if("string"==typeof this.loss)e=Hd(this.loss);else if(Array.isArray(this.loss)){for(const e of this.loss)if("string"!=typeof e)throw new Error("Serialization of non-string loss is not supported.");e=this.loss.map((e=>Hd(e)))}else{const t=Object.keys(this.loss);e={};const n=this.loss;for(const s of t){if("string"!=typeof n[s])throw new Error("Serialization of non-string loss is not supported.");e[s]=Hd(n[s])}}return e}getMetricIdentifiers(){if("string"==typeof this.metrics||"function"==typeof this.metrics)return[Hd(Ng(this.metrics))];if(Array.isArray(this.metrics))return this.metrics.map((e=>Hd(Ng(e))));{const e={};for(const t in this.metrics)e[t]=Hd(Ng(this.metrics[t]));return e}}getTrainingConfig(){return{loss:this.getLossIdentifiers(),metrics:this.getMetricIdentifiers(),optimizer_config:{class_name:this.optimizer.getClassName(),config:this.optimizer.getConfig()}}}loadTrainingConfig(e){if(null!=e.weighted_metrics)throw new Error("Loading weight_metrics is not supported yet.");if(null!=e.loss_weights)throw new Error("Loading loss_weights is not supported yet.");if(null!=e.sample_weight_mode)throw new Error("Loading sample_weight_mode is not supported yet.");const t=rg(Rg(e.optimizer_config));let n,s;if("string"==typeof e.loss)n=jd(e.loss);else if(Array.isArray(e.loss))n=e.loss.map((e=>jd(e)));else if(null!=e.loss){n={};for(const t in e.loss)n[t]=jd(e.loss[t])}if(Array.isArray(e.metrics))s=e.metrics.map((e=>jd(e)));else if(null!=e.metrics){s={};for(const t in e.metrics)s[t]=jd(e.metrics[t])}this.compile({loss:n,metrics:s,optimizer:t})}async save(e,t){if("string"==typeof e){const t=Ja(e);if(0===t.length)throw new Md(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Md(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Md("LayersModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");const n=await Ua(this.getNamedWeights(t)),s={modelTopology:this.toJSON(null,!1),format:"layers-model",generatedBy:"TensorFlow.js tfjs-layers v3.18.0",convertedBy:null};if(null!=t&&t.includeOptimizer&&null!=this.optimizer){s.trainingConfig=this.getTrainingConfig();const e="optimizer",{data:t,specs:a}=await Ua(await this.optimizer.getWeights(),e);n.specs.push(...a),n.data=qa([n.data,t])}if(null!=this.userDefinedMetadata){const e=!0;Sg(this.userDefinedMetadata,this.name,e),s.userDefinedMetadata=this.userDefinedMetadata}return s.weightData=n.data,s.weightSpecs=n.specs,e.save(s)}setUserDefinedMetadata(e){Sg(e,this.name),this.userDefinedMetadata=e}getUserDefinedMetadata(){return this.userDefinedMetadata}}Yg.className="Model",ri(Yg);class Zg extends Yg{}Zg.className="Functional",ri(Zg);class Jg extends Yg{constructor(e){if(super({inputs:[],outputs:[]}),e=e||{},this.trainable=!0,this.built=!1,this.name=null!=e.name?e.name:uf("sequential_"),null!=e.layers)for(const t of e.layers)this.add(t)}checkShape(e){if(e.inboundNodes[0].outputTensors[0].shape.some((e=>e<0)))throw new Md(`Negative dimension size caused by adding layer ${e.name} with input shape [${e.inboundNodes[0].inputTensors[0].shape}]`)}add(e){const t=e instanceof Jg||e instanceof Yg;let n;if(t){if(n=e,1!==n.outputs.length)throw new Md("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");if(1!==n.inputs.length)throw new Md("All layers in a Sequential model should have a single input tensor. For multi-input layers, use the functional API.")}if(0===this.outputs.length){if(0===e.inboundNodes.length){if(null==e.batchInputShape)throw new Md("The first layer in a Sequential model must get an `inputShape` or `batchInputShape` argument.");const t=function(e){if(null==e.batchShape&&null==e.shape)throw new Error("Please provide to Input either a `shape` or a `batchShape` argument. Note that `shape` does not include the batch dimension.");if(null!=e.batchShape&&null!=e.shape)throw new Md("Please provide either a `shape` or `batchShape` argument to Input, but not both.");let t=e.batchShape;null!=e.shape&&null==t&&(t=[null].concat(e.shape));let n=e.dtype;return null==n&&(n="float32"),new Am({batchInputShape:t,name:e.name,dtype:n,sparse:e.sparse}).inboundNodes[0].outputTensors[0]}({batchShape:e.batchInputShape,dtype:e.dtype,name:e.name+"_input"});e.apply(t)}if(t)this.outputs=n.outputs,this.inputs=n.inputs;else{if(1!==e.inboundNodes.length)throw new Md(`A layer added to a Sequential model must not already be connected somewhere else. LayersModel received layer ${e.name} which has ${e.inboundNodes.length} pre-existing inbound connections.`);if(1!==e.inboundNodes[0].outputTensors.length)throw new Md("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[e.inboundNodes[0].outputTensors[0]],this.inputs=Em(this.outputs[0])}this.inboundNodes=[],new Tm({outboundLayer:this,inboundLayers:[],nodeIndices:[],tensorIndices:[],inputTensors:this.inputs,outputTensors:this.outputs,inputMasks:Pd(null,this.inputs.length),outputMasks:[null],inputShapes:this.inputs.map((e=>e.shape)),outputShapes:this.outputs[0].shape})}else{const t=e.apply(this.outputs[0]);if(Array.isArray(t))throw new TypeError("All layers in a Sequential model should have a single output tensor. For multi-output layers, use the functional API.");this.checkShape(e),this.outputs=[t],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}this.layers.push(e),this.built=!1}pop(){if(0===this.layers.length)throw new TypeError("There are no layers in the model.");if(this.layers.pop(),0===this.layers.length)this.outputs=[],this.inboundNodes=[],this.outboundNodes=[];else{const e=this.layers.length-1;this.layers[e].outboundNodes=[],this.outputs=[this.layers[e].output],this.inboundNodes[0].outputTensors=this.outputs,this.inboundNodes[0].outputShapes=[this.outputs[0].shape]}}call(e,t){return null==this.model&&this.build(),this.model.call(e,t)}build(e){if(bm(e),0===this.inputs.length||0===this.outputs.length)throw new TypeError("Sequential model cannot be built: model is empty. Add some layers first.");this.model=new Yg({inputs:this.inputs,outputs:this.outputs[0],name:this.name+"_model"}),this.model.trainable=this.trainable,this.supportsMasking=this.model.supportsMasking,this.inputLayers=this.model.inputLayers,this.inputLayersNodeIndices=this.model.inputLayersNodeIndices,this.inputLayersTensorIndices=this.model.inputLayersTensorIndices,this.outputLayers=this.model.outputLayers,this.outputLayersNodeIndices=this.model.outputLayersNodeIndices,this.outputLayersTensorIndices=this.model.outputLayersTensorIndices,this.nodesByDepth=this.model.nodesByDepth,this.containerNodes=this.model.containerNodes,this.outputNames=this.model.outputNames,this.inputNames=this.model.inputNames,this.built=!0}countParams(){return this.built||this.build(),super.countParams()}summary(e,t,n=console.log){this.built||this.build(),super.summary(e,t,n)}setWeights(e){null==this.model&&this.build(),this.model.setWeights(e)}evaluate(e,t,n={}){if(!this.built)throw new Od("The model needs to be compiled before being used.");return this.model.evaluate(e,t,n)}async evaluateDataset(e,t){if(!this.built)throw new Od("The model needs to be compiled before being used.");return this.model.evaluateDataset(e,t)}predict(e,t={}){return null==this.model&&this.build(),this.model.predict(e,t)}predictOnBatch(e){return null==this.model&&this.build(),this.model.predictOnBatch(e)}compile(e){this.build(),this.model.compile(e),this.optimizer_=this.model.optimizer,this.isOptimizerOwned=this.model.isOptimizerOwned,this.loss=this.model.loss,this.metrics=this.model.metrics,this.metricsTensors=this.model.metricsTensors,this.metricsNames=this.model.metricsNames}get optimizer(){return null==this.model?void 0:this.model.optimizer}set optimizer(e){this.model.optimizer=e}async fit(e,t,n={}){if(!this.built)throw new Od("The model needs to be compiled before being used.");return this.model.fit(e,t,n)}async fitDataset(e,t){if(!this.built)throw new Od("The model needs to be compiled before being used.");return this.model.fitDataset(e,t)}async trainOnBatch(e,t){return this.model.trainOnBatch(e,t)}static fromConfig(e,t,n={},s=!1){let a,r={};if(t instanceof Array){if(null==t[0].className||"Merge"===t[0].className)throw new Md("Legacy serialization format not supported yet.");a=t}else R(null!=t.layers,(()=>"When the config data for a Sequential model is not an Array, it must be an Object that contains the 'layers' field.")),a=t.layers,delete t.layers,r=t;const i=new e(r);if(!(i instanceof Jg))throw new Ld(`Sequential.fromConfig called on non-Sequential input: ${i}`);for(const e of a){const t=rg(e,void 0,s);s&&t.setFastWeightInitDuringBuild(!0),i.add(t)}return i}set stopTraining(e){if(null==this.model)throw new Md("Cannot set the stopTraining property of a sequential model before it is compiled.");this.model.stopTraining=e}get stopTraining(){if(null==this.model)throw new Md("Cannot get the stopTraining property of a sequential model before it is compiled.");return this.model.stopTraining}getConfig(){const e=[];for(const t of this.layers){const n={};n.className=t.getClassName(),n.config=t.getConfig(),e.push(n)}return{name:this.name,layers:e}}}Jg.className="Sequential",ri(Jg);class Qg extends si{getConfig(){return{}}}class ey extends Qg{apply(e,t=1){return function(e,t=1){if(1!==t)throw new Ld(`Support for alpha values other than 1 (${t}) is not implemented yet.`);return so(e)}(e,t)}}ey.className="elu",ri(ey);class ty extends Qg{apply(e){return tl(e)}}ty.className="selu",ri(ty);class ny extends Qg{apply(e){return Qo(e)}}ny.className="relu",ri(ny);class sy extends Qg{apply(e){return li((()=>Eo(6,Qo(e))))}}sy.className="relu6",ri(sy);class ay extends Qg{apply(e){return e}}ay.className="linear",ri(ay);class ry extends Qg{apply(e){return sl(e)}}ry.className="sigmoid",ri(ry);class iy extends Qg{apply(e){return function(e){return li((()=>{const t=gi(.5,xo(.2,e));return Wi(t,0,1)}))}(e)}}iy.className="hardSigmoid",ri(iy);class oy extends Qg{apply(e){return cl(e)}}oy.className="softplus",ri(oy);class ly extends Qg{apply(e){return function(e){return li((()=>no(e,gi(mi(e),1))))}(e)}}ly.className="softsign",ri(ly);class uy extends Qg{apply(e){return ml(e)}}uy.className="tanh",ri(uy);class cy extends Qg{apply(e,t=-1){return ul(e,t)}}cy.className="softmax",ri(cy);class hy extends Qg{apply(e,t=-1){return vo(e,t)}}hy.className="logSoftmax",ri(hy);class py extends Qg{apply(e,t=1){return li((()=>xo(sl(xo(e,t)),e)))}}py.className="swish",ri(py);class dy extends Qg{apply(e){return li((()=>xo(e,ml(cl(e)))))}}function fy(e){return e.getClassName()}function my(e,t={}){return Yd(e,ai.getMap().classNameMap,t,"activation")}function gy(e){if(null==e){return my({className:"linear",config:{}})}if("string"==typeof e){const t={};return t.className=e,t.config={},my(t)}return e instanceof Qg?e:my(e)}dy.className="mish",ri(dy);class yy extends si{}class by extends yy{constructor(e){super(),function(e){if(null!=e&&"object"!=typeof e)throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an object, but received: ${e}`)}(e),this.l1=null==e||null==e.l1?.01:e.l1,this.l2=null==e||null==e.l2?.01:e.l2,this.hasL1=0!==this.l1,this.hasL2=0!==this.l2}apply(e){return li((()=>{let t=Uo([1]);return this.hasL1&&(t=gi(t,ko(xo(this.l1,mi(e))))),this.hasL2&&(t=gi(t,ko(xo(this.l2,Vf(e))))),_i(t,[])}))}getConfig(){return{l1:this.l1,l2:this.l2}}static fromConfig(e,t){return new e({l1:t.l1,l2:t.l2})}}by.className="L1L2",ri(by);const xy={l1l2:"L1L2"};function wy(e){return Kd(e)}function ky(e,t={}){return Yd(e,ai.getMap().classNameMap,t,"regularizer")}function vy(e){return null==e?null:"string"==typeof e?ky({className:e in xy?xy[e]:e,config:{}}):e instanceof yy?e:ky(e)}class Iy extends Cm{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,null!=e&&(this.maxValue=e.maxValue)}call(e,t){e=ym(e);let n=Qo(e);return null!=this.maxValue&&(n=Wi(n,0,this.maxValue)),n}computeOutputShape(e){return e}getConfig(){const e={maxValue:this.maxValue},t=super.getConfig();return Object.assign(e,t),e}}Iy.className="ReLU",ri(Iy);class Ny extends Cm{constructor(e){super(null==e?{}:e),this.DEFAULT_ALPHA=.3,null==e&&(e={}),this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=ym(e);return mo(n,this.alpha)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}Ny.className="LeakyReLU",ri(Ny);class Sy extends Cm{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA_INITIALIZER="zeros",null==e&&(e={}),this.supportsMasking=!0,this.alphaInitializer=fm(e.alphaInitializer||this.DEFAULT_ALPHA_INITIALIZER),this.alphaRegularizer=vy(e.alphaRegularizer),this.alphaConstraint=qm(e.alphaConstraint),null==e.sharedAxes)this.sharedAxes=null;else if(Array.isArray(e.sharedAxes))this.sharedAxes=e.sharedAxes;else{if("number"!=typeof e.sharedAxes)throw new Md(`Expected sharedAxes to be a number or an array of numbers, but got ${e.sharedAxes}`);this.sharedAxes=[e.sharedAxes]}}build(e){const t=(e=bm(e)).slice(1);if(null!=this.sharedAxes)for(const e of this.sharedAxes)t[e-1]=1;this.alpha=this.addWeight("alpha",t,"float32",this.alphaInitializer,this.alphaRegularizer,!0,this.alphaConstraint);const n={};if(null!=this.sharedAxes)for(let t=1;t<e.length;++t)n[t]=e[t];this.inputSpec=[new Im({ndim:e.length,axes:n})],this.built=!0}call(e,t){return e=ym(e),qo(e,this.alpha.read())}getConfig(){const e={alphaInitializer:dm(this.alphaInitializer),alphaRegularizer:wy(this.alphaRegularizer),alphaConstraint:Hm(this.alphaConstraint),sharedAxes:this.sharedAxes},t=super.getConfig();return Object.assign(e,t),e}}Sy.className="PReLU",ri(Sy);class Ty extends Cm{constructor(e){if(super(null==e?{}:e),this.DEFAULT_ALPHA=1,null==e&&(e={}),null!=e.alpha&&e.alpha!==this.DEFAULT_ALPHA)throw new Ld(`Non-default alpha value (${e.alpha}) is not supported by the ELU layer yet.`);this.alpha=null==e.alpha?this.DEFAULT_ALPHA:e.alpha}call(e,t){const n=ym(e);return so(n)}computeOutputShape(e){return e}getConfig(){const e={alpha:this.alpha},t=super.getConfig();return Object.assign(e,t),e}}Ty.className="ELU",ri(Ty);class $y extends Cm{constructor(e){super(null==e?{}:e),this.DEFAULT_THETA=1,null==e&&(e={}),this.theta=null==e.theta?this.DEFAULT_THETA:e.theta}call(e,t){const n=ym(e);return xo(n,Nr(po(n,this.theta),"float32"))}computeOutputShape(e){return e}getConfig(){const e={theta:this.theta},t=super.getConfig();return Object.assign(e,t),e}}$y.className="ThresholdedReLU",ri($y);class Cy extends Cm{constructor(e){super(null==e?{}:e),this.DEFAULT_AXIS=1,null==e&&(e={}),this.softmax=(new cy).apply,this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis}call(e,t){const n=ym(e);return this.softmax(n,this.axis)}computeOutputShape(e){return e}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function Ey(e,t,n){if("number"==typeof e)return Pd(e,t);if(e.length!==t)throw new Md(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${e.length} elements.`);for(let a=0;a<t;++a){const r=e[a];if((s=r)!==parseInt(s.toString(),10))throw new Md(`The ${n} argument must be an integer or tuple of ${t} integers. Received: ${JSON.stringify(e)} including a non-integer number ${r}`)}return e;var s}function Ay(e,t,n,s,a=1){if(null==e)return e;let r;return r="same"===n?e:e-(t+(t-1)*(a-1))+1,Math.floor((r+s-1)/s)}function Ry(e,t,n,s){if(null==e)return null;if("valid"===s)e=e*t+$f([n-t,0]);else{if("same"!==s)throw new Md(`Unsupport padding mode: ${s}.`);e*=t}return e}function Fy(e,t){return li((()=>(gf(t),"channelsFirst"===t?Nl(e,[0,2,3,1]):e)))}function Dy(e,t){return li((()=>(gf(t),"channelsFirst"===t?Nl(e,[0,2,3,4,1]):e)))}function _y(e,t,n,s=[1,1],a="valid",r,i,o=null){return li((()=>{if(null==r&&(r="channelsLast"),gf(r),3!==e.rank&&4!==e.rank)throw new Md(`conv2dWithBiasActivation expects input to be of rank 3 or 4, but received ${e.rank}.`);if(3!==t.rank&&4!==t.rank)throw new Md(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, but received ${e.rank}.`);let l=Fy(e,r);if("causal"===a)throw new Ld("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");return l=Ll({x:l,filter:t,strides:s,pad:"same"===a?"same":"valid",dilations:i,dataFormat:"NHWC",bias:n,activation:o}),"channelsFirst"===r&&(l=Nl(l,[0,3,1,2])),l}))}Cy.className="Softmax",ri(Cy);class Oy extends Cm{constructor(e,t){if(super(t),this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",Oy.verifyArgs(t),this.rank=e,nf(this.rank,"rank"),1!==this.rank&&2!==this.rank&&3!==this.rank)throw new Ld(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is not implemented yet.`);if(this.kernelSize=Ey(t.kernelSize,e,"kernelSize"),this.strides=Ey(null==t.strides?1:t.strides,e,"strides"),this.padding=null==t.padding?"valid":t.padding,yf(this.padding),this.dataFormat=null==t.dataFormat?"channelsLast":t.dataFormat,gf(this.dataFormat),this.activation=gy(t.activation),this.useBias=null==t.useBias||t.useBias,this.biasInitializer=fm(t.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.biasConstraint=qm(t.biasConstraint),this.biasRegularizer=vy(t.biasRegularizer),this.activityRegularizer=vy(t.activityRegularizer),this.dilationRate=Ey(null==t.dilationRate?1:t.dilationRate,e,"dilationRate"),1===this.rank&&Array.isArray(this.dilationRate)&&1!==this.dilationRate.length)throw new Md(`dilationRate must be a number or an array of a single number for 1D convolution, but received ${JSON.stringify(this.dilationRate)}`);if(2===this.rank){if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate];else if(2!==this.dilationRate.length)throw new Md(`dilationRate must be a number or array of two numbers for 2D convolution, but received ${JSON.stringify(this.dilationRate)}`)}else if(3===this.rank)if("number"==typeof this.dilationRate)this.dilationRate=[this.dilationRate,this.dilationRate,this.dilationRate];else if(3!==this.dilationRate.length)throw new Md(`dilationRate must be a number or array of three numbers for 3D convolution, but received ${JSON.stringify(this.dilationRate)}`)}static verifyArgs(e){if(Wd("kernelSize"in e,"required key 'kernelSize' not in config"),"number"!=typeof e.kernelSize&&!tf(e.kernelSize,"number",1,3))throw new Md(`BaseConv expects config.kernelSize to be number or number[] with length 1, 2, or 3, but received ${JSON.stringify(e.kernelSize)}.`)}getConfig(){const e={kernelSize:this.kernelSize,strides:this.strides,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,activation:fy(this.activation),useBias:this.useBias,biasInitializer:dm(this.biasInitializer),biasRegularizer:wy(this.biasRegularizer),activityRegularizer:wy(this.activityRegularizer),biasConstraint:Hm(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}class My extends Oy{constructor(e,t){super(e,t),this.kernel=null,My.verifyArgs(t),this.filters=t.filters,nf(this.filters,"filters"),this.kernelInitializer=fm(t.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.kernelConstraint=qm(t.kernelConstraint),this.kernelRegularizer=vy(t.kernelRegularizer)}build(e){e=bm(e);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Md(`The channel dimension of the input should be defined. Found ${e[t]}`);const n=e[t],s=this.kernelSize.concat([n,this.filters]);this.kernel=this.addWeight("kernel",s,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[{ndim:this.rank+2,axes:{[t]:n}}],this.built=!0}call(e,t){return li((()=>{let t;e=ym(e);const n=null==this.bias?null:this.bias.read(),s=af(this.activation.getClassName());if(null!=s&&2===this.rank)t=_y(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate,s);else{if(1===this.rank)t=function(e,t,n,s=1,a="valid",r,i=1){return li((()=>{if(null==r&&(r="channelsLast"),gf(r),3!==e.shape.length)throw new Md(`The input of a conv1dWithBias operation should be 3, but is ${e.shape.length} instead.`);if(3!==t.shape.length)throw new Md(`The kernel for a conv1dWithBias operation should be 3, but is ${t.shape.length} instead`);if(null!=n&&1!==n.shape.length)throw new Md(`The bias for a conv1dWithBias operation should be 1, but is ${t.shape.length} instead`);if("channelsFirst"===r&&(e=Nl(e,[0,2,1])),"causal"===a)throw new Ld("The support for CAUSAL padding mode in conv1dWithBias is not implemented yet.");let o=Ki(e,t,s,"same"===a?"same":"valid","NWC",i);return null!=n&&(o=Gf(o,n)),o}))}(e,this.kernel.read(),n,this.strides[0],this.padding,this.dataFormat,this.dilationRate[0]);else if(2===this.rank)t=_y(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate);else{if(3!==this.rank)throw new Ld("convolutions greater than 3D are not implemented yet.");t=function(e,t,n,s=[1,1,1],a="valid",r,i){return li((()=>{if(null==r&&(r="channelsLast"),gf(r),4!==e.rank&&5!==e.rank)throw new Md(`conv3dWithBias expects input to be of rank 4 or 5, but received ${e.rank}.`);if(4!==t.rank&&5!==t.rank)throw new Md(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ${e.rank}.`);let o=Dy(e,r);if("causal"===a)throw new Ld("The support for CAUSAL padding mode in conv3dWithBias is not implemented yet.");return o=Zi(o,t,s,"same"===a?"same":"valid","NDHWC",i),null!=n&&(o=Gf(o,n)),"channelsFirst"===r&&(o=Nl(o,[0,4,1,2,3])),o}))}(e,this.kernel.read(),n,this.strides,this.padding,this.dataFormat,this.dilationRate)}null!=this.activation&&(t=this.activation.apply(t))}return t}))}computeOutputShape(e){e=bm(e);const t=[],n="channelsLast"===this.dataFormat?e.slice(1,e.length-1):e.slice(2);for(let e=0;e<n.length;++e){const s=Ay(n[e],this.kernelSize[e],this.padding,this.strides[e],"number"==typeof this.dilationRate?this.dilationRate:this.dilationRate[e]);t.push(s)}let s=[e[0]];return"channelsLast"===this.dataFormat?(s=s.concat(t),s.push(this.filters)):(s.push(this.filters),s=s.concat(t)),s}getConfig(){const e={filters:this.filters,kernelInitializer:dm(this.kernelInitializer),kernelRegularizer:wy(this.kernelRegularizer),kernelConstraint:Hm(this.kernelConstraint)},t=super.getConfig();return Object.assign(e,t),e}static verifyArgs(e){if(!("filters"in e)||"number"!=typeof e.filters||e.filters<1)throw new Md(`Convolution layer expected config.filters to be a 'number' > 0 but got ${JSON.stringify(e.filters)}`)}}class Ly extends My{constructor(e){super(2,e),Ly.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!tf(e.kernelSize,"number",1,2))throw new Md(`Conv2D expects config.kernelSize to be number or number[] with length 1 or 2, but received ${JSON.stringify(e.kernelSize)}.`)}}Ly.className="Conv2D",ri(Ly);class zy extends My{constructor(e){super(3,e),zy.verifyArgs(e)}getConfig(){const e=super.getConfig();return delete e.rank,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&(!Array.isArray(e.kernelSize)||1!==e.kernelSize.length&&3!==e.kernelSize.length))throw new Md(`Conv3D expects config.kernelSize to be number or [number, number, number], but received ${JSON.stringify(e.kernelSize)}.`)}}zy.className="Conv3D",ri(zy);class By extends Ly{constructor(e){if(super(e),this.inputSpec=[new Im({ndim:4})],"same"!==this.padding&&"valid"!==this.padding)throw new Md(`Conv2DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(4!==(e=bm(e)).length)throw new Md("Input should have rank 4; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Md("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Im({ndim:4,axes:{[t]:n}})],this.built=!0}call(e,t){return li((()=>{let t=ym(e);if(4!==t.shape.length)throw new Md(`Conv2DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let a,r;"channelsFirst"===this.dataFormat?(a=2,r=3):(a=1,r=2);const i=n[a],o=n[r],l=this.kernelSize[0],u=this.kernelSize[1],c=this.strides[0],h=this.strides[1],p=[s,Ry(i,c,l,this.padding),Ry(o,h,u,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Nl(t,[0,2,3,1]));let d=Yi(t,this.kernel.read(),p,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(d=Nl(d,[0,3,1,2])),null!=this.bias&&(d=Gf(d,this.bias.read(),this.dataFormat)),null!=this.activation&&(d=this.activation.apply(d)),d}))}computeOutputShape(e){const t=(e=bm(e)).slice();let n,s,a;"channelsFirst"===this.dataFormat?(n=1,s=2,a=3):(n=3,s=1,a=2);const r=this.kernelSize[0],i=this.kernelSize[1],o=this.strides[0],l=this.strides[1];return t[n]=this.filters,t[s]=Ry(t[s],o,r,this.padding),t[a]=Ry(t[a],l,i,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}By.className="Conv2DTranspose",ri(By);class Py extends zy{constructor(e){if(super(e),this.inputSpec=[new Im({ndim:5})],"same"!==this.padding&&"valid"!==this.padding)throw new Md(`Conv3DTranspose currently supports only padding modes 'same' and 'valid', but received padding mode ${this.padding}`)}build(e){if(5!==(e=bm(e)).length)throw new Md("Input should have rank 5; Received input shape: "+JSON.stringify(e));const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t])throw new Md("The channel dimension of the inputs should be defined. Found `None`.");const n=e[t],s=this.kernelSize.concat([this.filters,n]);this.kernel=this.addWeight("kernel",s,"float32",this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint)),this.inputSpec=[new Im({ndim:5,axes:{[t]:n}})],this.built=!0}call(e,t){return li((()=>{let t=ym(e);if(5!==t.shape.length)throw new Md(`Conv3DTranspose.call() expects input tensor to be rank-4, but received a tensor of rank-${t.shape.length}`);const n=t.shape,s=n[0];let a,r,i;"channelsFirst"===this.dataFormat?(i=2,a=3,r=4):(i=1,a=2,r=3);const o=n[i],l=n[a],u=n[r],c=this.kernelSize[0],h=this.kernelSize[1],p=this.kernelSize[2],d=this.strides[0],f=this.strides[1],m=this.strides[2],g=[s,Ry(o,d,c,this.padding),Ry(l,f,h,this.padding),Ry(u,m,p,this.padding),this.filters];"channelsLast"!==this.dataFormat&&(t=Nl(t,[0,2,3,4,1]));let y=Qi(t,this.kernel.read(),g,this.strides,this.padding);return"channelsLast"!==this.dataFormat&&(y=Nl(y,[0,4,1,2,3])),null!==this.bias&&(y=Gf(y,this.bias.read(),this.dataFormat)),null!==this.activation&&(y=this.activation.apply(y)),y}))}computeOutputShape(e){const t=(e=bm(e)).slice();let n,s,a,r;"channelsFirst"===this.dataFormat?(n=1,s=2,a=3,r=4):(n=4,s=1,a=2,r=3);const i=this.kernelSize[0],o=this.kernelSize[1],l=this.kernelSize[2],u=this.strides[0],c=this.strides[1],h=this.strides[2];return t[n]=this.filters,t[s]=Ry(t[s],u,i,this.padding),t[a]=Ry(t[a],c,o,this.padding),t[r]=Ry(t[r],h,l,this.padding),t}getConfig(){const e=super.getConfig();return delete e.dilationRate,e}}Py.className="Conv3DTranspose",ri(Py);class Wy extends My{constructor(e,t){if(super(e,t),this.DEFAULT_DEPTHWISE_INITIALIZER="glorotUniform",this.DEFAULT_POINTWISE_INITIALIZER="glorotUniform",this.depthwiseKernel=null,this.pointwiseKernel=null,null==t.filters)throw new Md("The `filters` configuration field is required by SeparableConv, but is unspecified.");if(null!=t.kernelInitializer||null!=t.kernelRegularizer||null!=t.kernelConstraint)throw new Md("Fields kernelInitializer, kernelRegularizer and kernelConstraint are invalid for SeparableConv2D. Use depthwiseInitializer, depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, pointwiseRegularizer and pointwiseConstraint instead.");if(null!=t.padding&&"same"!==t.padding&&"valid"!==t.padding)throw new Md(`SeparableConv${this.rank}D supports only padding modes: 'same' and 'valid', but received ${JSON.stringify(t.padding)}`);this.depthMultiplier=null==t.depthMultiplier?1:t.depthMultiplier,this.depthwiseInitializer=fm(t.depthwiseInitializer||this.DEFAULT_DEPTHWISE_INITIALIZER),this.depthwiseRegularizer=vy(t.depthwiseRegularizer),this.depthwiseConstraint=qm(t.depthwiseConstraint),this.pointwiseInitializer=fm(t.depthwiseInitializer||this.DEFAULT_POINTWISE_INITIALIZER),this.pointwiseRegularizer=vy(t.pointwiseRegularizer),this.pointwiseConstraint=qm(t.pointwiseConstraint)}build(e){if((e=bm(e)).length<this.rank+2)throw new Md(`Inputs to SeparableConv${this.rank}D should have rank ${this.rank+2}, but received input shape: ${JSON.stringify(e)}`);const t="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[t]||e[t]<0)throw new Md(`The channel dimension of the inputs should be defined, but found ${JSON.stringify(e[t])}`);const n=e[t],s=this.kernelSize.concat([n,this.depthMultiplier]),a=[];for(let e=0;e<this.rank;++e)a.push(1);a.push(n*this.depthMultiplier,this.filters);const r=!0;this.depthwiseKernel=this.addWeight("depthwise_kernel",s,"float32",this.depthwiseInitializer,this.depthwiseRegularizer,r,this.depthwiseConstraint),this.pointwiseKernel=this.addWeight("pointwise_kernel",a,"float32",this.pointwiseInitializer,this.pointwiseRegularizer,r,this.pointwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[this.filters],"float32",this.biasInitializer,this.biasRegularizer,r,this.biasConstraint):this.bias=null,this.inputSpec=[new Im({ndim:this.rank+2,axes:{[t]:n}})],this.built=!0}call(e,t){return li((()=>{let t;if(e=ym(e),1===this.rank)throw new Ld("1D separable convolution is not implemented yet.");return 2===this.rank&&("channelsFirst"===this.dataFormat&&(e=Nl(e,[0,2,3,1])),t=nl(e,this.depthwiseKernel.read(),this.pointwiseKernel.read(),this.strides,this.padding,this.dilationRate,"NHWC")),this.useBias&&(t=Gf(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),"channelsFirst"===this.dataFormat&&(t=Nl(t,[0,3,1,2])),t}))}getConfig(){const e=super.getConfig();return delete e.rank,delete e.kernelInitializer,delete e.kernelRegularizer,delete e.kernelConstraint,e.depthwiseInitializer=dm(this.depthwiseInitializer),e.pointwiseInitializer=dm(this.pointwiseInitializer),e.depthwiseRegularizer=wy(this.depthwiseRegularizer),e.pointwiseRegularizer=wy(this.pointwiseRegularizer),e.depthwiseConstraint=Hm(this.depthwiseConstraint),e.pointwiseConstraint=Hm(this.pointwiseConstraint),e}}Wy.className="SeparableConv";class Vy extends Wy{constructor(e){super(2,e)}}Vy.className="SeparableConv2D",ri(Vy);class Uy extends My{constructor(e){super(1,e),Uy.verifyArgs(e),this.inputSpec=[{ndim:3}]}getConfig(){const e=super.getConfig();return delete e.rank,delete e.dataFormat,e}static verifyArgs(e){if("number"!=typeof e.kernelSize&&!tf(e.kernelSize,"number",1,1))throw new Md(`Conv1D expects config.kernelSize to be number or number[] with length 1, but received ${JSON.stringify(e.kernelSize)}.`)}}Uy.className="Conv1D",ri(Uy);class Gy extends Cm{constructor(e){super(e),"number"==typeof e.cropping?this.cropping=[[e.cropping,e.cropping],[e.cropping,e.cropping]]:"number"==typeof e.cropping[0]?this.cropping=[[e.cropping[0],e.cropping[0]],[e.cropping[1],e.cropping[1]]]:this.cropping=e.cropping,this.dataFormat=void 0===e.dataFormat?"channelsLast":e.dataFormat,this.inputSpec=[{ndim:4}]}computeOutputShape(e){return"channelsFirst"===this.dataFormat?[e[0],e[1],e[2]-this.cropping[0][0]-this.cropping[0][1],e[3]-this.cropping[1][0]-this.cropping[1][1]]:[e[0],e[1]-this.cropping[0][0]-this.cropping[0][1],e[2]-this.cropping[1][0]-this.cropping[1][1],e[3]]}call(e,t){return li((()=>{if(e=ym(e),"channelsLast"===this.dataFormat){const t=Of(e,this.cropping[0][0],e.shape[1]-this.cropping[0][0]-this.cropping[0][1],2);return Of(t,this.cropping[1][0],e.shape[2]-this.cropping[1][1]-this.cropping[1][0],3)}{const t=Of(e,this.cropping[0][0],e.shape[2]-this.cropping[0][0]-this.cropping[0][1],3);return Of(t,this.cropping[1][0],e.shape[3]-this.cropping[1][1]-this.cropping[1][0],4)}}))}getConfig(){const e={cropping:this.cropping,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}Gy.className="Cropping2D",ri(Gy);class Hy extends Cm{constructor(e){var t;super(e),this.DEFAULT_SIZE=[2,2],this.inputSpec=[{ndim:4}],this.size=null==e.size?this.DEFAULT_SIZE:e.size,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,gf(this.dataFormat),this.interpolation=null==e.interpolation?"nearest":e.interpolation,t=this.interpolation,ef(hf,"InterpolationFormat",t)}computeOutputShape(e){if("channelsFirst"===this.dataFormat){const t=null==e[2]?null:this.size[0]*e[2],n=null==e[3]?null:this.size[1]*e[3];return[e[0],e[1],t,n]}{const t=null==e[1]?null:this.size[0]*e[1],n=null==e[2]?null:this.size[1]*e[2];return[e[0],t,n,e[3]]}}call(e,t){return li((()=>{let t=ym(e);const n=t.shape;if("channelsFirst"===this.dataFormat){t=Nl(t,[0,2,3,1]);const e=this.size[0]*n[2],s=this.size[1]*n[3],a="nearest"===this.interpolation?Mu.resizeNearestNeighbor(t,[e,s]):Mu.resizeBilinear(t,[e,s]);return Nl(a,[0,3,1,2])}{const e=this.size[0]*n[1],s=this.size[1]*n[2];return"nearest"===this.interpolation?Mu.resizeNearestNeighbor(t,[e,s]):Mu.resizeBilinear(t,[e,s])}}))}getConfig(){const e={size:this.size,dataFormat:this.dataFormat,interpolation:this.interpolation},t=super.getConfig();return Object.assign(e,t),e}}Hy.className="UpSampling2D",ri(Hy);class jy extends Oy{constructor(e){super(2,e),this.depthwiseKernel=null,this.depthMultiplier=null==e.depthMultiplier?1:e.depthMultiplier,this.depthwiseInitializer=fm(e.depthwiseInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.depthwiseConstraint=qm(e.depthwiseConstraint),this.depthwiseRegularizer=vy(e.depthwiseRegularizer)}build(e){if((e=bm(e)).length<4)throw new Md(`Inputs to DepthwiseConv2D should have rank 4. Received input shape: ${JSON.stringify(e)}.`);const t="channelsFirst"===this.dataFormat?1:3;if(null==e[t]||e[t]<0)throw new Md(`The channel dimension of the inputs to DepthwiseConv2D should be defined, but is not (${e[t]}).`);const n=e[t],s=[this.kernelSize[0],this.kernelSize[1],n,this.depthMultiplier];this.depthwiseKernel=this.addWeight("depthwise_kernel",s,null,this.depthwiseInitializer,this.depthwiseRegularizer,!0,this.depthwiseConstraint),this.useBias?this.bias=this.addWeight("bias",[n*this.depthMultiplier],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return li((()=>{let t=function(e,t,n=[1,1],s="valid",a,r){return li((()=>{null==a&&(a="channelsLast"),gf(a);let i=Fy(e,a);if(4!==e.rank)throw new Md(`Input for depthwiseConv2d is required to be 4-D, but is instead ${e.rank}-D`);if(4!==t.rank)throw new Md(`depthwiseKernel is required to be 4-D, but is instead ${t.rank}-D`);return i=eo(i,t,n,"same"===s?"same":"valid","NHWC",r),"channelsFirst"===a&&(i=Nl(i,[0,3,1,2])),i}))}(e=ym(e),this.depthwiseKernel.read(),this.strides,this.padding,this.dataFormat,null);return this.useBias&&(t=Gf(t,this.bias.read(),this.dataFormat)),null!=this.activation&&(t=this.activation.apply(t)),t}))}computeOutputShape(e){e=bm(e);const t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[1]*this.depthMultiplier:e[3]*this.depthMultiplier,a=Ay(t,this.kernelSize[0],this.padding,this.strides[0]),r=Ay(n,this.kernelSize[1],this.padding,this.strides[1]);return"channelsFirst"===this.dataFormat?[e[0],s,a,r]:[e[0],a,r,s]}getConfig(){const e=super.getConfig();return e.depthMultiplier=this.depthMultiplier,e.depthwiseInitializer=dm(this.depthwiseInitializer),e.depthwiseRegularizer=wy(this.depthwiseRegularizer),e.depthwiseConstraint=Hm(this.depthwiseRegularizer),e}}function qy(e,t,n,s){if(Array.isArray(e)){if(null!=t||null!=n)throw new Md("When inputs is an array, neither initialState or constants should be provided");null!=s&&(n=e.slice(e.length-s,e.length),e=e.slice(0,e.length-s)),e.length>1&&(t=e.slice(1,e.length)),e=e[0]}function a(e){return null==e||Array.isArray(e)?e:[e]}return{inputs:e,initialState:t=a(t),constants:n=a(n)}}function Ky(e,t,n,s=!1,a,r,i=!1,o=!1){return li((()=>{const l=t.shape.length;if(l<3)throw new Md(`Input should be at least 3D, but is ${l}D.`);const u=[1,0].concat(Cf(2,l));if(t=Nl(t,u),null!=r)throw new Ld("The rnn() functoin of the deeplearn.js backend does not support constants yet.");i&&console.warn("Backend rnn(): the unroll = true option is not applicable to the imperative deeplearn.js backend."),null!=a&&((a=Nr(Nr(a,"bool"),"float32")).rank===l-1&&(a=io(a,-1)),a=Nl(a,u)),s&&(t=el(t,0),null!=a&&(a=el(a,0)));const c=[];let h,p=n;const d=t.shape[0],f=bl(t);let m,g;null!=a&&(m=bl(a));for(let t=0;t<d;++t){const n=f[t],s=li((()=>e(n,p)));if(null==a)h=s[0],p=s[1];else{const e=li((()=>{const e=m[t],n=wo(Ho(e),e);return{output:gi(xo(s[0],e),xo(p[0],n)),newStates:p.map(((t,a)=>gi(xo(s[1][a],e),xo(t,n))))}}));h=e.output,p=e.newStates}o&&c.push(h)}return o&&(g=fl(c,1)),[h,g,p]}))}jy.className="DepthwiseConv2D",ri(jy);class Xy extends Cm{constructor(e){let t;if(super(e),null==e.cell)throw new Md("cell property is missing for the constructor of RNN.");if(t=Array.isArray(e.cell)?new sb({cells:e.cell}):e.cell,null==t.stateSize)throw new Md("The RNN cell should have an attribute `stateSize` (tuple of integers, one integer per RNN state).");this.cell=t,this.returnSequences=null!=e.returnSequences&&e.returnSequences,this.returnState=null!=e.returnState&&e.returnState,this.goBackwards=null!=e.goBackwards&&e.goBackwards,this._stateful=null!=e.stateful&&e.stateful,this.unroll=null!=e.unroll&&e.unroll,this.supportsMasking=!0,this.inputSpec=[new Im({ndim:3})],this.stateSpec=null,this.states_=null,this.numConstants=null,this.keptStates=[]}getStates(){return null==this.states_?Cf(0,Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1).map((e=>null)):this.states_}setStates(e){this.states_=e}computeOutputShape(e){mm(e)&&(e=e[0]);let t=this.cell.stateSize;Array.isArray(t)||(t=[t]);const n=t[0];let s;if(s=this.returnSequences?[e[0],e[1],n]:[e[0],n],this.returnState){const n=[];for(const s of t)n.push([e[0],s]);return[s].concat(n)}return s}computeMask(e,t){return li((()=>{Array.isArray(t)&&(t=t[0]);const e=this.returnSequences?t:null;if(this.returnState){const t=this.states.map((e=>null));return[e].concat(t)}return e}))}get states(){if(null==this.states_){const e=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1,t=[];for(let n=0;n<e;++n)t.push(null);return t}return this.states_}set states(e){this.states_=e}build(e){if(null!=this.numConstants)throw new Ld("Constants support is not implemented in RNN yet.");mm(e)&&(e=e[0]);const t=this.stateful?e[0]:null,n=e.slice(2);this.inputSpec[0]=new Im({shape:[t,null,...n]});const s=[e[0]].concat(e.slice(2));let a;if(this.cell.build(s),a=Array.isArray(this.cell.stateSize)?this.cell.stateSize:[this.cell.stateSize],null!=this.stateSpec){if(!M(this.stateSpec.map((e=>e.shape[e.shape.length-1])),a))throw new Md(`An initialState was passed that is not compatible with cell.stateSize. Received stateSpec=${this.stateSpec}; However cell.stateSize is ${this.cell.stateSize}`)}else this.stateSpec=a.map((e=>new Im({shape:[null,e]})));this.stateful&&this.resetStates()}resetStates(e,t=!1){li((()=>{if(!this.stateful)throw new _d("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape[0];if(null==n)throw new Md("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.states_)Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>Uo([n,e]))):this.states_=[Uo([n,this.cell.stateSize])];else if(null==e)ui(this.states_),null!=this.keptStates&&(ui(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((e=>Uo([n,e]))):this.states_[0]=Uo([n,this.cell.stateSize]);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Md(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);!0===t?this.keptStates.push(this.states_.slice()):ui(this.states_);for(let t=0;t<this.states_.length;++t){const s=e[t],a=Array.isArray(this.cell.stateSize)?this.cell.stateSize[t]:this.cell.stateSize,r=[n,a];if(!M(s.shape,r))throw new Md(`State ${t} is incompatible with layer ${this.name}: expected shape=${r}, received shape=${s.shape}`);this.states_[t]=s}}this.states_=this.states_.map((e=>ci(e.clone())))}))}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const a=qy(e,n,s,this.numConstants);e=a.inputs,n=a.initialState,s=a.constants;let r=[],i=[];if(null!=n){t.initialState=n,r=r.concat(n),this.stateSpec=[];for(const e of n)this.stateSpec.push(new Im({shape:e.shape}));i=i.concat(this.stateSpec)}if(null!=s&&(t.constants=s,r=r.concat(s),this.numConstants=s.length),r[0]instanceof Nm){const n=[e].concat(r),s=this.inputSpec.concat(i),a=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=a,o}return super.apply(e,t)}call(e,t){return li((()=>{const n=null==t?null:t.mask,s=null==t?null:t.training;let a=null==t?null:t.initialState;e=ym(e),null==a&&(a=this.stateful?this.states_:this.getInitialState(e));const r=Array.isArray(this.cell.stateSize)?this.cell.stateSize.length:1;if(a.length!==r)throw new Md(`RNN Layer has ${r} state(s) but was passed ${a.length} initial state(s).`);this.unroll&&console.warn("Ignoring unroll = true for RNN layer, due to imperative backend.");const i={training:s},o=Ky(((e,t)=>{const n=this.cell.call([e].concat(t),i);return[n[0],n.slice(1)]}),e,a,this.goBackwards,n,null,this.unroll,this.returnSequences),l=o[0],u=o[1],c=o[2];this.stateful&&this.resetStates(c,s);const h=this.returnSequences?u:l;return this.returnState?[h].concat(c):h}))}getInitialState(e){return li((()=>{let t=Uo(e.shape);return t=ko(t,[1,2]),t=Ff(t),Array.isArray(this.cell.stateSize)?this.cell.stateSize.map((e=>e>1?zf(t,[1,e]):t)):this.cell.stateSize>1?[zf(t,[1,this.cell.stateSize])]:[t]}))}get trainableWeights(){return this.trainable?this.cell.trainableWeights:[]}get nonTrainableWeights(){return this.trainable?this.cell.nonTrainableWeights:this.cell.weights}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.cell&&this.cell.setFastWeightInitDuringBuild(e)}getConfig(){const e=super.getConfig(),t={returnSequences:this.returnSequences,returnState:this.returnState,goBackwards:this.goBackwards,stateful:this.stateful,unroll:this.unroll};null!=this.numConstants&&(t.numConstants=this.numConstants);const n=this.cell.getConfig();return this.getClassName()===Xy.className&&(t.cell={className:this.cell.getClassName(),config:n}),Object.assign({},n,e,t)}static fromConfig(e,t,n={}){const s=rg(t.cell,n);return new e(Object.assign(t,{cell:s}))}}Xy.className="RNN",ri(Xy);class Yy extends Cm{}class Zy extends Yy{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,nf(this.units,"units"),this.activation=gy(null==e.activation?this.DEFAULT_ACTIVATION:e.activation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=fm(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=fm(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=fm(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=vy(e.kernelRegularizer),this.recurrentRegularizer=vy(e.recurrentRegularizer),this.biasRegularizer=vy(e.biasRegularizer),this.kernelConstraint=qm(e.kernelConstraint),this.recurrentConstraint=qm(e.recurrentConstraint),this.biasConstraint=qm(e.biasConstraint),this.dropout=Tf([1,$f([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Tf([1,$f([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){e=bm(e),this.kernel=this.addWeight("kernel",[e[e.length-1],this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return li((()=>{if(2!==e.length)throw new Md(`SimpleRNNCell expects 2 input Tensors, got ${e.length}.`);let n=e[1];e=e[0];const s=null!=t.training&&t.training;let a;0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=ab({ones:()=>Ho(e),rate:this.dropout,training:s,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=ab({ones:()=>Ho(n),rate:this.recurrentDropout,training:s,dropoutFunc:this.dropoutFunc}));const r=this.dropoutMask,i=this.recurrentDropoutMask;a=Pf(null!=r?xo(e,r):e,this.kernel.read()),null!=this.bias&&(a=Gf(a,this.bias.read())),null!=i&&(n=xo(n,i));let o=gi(a,Pf(n,this.recurrentKernel.read()));return null!=this.activation&&(o=this.activation.apply(o)),[o,o]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:fy(this.activation),useBias:this.useBias,kernelInitializer:dm(this.kernelInitializer),recurrentInitializer:dm(this.recurrentInitializer),biasInitializer:dm(this.biasInitializer),kernelRegularizer:wy(this.kernelRegularizer),recurrentRegularizer:wy(this.recurrentRegularizer),biasRegularizer:wy(this.biasRegularizer),activityRegularizer:wy(this.activityRegularizer),kernelConstraint:Hm(this.kernelConstraint),recurrentConstraint:Hm(this.recurrentConstraint),biasConstraint:Hm(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout};return Object.assign({},e,t)}}Zy.className="SimpleRNNCell",ri(Zy);class Jy extends Xy{constructor(e){e.cell=new Zy(e),super(e)}call(e,t){return li((()=>{null!=this.cell.dropoutMask&&(ui(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ui(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:a})}))}static fromConfig(e,t){return new e(t)}}Jy.className="SimpleRNN",ri(Jy);class Qy extends Yy{constructor(e){if(super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",e.resetAfter)throw new Md("GRUCell does not support reset_after parameter set to true.");this.units=e.units,nf(this.units,"units"),this.activation=gy(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=gy(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=fm(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=fm(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=fm(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelRegularizer=vy(e.kernelRegularizer),this.recurrentRegularizer=vy(e.recurrentRegularizer),this.biasRegularizer=vy(e.biasRegularizer),this.kernelConstraint=qm(e.kernelConstraint),this.recurrentConstraint=qm(e.recurrentConstraint),this.biasConstraint=qm(e.biasConstraint),this.dropout=Tf([1,$f([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Tf([1,$f([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=this.units,this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){const t=(e=bm(e))[e.length-1];this.kernel=this.addWeight("kernel",[t,3*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,3*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias?this.bias=this.addWeight("bias",[3*this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint):this.bias=null,this.built=!0}call(e,t){return li((()=>{if(2!==e.length)throw new Md(`GRUCell expects 2 input Tensors (inputs, h, c), got ${e.length}.`);const n=null!=t.training&&t.training;let s=e[1];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=ab({ones:()=>Ho(e),rate:this.dropout,training:n,count:3,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=ab({ones:()=>Ho(s),rate:this.recurrentDropout,training:n,count:3,dropoutFunc:this.dropoutFunc}));const a=this.dropoutMask,r=this.recurrentDropoutMask;let i,o,l;0<this.dropout&&this.dropout<1&&(e=xo(e,a[0]));let u=Pf(e,this.kernel.read());this.useBias&&(u=Gf(u,this.bias.read())),0<this.recurrentDropout&&this.recurrentDropout<1&&(s=xo(s,r[0]));const c=this.recurrentKernel.read(),[h,p]=hl(c,[2*this.units,this.units],c.rank-1),d=Pf(s,h),[f,m,g]=hl(u,3,u.rank-1),[y,b]=hl(d,2,d.rank-1);i=this.recurrentActivation.apply(gi(f,y)),o=this.recurrentActivation.apply(gi(m,b));const x=Pf(xo(o,s),p);l=this.activation.apply(gi(g,x));const w=gi(xo(i,s),xo(gi(1,Po(i)),l));return[w,w]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:fy(this.activation),recurrentActivation:fy(this.recurrentActivation),useBias:this.useBias,kernelInitializer:dm(this.kernelInitializer),recurrentInitializer:dm(this.recurrentInitializer),biasInitializer:dm(this.biasInitializer),kernelRegularizer:wy(this.kernelRegularizer),recurrentRegularizer:wy(this.recurrentRegularizer),biasRegularizer:wy(this.biasRegularizer),activityRegularizer:wy(this.activityRegularizer),kernelConstraint:Hm(this.kernelConstraint),recurrentConstraint:Hm(this.recurrentConstraint),biasConstraint:Hm(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation,resetAfter:!1};return Object.assign({},e,t)}}Qy.className="GRUCell",ri(Qy);class eb extends Xy{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new Qy(e),super(e)}call(e,t){return li((()=>{null!=this.cell.dropoutMask&&(ui(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ui(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:a})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}eb.className="GRU",ri(eb);class tb extends Yy{constructor(e){super(e),this.DEFAULT_ACTIVATION="tanh",this.DEFAULT_RECURRENT_ACTIVATION="hardSigmoid",this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_RECURRENT_INITIALIZER="orthogonal",this.DEFAULT_BIAS_INITIALIZER="zeros",this.units=e.units,nf(this.units,"units"),this.activation=gy(void 0===e.activation?this.DEFAULT_ACTIVATION:e.activation),this.recurrentActivation=gy(void 0===e.recurrentActivation?this.DEFAULT_RECURRENT_ACTIVATION:e.recurrentActivation),this.useBias=null==e.useBias||e.useBias,this.kernelInitializer=fm(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.recurrentInitializer=fm(e.recurrentInitializer||this.DEFAULT_RECURRENT_INITIALIZER),this.biasInitializer=fm(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.unitForgetBias=e.unitForgetBias,this.kernelRegularizer=vy(e.kernelRegularizer),this.recurrentRegularizer=vy(e.recurrentRegularizer),this.biasRegularizer=vy(e.biasRegularizer),this.kernelConstraint=qm(e.kernelConstraint),this.recurrentConstraint=qm(e.recurrentConstraint),this.biasConstraint=qm(e.biasConstraint),this.dropout=Tf([1,$f([0,null==e.dropout?0:e.dropout])]),this.recurrentDropout=Tf([1,$f([0,null==e.recurrentDropout?0:e.recurrentDropout])]),this.dropoutFunc=e.dropoutFunc,this.implementation=e.implementation,this.stateSize=[this.units,this.units],this.dropoutMask=null,this.recurrentDropoutMask=null}build(e){var t;const n=(e=bm(e))[e.length-1];let s;if(this.kernel=this.addWeight("kernel",[n,4*this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.recurrentKernel=this.addWeight("recurrent_kernel",[this.units,4*this.units],null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){if(this.unitForgetBias){const e=this.biasInitializer,n=this.units;s=new((t=class extends Xf{apply(t,s){const a=e.apply([n]),r=(new Zf).apply([n]),i=e.apply([2*n]);return Lf(Lf(a,r),i)}}).className="CustomInit",t)}else s=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.units],null,s,this.biasRegularizer,!0,this.biasConstraint)}else this.bias=null;this.built=!0}call(e,t){return li((()=>{const n=null!=t.training&&t.training;if(3!==e.length)throw new Md(`LSTMCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);let s=e[1];const a=e[2];e=e[0],0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=ab({ones:()=>Ho(e),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc})),0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=ab({ones:()=>Ho(s),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const r=this.dropoutMask,i=this.recurrentDropoutMask;let o,l,u,c;0<this.dropout&&this.dropout<1&&(e=xo(e,r[0]));let h=Pf(e,this.kernel.read());0<this.recurrentDropout&&this.recurrentDropout<1&&(s=xo(s,i[0])),h=gi(h,Pf(s,this.recurrentKernel.read())),this.useBias&&(h=Gf(h,this.bias.read()));const[p,d,f,m]=hl(h,4,h.rank-1);o=this.recurrentActivation.apply(p),l=this.recurrentActivation.apply(d),u=gi(xo(l,a),xo(o,this.activation.apply(f))),c=this.recurrentActivation.apply(m);const g=xo(c,this.activation.apply(u));return[g,g,u]}))}getConfig(){const e=super.getConfig(),t={units:this.units,activation:fy(this.activation),recurrentActivation:fy(this.recurrentActivation),useBias:this.useBias,kernelInitializer:dm(this.kernelInitializer),recurrentInitializer:dm(this.recurrentInitializer),biasInitializer:dm(this.biasInitializer),unitForgetBias:this.unitForgetBias,kernelRegularizer:wy(this.kernelRegularizer),recurrentRegularizer:wy(this.recurrentRegularizer),biasRegularizer:wy(this.biasRegularizer),activityRegularizer:wy(this.activityRegularizer),kernelConstraint:Hm(this.kernelConstraint),recurrentConstraint:Hm(this.recurrentConstraint),biasConstraint:Hm(this.biasConstraint),dropout:this.dropout,recurrentDropout:this.recurrentDropout,implementation:this.implementation};return Object.assign({},e,t)}}tb.className="LSTMCell",ri(tb);class nb extends Xy{constructor(e){0===e.implementation&&console.warn("`implementation=0` has been deprecated, and now defaults to `implementation=1`. Please update your layer call."),e.cell=new tb(e),super(e)}call(e,t){return li((()=>{null!=this.cell.dropoutMask&&(ui(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ui(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null);const n=null==t?null:t.mask,s=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:a})}))}static fromConfig(e,t){return 0===t.implmentation&&(t.implementation=1),new e(t)}}nb.className="LSTM",ri(nb);class sb extends Yy{constructor(e){super(e),this.cells=e.cells}get stateSize(){const e=[];for(const t of this.cells.slice().reverse())Array.isArray(t.stateSize)?e.push(...t.stateSize):e.push(t.stateSize);return e}call(e,t){return li((()=>{let n=e.slice(1);const s=[];for(const e of this.cells.slice().reverse())Array.isArray(e.stateSize)?s.push(n.splice(0,e.stateSize.length)):s.push(n.splice(0,1));s.reverse();const a=[];let r;for(let i=0;i<this.cells.length;++i){const o=this.cells[i];n=s[i],r=0===i?[e[0]].concat(n):[r[0]].concat(n),r=o.call(r,t),a.push(r.slice(1))}n=[];for(const e of a.slice().reverse())n.push(...e);return[r[0]].concat(n)}))}build(e){let t;mm(e)&&(e=e[0]),this.cells.forEach(((n,s)=>{wf(`RNNCell_${s}`,(()=>{n.build(e),t=Array.isArray(n.stateSize)?n.stateSize[0]:n.stateSize,e=[e[0],t]}))})),this.built=!0}getConfig(){const e=super.getConfig(),t={cells:this.cells.map((e=>({className:e.getClassName(),config:e.getConfig()})))};return Object.assign({},e,t)}static fromConfig(e,t,n={}){const s=[];for(const e of t.cells)s.push(rg(e,n));return new e({cells:s})}get trainableWeights(){if(!this.trainable)return[];const e=[];for(const t of this.cells)e.push(...t.trainableWeights);return e}get nonTrainableWeights(){const e=[];for(const t of this.cells)e.push(...t.nonTrainableWeights);if(!this.trainable){const t=[];for(const e of this.cells)t.push(...e.trainableWeights);return t.concat(e)}return e}getWeights(){const e=[];for(const t of this.cells)e.push(...t.weights);return km(e)}setWeights(e){const t=[];for(const n of this.cells){const s=n.weights.length,a=e.splice(s);for(let e=0;e<n.weights.length;++e)t.push([n.weights[e],a[e]])}vm(t)}}function ab(e){const{ones:t,rate:n,training:s=!1,count:a=1,dropoutFunc:r}=e,i=()=>null!=r?r(t(),n):Hf(t(),n),o=()=>jf(i,t,s);return!a||a<=1?ci(o().clone()):Array(a).fill(void 0).map(o).map((e=>ci(e.clone())))}sb.className="StackedRNNCells",ri(sb);var rb,ib;class ob extends Xy{constructor(e){if(e.unroll)throw new Ld("Unrolling is not possible with convolutional RNNs.");if(Array.isArray(e.cell))throw new Ld("It is not possible at the moment to stack convolutional cells.");super(e),this.inputSpec=[new Im({ndim:5})]}call(e,t){return li((()=>{if(null!=this.cell.dropoutMask&&(ui(this.cell.dropoutMask),this.cell.dropoutMask=null),null!=this.cell.recurrentDropoutMask&&(ui(this.cell.recurrentDropoutMask),this.cell.recurrentDropoutMask=null),t&&t.constants)throw new Md("ConvRNN2D cell does not support constants");const n=null==t?null:t.mask,s=null==t?null:t.training,a=null==t?null:t.initialState;return super.call(e,{mask:n,training:s,initialState:a})}))}computeOutputShape(e){let t=this.computeSingleOutputShape(e);return this.returnSequences||(t=[t[0],...t.slice(2)]),this.returnState&&(t=[t,...Array(2).fill([e[0],...t.slice(-3)])]),t}getInitialState(e){return li((()=>{const{stateSize:t}=this.cell,n=e.shape,s=this.computeSingleOutputShape(n),a=Uo([s[0],...s.slice(2)]);return Array.isArray(t)?Array(t.length).fill(a):[a]}))}resetStates(e,t=!1){li((()=>{if(!this.stateful)throw new _d("Cannot call resetStates() on an RNN Layer that is not stateful.");const n=this.inputSpec[0].shape,s=this.computeSingleOutputShape(n),a=[s[0],...s.slice(2)];if(null==n[0])throw new Md("If an RNN is stateful, it needs to know its batch size. Specify the batch size of your input tensors: \n- If using a Sequential model, specify the batch size by passing a `batchInputShape` option to your first layer.\n- If using the functional API, specify the batch size by passing a `batchShape` option to your Input layer.");if(null==this.getStates())Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Uo(a))):this.states_=[Uo(a)];else if(null==e)ui(this.states_),null!=this.keptStates&&(ui(this.keptStates),this.keptStates=[]),Array.isArray(this.cell.stateSize)?this.states_=this.cell.stateSize.map((()=>Uo(a))):this.states_[0]=Uo(a);else{if(Array.isArray(e)||(e=[e]),e.length!==this.states_.length)throw new Md(`Layer ${this.name} expects ${this.states_.length} state(s), but it received ${e.length} state value(s). Input received: ${e}`);t?this.keptStates.push(this.states_.slice()):ui(this.states_);for(let t=0;t<this.states_.length;++t){const n=e[t],s=a;if(!M(n.shape,s))throw new Md(`State ${t} is incompatible with layer ${this.name}: expected shape=${s}, received shape=${n.shape}`);this.states_[t]=n}}this.states_=this.states_.map((e=>ci(e.clone())))}))}computeSingleOutputShape(e){const{dataFormat:t,filters:n,kernelSize:s,padding:a,strides:r,dilationRate:i}=this.cell,o="channelsFirst"===t,l=e[o?3:2],u=e[o?4:3],c=Ay(l,s[0],a,r[0],i[0]),h=Ay(u,s[1],a,r[1],i[1]);return[...e.slice(0,2),...o?[n,c,h]:[c,h,n]]}}ob.className="ConvRNN2D";class lb extends tb{constructor(e){const{filters:t,kernelSize:n,strides:s,padding:a,dataFormat:r,dilationRate:i}=e;super(Object.assign({},e,{units:t})),this.filters=t,nf(this.filters,"filters"),this.kernelSize=Ey(n,2,"kernelSize"),this.kernelSize.forEach((e=>nf(e,"kernelSize"))),this.strides=Ey(s||1,2,"strides"),this.strides.forEach((e=>nf(e,"strides"))),this.padding=a||"valid",yf(this.padding),this.dataFormat=r||"channelsLast",gf(this.dataFormat),this.dilationRate=Ey(i||1,2,"dilationRate"),this.dilationRate.forEach((e=>nf(e,"dilationRate")))}build(e){var t;e=bm(e);const n="channelsFirst"===this.dataFormat?1:e.length-1;if(null==e[n])throw new Md(`The channel dimension of the input should be defined. Found ${e[n]}`);const s=e[n],a=this.kernelSize.concat([s,4*this.filters]);this.kernel=this.addWeight("kernel",a,null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint);const r=this.kernelSize.concat([this.filters,4*this.filters]);if(this.recurrentKernel=this.addWeight("recurrent_kernel",r,null,this.recurrentInitializer,this.recurrentRegularizer,!0,this.recurrentConstraint),this.useBias){let e;if(this.unitForgetBias){const n=this.biasInitializer,s=this.filters;e=new((t=class extends Xf{apply(e,t){return Mf([n.apply([s]),Go([s]),n.apply([2*s])])}}).className="CustomInit",t)}else e=this.biasInitializer;this.bias=this.addWeight("bias",[4*this.filters],null,e,this.biasRegularizer,!0,this.biasConstraint)}this.built=!0}call(e,t){return li((()=>{if(3!==e.length)throw new Md(`ConvLSTM2DCell expects 3 input Tensors (inputs, h, c), got ${e.length}.`);const n=t.training||!1,s=e[0],a=e[1],r=e[2];0<this.dropout&&this.dropout<1&&null==this.dropoutMask&&(this.dropoutMask=ab({ones:()=>Ho(s),rate:this.dropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const i=this.dropoutMask,o=(e,t,n)=>t&&t[n]?xo(t[n],e):e;let l=o(s,i,0),u=o(s,i,1),c=o(s,i,2),h=o(s,i,3);0<this.recurrentDropout&&this.recurrentDropout<1&&null==this.recurrentDropoutMask&&(this.recurrentDropoutMask=ab({ones:()=>Ho(a),rate:this.recurrentDropout,training:n,count:4,dropoutFunc:this.dropoutFunc}));const p=this.recurrentDropoutMask;let d=o(a,p,0),f=o(a,p,1),m=o(a,p,2),g=o(a,p,3);const[y,b,x,w]=hl(this.kernel.read(),4,3),[k,v,I,N]=this.useBias?hl(this.bias.read(),4):[null,null,null,null];l=this.inputConv(l,y,k,this.padding),u=this.inputConv(u,b,v,this.padding),c=this.inputConv(c,x,I,this.padding),h=this.inputConv(h,w,N,this.padding);const[S,T,$,C]=hl(this.recurrentKernel.read(),4,3);d=this.recurrentConv(d,S),f=this.recurrentConv(f,T),m=this.recurrentConv(m,$),g=this.recurrentConv(g,C);const E=this.recurrentActivation.apply(gi(l,d)),A=this.recurrentActivation.apply(gi(u,f)),R=gi(xo(A,r),xo(E,this.activation.apply(gi(c,m)))),F=xo(this.recurrentActivation.apply(gi(h,g)),this.activation.apply(R));return[F,F,R]}))}getConfig(){const e=super.getConfig(),{units:t}=e,n=function(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(s=Object.getOwnPropertySymbols(e);a<s.length;a++)t.indexOf(s[a])<0&&Object.prototype.propertyIsEnumerable.call(e,s[a])&&(n[s[a]]=e[s[a]])}return n}(e,["units"]),s={filters:this.filters,kernelSize:this.kernelSize,padding:this.padding,dataFormat:this.dataFormat,dilationRate:this.dilationRate,strides:this.strides};return Object.assign({},n,s)}inputConv(e,t,n,s){const a=qi(e,t,this.strides,s||"valid","channelsFirst"===this.dataFormat?"NCHW":"NHWC",this.dilationRate);return n?Gf(a,n,this.dataFormat):a}recurrentConv(e,t){return qi(e,t,1,"same","channelsFirst"===this.dataFormat?"NCHW":"NHWC")}}lb.className="ConvLSTM2DCell",ri(lb);class ub extends ob{constructor(e){const t=new lb(e);super(Object.assign({},e,{cell:t}))}static fromConfig(e,t){return new e(t)}}ub.className="ConvLSTM2D",ri(ub);class cb extends Cm{constructor(e){super(e),this.rate=Math.max(Math.min(e.rate,1),0),this.noiseShape=e.noiseShape,this.seed=e.seed,this.supportsMasking=!0}getNoiseShape(e){if(null==this.noiseShape)return this.noiseShape;const t=e.shape,n=[];for(let e=0;e<this.noiseShape.length;++e)n.push(null==this.noiseShape[e]?t[e]:this.noiseShape[e]);return n}call(e,t){return li((()=>{this.invokeCallHook(e,t);const n=ym(e);if(0<this.rate&&this.rate<1){const e=null!=t.training&&t.training,s=this.getNoiseShape(n);return jf((()=>Hf(n,this.rate,s,this.seed)),(()=>n),e)}return e}))}getConfig(){const e={rate:this.rate,noiseShape:this.noiseShape,seed:this.seed},t=super.getConfig();return Object.assign(e,t),e}dispose(){return super.dispose()}}cb.className="Dropout",ri(cb);class hb extends cb{constructor(e){super(e),this.inputSpec=[{ndim:3}]}getNoiseShape(e){const t=e.shape;return[t[0],1,t[2]]}}hb.className="SpatialDropout1D",ri(hb);class pb extends Cm{constructor(e){if(super(e),this.activation=null,this.useBias=!0,this.kernel=null,this.bias=null,this.DEFAULT_KERNEL_INITIALIZER="glorotNormal",this.DEFAULT_BIAS_INITIALIZER="zeros",null==e.batchInputShape&&null==e.inputShape&&null!=e.inputDim){let t=null;null!=e.batchSize&&(t=e.batchSize),this.batchInputShape=[t,e.inputDim]}this.units=e.units,nf(this.units,"units"),this.activation=gy(e.activation),null!=e.useBias&&(this.useBias=e.useBias),this.kernelInitializer=fm(e.kernelInitializer||this.DEFAULT_KERNEL_INITIALIZER),this.biasInitializer=fm(e.biasInitializer||this.DEFAULT_BIAS_INITIALIZER),this.kernelConstraint=qm(e.kernelConstraint),this.biasConstraint=qm(e.biasConstraint),this.kernelRegularizer=vy(e.kernelRegularizer),this.biasRegularizer=vy(e.biasRegularizer),this.activityRegularizer=vy(e.activityRegularizer),this.supportsMasking=!0,this.inputSpec=[{minNDim:2}]}build(e){const t=(e=bm(e))[e.length-1];null==this.kernel&&(this.kernel=this.addWeight("kernel",[t,this.units],null,this.kernelInitializer,this.kernelRegularizer,!0,this.kernelConstraint),this.useBias&&(this.bias=this.addWeight("bias",[this.units],null,this.biasInitializer,this.biasRegularizer,!0,this.biasConstraint))),this.inputSpec=[{minNDim:2,axes:{[-1]:t}}],this.built=!0}computeOutputShape(e){const t=(e=bm(e)).slice();return t[t.length-1]=this.units,t}call(e,t){return li((()=>{this.invokeCallHook(e,t);const n=ym(e),s=af(this.activation.getClassName());let a;return null!=s?a=Pf(n,this.kernel.read(),s,this.bias?this.bias.read():null):(a=Pf(n,this.kernel.read()),null!=this.bias&&(a=Gf(a,this.bias.read())),null!=this.activation&&(a=this.activation.apply(a))),a}))}getConfig(){const e={units:this.units,activation:fy(this.activation),useBias:this.useBias,kernelInitializer:dm(this.kernelInitializer),biasInitializer:dm(this.biasInitializer),kernelRegularizer:wy(this.kernelRegularizer),biasRegularizer:wy(this.biasRegularizer),activityRegularizer:wy(this.activityRegularizer),kernelConstraint:Hm(this.kernelConstraint),biasConstraint:Hm(this.biasConstraint)},t=super.getConfig();return Object.assign(e,t),e}}pb.className="Dense",ri(pb);class db extends Cm{constructor(e){super(e=e||{}),this.inputSpec=[{minNDim:3}],this.dataFormat=e.dataFormat}computeOutputShape(e){e=bm(e);for(const t of e.slice(1))if(null==t)throw new Md(`The shape of the input to "Flatten" is not fully defined (got ${e.slice(1)}). Make sure to pass a complete "input_shape" or "batch_input_shape" argument to the first layer in your model.`);return[e[0],Sf(e,1)]}call(e,t){return li((()=>{this.invokeCallHook(e,t);let n=ym(e);if("channelsFirst"===this.dataFormat&&n.rank>1){const e=[0];for(let t=2;t<n.rank;++t)e.push(t);e.push(1),n=Nl(n,e)}return function(e){if(e.rank<=1)throw new Md(`batchFlatten requires a minimum rank of 2. Got rank: ${e.rank}.`);const t=[e.shape[0],Sf(e.shape,1)];return _i(e,t)}(n)}))}getConfig(){const e={};null!=this.dataFormat&&(e.dataFormat=this.dataFormat);const t=super.getConfig();return Object.assign(e,t),e}}db.className="Flatten",ri(db);class fb extends Cm{constructor(e){super(e),this.supportsMasking=!0,this.activation=gy(e.activation)}call(e,t){return li((()=>{this.invokeCallHook(e,t);const n=ym(e);return this.activation.apply(n)}))}getConfig(){const e={activation:fy(this.activation)},t=super.getConfig();return Object.assign(e,t),e}}fb.className="Activation",ri(fb);class mb extends Cm{constructor(e){super(e),this.n=e.n,this.inputSpec=[{ndim:2}]}computeOutputShape(e){return[e[0],this.n,e[1]]}call(e,t){return li((()=>{return e=ym(e),t=e,n=this.n,li((()=>{if(2!==t.shape.length)throw new Md(`repeat() expects a rank-2 tensor, but received a rank-${t.shape.length} tensor.`);return zf(Ff(t,1),[1,n,1])}));var t,n}))}getConfig(){const e={n:this.n},t=super.getConfig();return Object.assign(e,t),e}}mb.className="RepeatVector",ri(mb);class gb extends Cm{constructor(e){super(e),this.targetShape=e.targetShape;for(let e=0;e<this.targetShape.length;++e)this.isUnknown(this.targetShape[e])&&(this.targetShape[e]=null)}isUnknown(e){return e<0||null==e}fixUnknownDimension(e,t){const n="Total size of new array must be unchanged.",s=t.slice();let a=1,r=null;for(let e=0;e<s.length;++e){const t=s[e];if(this.isUnknown(t)){if(null!==r)throw new Md("Can only specifiy one unknown dimension.");r=e}else a*=t}const i=Sf(e);if(null!==r){if(0===a||i%a!=0)throw new Md(n);s[r]=i/a}else if(i!==a)throw new Md(n);return s}computeOutputShape(e){let t=!1;for(let n=0;n<e.length;++n)if(this.isUnknown(e[n])){t=!0;break}return t?e.slice(0,1).concat(this.targetShape):e.slice(0,1).concat(this.fixUnknownDimension(e.slice(1),this.targetShape))}call(e,t){return li((()=>{this.invokeCallHook(e,t);const n=ym(e),s=n.shape,a=s.slice(0,1).concat(this.fixUnknownDimension(s.slice(1),this.targetShape));return _i(n,a)}))}getConfig(){const e={targetShape:this.targetShape},t=super.getConfig();return Object.assign(e,t),e}}gb.className="Reshape",ri(gb);class yb extends Cm{constructor(e){if(super(e),null==e.dims)throw new Error("Required configuration field `dims` is missing during Permute constructor call.");if(!Array.isArray(e.dims))throw new Error(`Permute constructor requires \`dims\` to be an Array, but received ${e.dims} instead.`);const t=Cf(1,e.dims.length+1);if(!M(e.dims.slice().sort(),t))throw new Error("Invalid permutation `dims`: "+JSON.stringify(e.dims)+" `dims` must contain consecutive integers starting from 1.");this.dims=e.dims,this.dimsIncludingBatch=[0].concat(this.dims),this.inputSpec=[new Im({ndim:this.dims.length+1})]}computeOutputShape(e){const t=(e=bm(e)).slice();return this.dims.forEach(((n,s)=>{t[s+1]=e[n]})),t}call(e,t){return Nl(ym(e),this.dimsIncludingBatch)}getConfig(){const e={dims:this.dims},t=super.getConfig();return Object.assign(e,t),e}}yb.className="Permute",ri(yb);class bb extends Cm{constructor(e){super(null==e?{}:e),this.supportsMasking=!0,this.maskValue=null!=e?null==e.maskValue?0:e.maskValue:0}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={maskValue:this.maskValue};return Object.assign(t,e),t}computeMask(e,t){const n=ym(e);return bi(Wo(n,this.maskValue),-1)}call(e,t){return li((()=>{this.invokeCallHook(e,t);const n=ym(e),s=bi(Wo(n,this.maskValue),-1,!0);return xo(n,Nr(s,n.dtype))}))}}bb.className="Masking",ri(bb);class xb extends Cm{constructor(e){if(super(e),this.embeddings=null,this.DEFAULT_EMBEDDINGS_INITIALIZER="randomUniform",null==e.batchInputShape&&null==e.inputShape){let t=null;null!=e.batchSize&&(t=e.batchSize),null==e.inputLength?this.batchInputShape=[t,null]:this.batchInputShape=[t].concat(Gd(e.inputLength))}this.inputDim=e.inputDim,nf(this.inputDim,"inputDim"),this.outputDim=e.outputDim,nf(this.outputDim,"outputDim"),this.embeddingsInitializer=fm(e.embeddingsInitializer||this.DEFAULT_EMBEDDINGS_INITIALIZER),this.embeddingsRegularizer=vy(e.embeddingsRegularizer),this.activityRegularizer=vy(e.activityRegularizer),this.embeddingsConstraint=qm(e.embeddingsConstraint),this.maskZero=e.maskZero,this.supportsMasking=e.maskZero,this.inputLength=e.inputLength}build(e){this.embeddings=this.addWeight("embeddings",[this.inputDim,this.outputDim],this.dtype,this.embeddingsInitializer,this.embeddingsRegularizer,!0,this.embeddingsConstraint),this.built=!0}warnOnIncompatibleInputShape(e){}computeMask(e,t){return li((()=>this.maskZero?(e=ym(e),Wo(e,kl(e))):null))}computeOutputShape(e){if(e=bm(e),null==this.inputLength)return[...e,this.outputDim];const t=Gd(this.inputLength);if(t.length!==e.length-1)throw new Md(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);{let n=0;for(let s=0;s<t.length;++s){const a=t[s],r=e[s+1];if(null!=a&&null!=r&&a!==r)throw new Md(`"inputLength" is ${this.inputLength}, but received input shape has shape ${e}`);null==a&&(t[n]=r),n++}}return[e[0],...t,this.outputDim]}call(e,t){return li((()=>{this.invokeCallHook(e,t);let n=ym(e);"int32"!==n.dtype&&(n=Rf(n,"int32"));const s=Wf(this.embeddings.read(),_i(n,[n.size]));return _i(s,bm(this.computeOutputShape(n.shape)))}))}getConfig(){const e={inputDim:this.inputDim,outputDim:this.outputDim,embeddingsInitializer:dm(this.embeddingsInitializer),embeddingsRegularizer:wy(this.embeddingsRegularizer),activityRegularizer:wy(this.activityRegularizer),embeddingsConstraint:Hm(this.embeddingsConstraint),maskZero:this.maskZero,inputLength:this.inputLength},t=super.getConfig();return Object.assign(e,t),e}}xb.className="Embedding",ri(xb);class wb extends Cm{constructor(e){super(e||{}),this.supportsMasking=!0}mergeFunction(e){throw new Ld}computeElementwiseOpOutputShape(e,t){if(null==e||null==t)return null;if(e.length<t.length)return this.computeElementwiseOpOutputShape(t,e);if(0===t.length)return e;const n=e.slice(0,e.length-t.length);for(let s=0;s<t.length;++s){const a=e[e.length-t.length+s],r=t[s];if(null==a||null==r||a<0||r<0)n.push(null);else if(1===a)n.push(r);else if(1===r)n.push(a);else{if(a!==r)throw new Md("Operands could not be broadcast together with shapes "+JSON.stringify(e)+" "+JSON.stringify(t));n.push(a)}}return n}build(e){if(Array.isArray(e)&&!Array.isArray(e[0])&&(e=[bm(e)]),e.length<2)throw new Md(`A merge layer should be called on an Array of at least 2 inputs. Got ${e.length} input(s).`);let t=[];for(const n of e)null!=n&&null!==n[0]&&t.push(n[0]);if(t=Jd(t),t.length>1)throw new Md(`Can not merge tensors with different batch sizes. Got tensors with shapes: ${JSON.stringify(e)}.`);let n=null==e[0]?null:e[0].slice(1);for(let t=1;t<e.length;++t){const s=null==e[t]?null:e[t].slice(1);n=this.computeElementwiseOpOutputShape(n,s)}const s=e.map((e=>e.length));-1===e.indexOf(null)&&1===Jd(s).length?this.reshapeRequired=!1:this.reshapeRequired=!0}call(e,t){return li((()=>{if(this.reshapeRequired){const t=[],n=e.map((e=>e.rank));if(-1===n.indexOf(null)){const s=$f(n);for(let n of e){const e=n.rank;for(let t=0;t<s-e;++t)n=Ff(n,1);t.push(n)}return this.mergeFunction(t)}{let n=!1;for(const s of e){const e=s.rank;if(null==e){const e=s.shape,a=e[0],r=e.slice(1).concat([a]);let i=_i(s,[a].concat(Sf(e.slice(1))));i=Nl(i,[1,0]),i=_i(i,r),t.push(i),n=!0}else if(e>1){const a=Cf(1,e).concat([0]);t.push(Nl(s,a)),n=!0}else t.push(s)}let s=this.mergeFunction(t);const a=s.rank;if(n)if(null==a){const e=s.shape,t=e[e.length-1],n=[t].concat(e.slice(0,e.length-1));s=_i(Nl(_i(s,[-1,t]),[1,0]),n)}else if(a>1){const e=[a-1].concat(Cf(0,a-1));s=Nl(s,e)}return s}}return this.mergeFunction(e)}))}computeOutputShape(e){let t;t=null==e[0]?null:e[0].slice(1);for(let n=1;n<e.length;++n){const s=null==e[n]?null:e[n].slice(1);t=this.computeElementwiseOpOutputShape(t,s)}let n=[];for(const t of e)null!=t&&null!==t[0]&&n.push(t[0]);return n=Jd(n),t=1===n.length?n.concat(t):[null].concat(t),t}computeMask(e,t){return li((()=>{if(null==t)return null;if(!Array.isArray(t))throw new Md("`mask` should be an Array");if(!Array.isArray(e))throw new Md("`inputs` should be an Array");if(t.length!==e.length)throw new Md(`The Array 'inputs' and 'mask' are expected to have the same length, but have different lengths (${e.length} vs ${t.length})`);if(t.every((e=>null==e)))return null;let n=(t=t.map((e=>null==e?e:io(e,0))))[0];for(let e=1;e<t.length-1;++e)n=Io(n,t[e]);return n}))}}class kb extends wb{constructor(e){super(e)}mergeFunction(e){return li((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=gi(t,e[n]);return t}))}}kb.className="Add",ri(kb);class vb extends wb{constructor(e){super(e)}mergeFunction(e){return li((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=xo(t,e[n]);return t}))}}vb.className="Multiply",ri(vb);class Ib extends wb{constructor(e){super(e)}mergeFunction(e){return li((()=>{let t=e[0].clone();for(let n=1;n<e.length;++n)t=gi(t,e[n]);return xo(1/e.length,t)}))}}Ib.className="Average",ri(Ib);class Nb extends wb{constructor(e){super(e)}mergeFunction(e){return li((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=$o(t,e[n]);return t}))}}Nb.className="Maximum",ri(Nb);class Sb extends wb{constructor(e){super(e)}mergeFunction(e){return li((()=>{let t=e[0];for(let n=1;n<e.length;++n)t=Eo(t,e[n]);return t}))}}Sb.className="Minimum",ri(Sb);class Tb extends wb{constructor(e){super(e),this.DEFAULT_AXIS=-1,null==e&&(e={}),this.axis=null==e.axis?this.DEFAULT_AXIS:e.axis,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){if(!Array.isArray(e)||!Array.isArray(e[0])||1===e.length)throw new Md("A `Concatenate` layer should be called on a list of at least 2 inputs");let t=!0;for(const n of e)if(null!=n){t=!1;break}if(t)return;const n=[];for(let t=0;t<e.length;++t){const s=e[t].slice();s.splice(this.axis,1);let a=!1;for(const e of n)if(M(e,s)){a=!0;break}a||n.push(s)}if(n.length>1)throw new Md("A `Concatenate` layer requires inputs with matching shapes except for the concat axis. Got input shapes: "+JSON.stringify(e))}mergeFunction(e){return li((()=>Mf(e,this.axis)))}computeOutputShape(e){if(!Array.isArray(e)||!Array.isArray(e[0]))throw new Md("A `Concatenate` layer should be called on a list of inputs.");const t=e,n=t[0].slice(),s=this.axis<0?n.length+this.axis:this.axis;for(const e of t.slice(1)){if(null==n[s]||null==e[s]){n[s]=null;break}n[s]+=e[s]}return n}computeMask(e,t){if(null==t)return null;if(!Array.isArray(t))throw new Md("`mask` should be an array for Concatenate");if(!Array.isArray(e))throw new Md("`inputs` should be an array for Concatenate");if(t.length!==e.length)throw new Md(`Mismatch in the length of mask (${t.length}) and the legnth of inputs (${e.length})`);return li((()=>{let n=!0;if(t.forEach((e=>{null==e||(n=!1)})),n)return null;const s=[];for(let n=0;n<e.length;++n)null==t[n]?s.push(Nr(Ho(e[n]),"bool")):t[n].rank<e[n].rank?s.push(io(t[n],-1)):s.push(t[n]);const a=Vi(s,this.axis);return yi(a,-1,!1)}))}getConfig(){const e={axis:this.axis},t=super.getConfig();return Object.assign(e,t),e}}function $b(e,t){for(;e<0;)e+=t;return e}Tb.className="Concatenate",ri(Tb);class Cb extends wb{constructor(e){super(e),this.axes=e.axes,this.normalize=null!=e.normalize&&e.normalize,this.supportsMasking=!0,this.reshapeRequired=!1}build(e){R(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0],n=e[1];if(t.length>3||n.length>3)throw new Ld("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);if(t[s[0]]!==n[s[1]])throw new Md(`Dimension incompatibility: ${t[s[0]]} !== ${n[s[1]]}`)}mergeFunction(e){if(2!==e.length)throw new Md(`A \`Dot\` layer must be called on exactly 2 inputs, but received ${e.length} input(s).`);let t,n=e[0],s=e[1];return t=Array.isArray(this.axes)?this.axes.map(((t,n)=>$b(t,e[n].shape.length))):[$b(this.axes,n.shape.length),$b(this.axes,s.shape.length)],this.normalize&&(n=ig(n,t[0]),s=ig(s,t[1])),function(e,t,n){if(e.shape.length>3||t.shape.length>3)throw new Ld("batchDot is not implemented for tensors of 4D or higher rank yet");if(R(e.shape.length>=2,(()=>`batchDot requires the rank of x to be >= 2, but got ${e.shape.length}`)),R(e.shape.length>=2,(()=>`batchDot requires the rank of y to be >= 2, but got ${t.shape.length}`)),"number"==typeof n&&(n=[n,n]),"complex64"===e.dtype||"complex64"===t.dtype)throw new Ld("batchDot is not implemented for complex64-type Tensors yet.");const s=e.shape.length,a=t.shape.length;null==n&&(n=[s-1,a-2]);const r=n;return li((()=>{let n,i;if(s>a){n=s-a;const e=[];for(let t=0;t<n;++t)e.push(1);t=_i(t,t.shape.concat(e))}else if(a>s){n=a-s;const t=[];for(let e=0;e<n;++e)t.push(1);e=_i(e,e.shape.concat(t))}else n=0;if(2===e.shape.length&&2===t.shape.length)i=r[0]===r[1]?ko(xo(e,t),r[0]):ko(xo(Nl(e,[1,0]),t),r[1]);else{const n=r[0]!==e.shape.length-1,s=r[1]===t.shape.length-1;i=No(e,t,n,s)}if(n>0){let e;e=s>a?s+a-3:s-1;const t=[];for(let s=e;s<e+n;++s)t.push(s);i=dl(i,t)}return 1===i.shape.length&&(i=io(i,1)),i}))}(n,s,t)}interpretAxes(e,t){let n;return n=Array.isArray(this.axes)?this.axes:[$b(this.axes,e.length),$b(this.axes,t.length)],n}computeOutputShape(e){R(Array.isArray(e)&&2===e.length&&Array.isArray(e[0])&&Array.isArray(e[1]),(()=>"A `Dot` layer should be called on a list of exactly 2 inputs."));const t=e[0].slice(),n=e[1].slice();if(t.length>3||n.length>3)throw new Ld("Dot layer does not support tensors of 4D or higher rank yet.");const s=this.interpretAxes(t,n);t.splice(s[0],1),n.splice(s[1],1),n.splice(0,1);const a=t.concat(n);return 1===a.length&&a.push(1),a}computeMask(e,t){return null}getConfig(){const e={axes:this.axes,normalize:this.normalize},t=super.getConfig();return Object.assign(e,t),e}}Cb.className="Dot",ri(Cb);class Eb extends Cm{constructor(e){super(e),this.supportsMasking=!0,this.stddev=e.stddev}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={stddev:this.stddev};return Object.assign(t,e),t}call(e,t){return li((()=>{this.invokeCallHook(e,t);const n=ym(e);return jf((()=>gi(Bf(n.shape,0,this.stddev),n)),(()=>n),t.training||!1)}))}}Eb.className="GaussianNoise",ri(Eb);class Ab extends Cm{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return li((()=>{this.invokeCallHook(e,t);const n=ym(e);return this.rate>0&&this.rate<1?jf((()=>{const e=Math.sqrt(this.rate/(1-this.rate));return xo(n,Bf(n.shape,1,e))}),(()=>n),t.training||!1):n}))}}Ab.className="GaussianDropout",ri(Ab);class Rb extends Cm{constructor(e){super(e),this.supportsMasking=!0,this.rate=e.rate,this.noiseShape=e.noiseShape}_getNoiseShape(e){return this.noiseShape||ym(e).shape}computeOutputShape(e){return e}getConfig(){const e=super.getConfig(),t={rate:this.rate};return Object.assign(t,e),t}call(e,t){return li((()=>{if(this.rate<1&&this.rate>0){const n=this._getNoiseShape(e);return jf((()=>{const t=ym(e),s=-1.7580993408473766;let a=fo(Jo(n),this.rate);a=Rf(a,"float32");const r=((1-this.rate)*(1+this.rate*s**2))**-.5,i=-r*s*this.rate,o=gi(xo(t,a),xo(gi(a,-1),s));return gi(xo(o,r),i)}),(()=>ym(e)),t.training||!1)}return e}))}}function Fb(e,t,n,s,a,r=.001){let i;if(2===e.rank)i=zi(e,t,n,s,a,r);else if(3===e.rank)i=Bi(e,t,n,s,a,r);else{if(4!==e.rank)throw new Ld(`batchNormalization is not implemented for array of rank ${e.rank} yet`);i=Pi(e,t,n,s,a,r)}return i}Rb.className="AlphaDropout",ri(Rb);class Db extends Cm{constructor(e){null==e&&(e={}),super(e),this.supportsMasking=!0,this.axis=null==e.axis?-1:e.axis,this.momentum=null==e.momentum?.99:e.momentum,this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=fm(e.betaInitializer||"zeros"),this.gammaInitializer=fm(e.gammaInitializer||"ones"),this.movingMeanInitializer=fm(e.movingMeanInitializer||"zeros"),this.movingVarianceInitializer=fm(e.movingVarianceInitializer||"ones"),this.betaConstraint=qm(e.betaConstraint),this.gammaConstraint=qm(e.gammaConstraint),this.betaRegularizer=vy(e.betaRegularizer),this.gammaRegularizer=vy(e.gammaRegularizer)}build(e){e=bm(e);const t=this.axis>=0?this.axis:this.axis+e.length,n=e[t];if(null==n)throw new Md(`Axis ${t} of input tensor should have a defined dimension but the layer received an input with shape ${JSON.stringify(e)}.`);this.inputSpec=[new Im({ndim:e.length,axes:{[t]:n}})];const s=[n];this.scale&&(this.gamma=this.addWeight("gamma",s,null,this.gammaInitializer,this.gammaRegularizer,!0,this.gammaConstraint)),this.center&&(this.beta=this.addWeight("beta",s,null,this.betaInitializer,this.betaRegularizer,!0,this.betaConstraint)),this.movingMean=this.addWeight("moving_mean",s,null,this.movingMeanInitializer,null,!1),this.movingVariance=this.addWeight("moving_variance",s,null,this.movingVarianceInitializer,null,!1),this.built=!0}call(e,t){return li((()=>{const n=null!=t.training&&t.training,s=ym(e),a=s.shape,r=a.length,i=Cf(0,r),o=this.axis>=0?this.axis:this.axis+r;i.splice(o,1);const l=Pd(1,r);l[o]=a[o];const u=i.slice();u.sort();const c=!M(u,Cf(0,r).slice(0,r-1));if(!n)return(()=>{if(c){const e=_i(this.movingMean.read(),l),t=_i(this.movingVariance.read(),l),n=this.center?_i(this.beta.read(),l):null,a=this.scale?_i(this.gamma.read(),l):null;return Fb(s,e,t,n,a,this.epsilon)}return Fb(s,this.movingMean.read(),this.movingVariance.read(),null==this.beta?null:this.beta.read(),null==this.gamma?null:this.gamma.read(),this.epsilon)})();const[h,p,d]=function(e,t,n,s,a=.001){return M(s.slice().sort(),Cf(0,e.rank-1))?function(e,t,n,s,a=.001){return li((()=>{const r=Bo(e,s),i=r.mean,o=r.variance;return[Fb(e,i,o,n,t,a),i,o]}))}(e,t,n,s,a):function(e,t,n,s,a=.001){return li((()=>{const r=Bo(e,s),i=r.mean,o=r.variance,l=[];for(const t of Cf(0,e.rank))-1!==s.indexOf(t)?l.push(1):l.push(e.shape[t]);const u=_i(i,l),c=_i(o,l),h=null==t?null:_i(t,l),p=null==n?null:_i(n,l);return[Fb(e,u,c,p,h,a),i,o]}))}(e,t,n,s,a)}(s,this.gamma.read(),this.beta.read(),i,this.epsilon),f=(e,t,n)=>{li((()=>{const s=1-n,a=e.read(),r=xo(wo(a,t),s);e.write(wo(a,r))}))};return(()=>{f(this.movingMean,p,this.momentum),f(this.movingVariance,d,this.momentum)})(),h}))}getConfig(){const e={axis:this.axis,momentum:this.momentum,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:dm(this.betaInitializer),gammaInitializer:dm(this.gammaInitializer),movingMeanInitializer:dm(this.movingMeanInitializer),movingVarianceInitializer:dm(this.movingVarianceInitializer),betaRegularizer:wy(this.betaRegularizer),gammaRegularizer:wy(this.gammaRegularizer),betaConstraint:Hm(this.betaConstraint),gammaConstraint:Hm(this.gammaConstraint)},t=super.getConfig();return Object.assign(e,t),e}}Db.className="BatchNormalization",ri(Db);class _b extends Cm{constructor(e){if(null==e&&(e={}),super(e),this.axis=null==e.axis?-1:e.axis,"number"==typeof this.axis){if(!Number.isInteger(this.axis))throw new Error(`Expected axis to be an integer, but received ${this.axis}`)}else{if(!Array.isArray(this.axis))throw new Error(`Expected axis to be an integer or an array of integers, but received ${JSON.stringify(this.axis)}`);for(const e of this.axis)if(!Number.isInteger(e))throw new Error(`Expected axis to be an array of integers, but received ${JSON.stringify(this.axis)}`)}this.epsilon=null==e.epsilon?.001:e.epsilon,this.center=null==e.center||e.center,this.scale=null==e.scale||e.scale,this.betaInitializer=fm(e.betaInitializer||"zeros"),this.gammaInitializer=fm(e.gammaInitializer||"ones"),this.betaRegularizer=vy(e.betaRegularizer),this.gammaRegularizer=vy(e.gammaRegularizer),this.supportsMasking=!0}build(e){const t=(e=bm(e)).length;"number"==typeof this.axis&&(this.axis=[this.axis]);for(let e=0;e<this.axis.length;++e)this.axis[e]<0&&(this.axis[e]+=t);for(const e of this.axis)if(e<0||e>=t)throw new Error(`Invalid axis: ${e}`);if(this.axis.length!==Jd(this.axis).length)throw new Error(`Found duplicate axes in: ${this.axis}`);const n=this.axis.map((t=>e[t]));this.scale?this.gamma=this.addWeight("gamma",n,"float32",this.gammaInitializer,this.gammaRegularizer,!0):this.gamma=null,this.center?this.beta=this.addWeight("beta",n,"float32",this.betaInitializer,this.betaRegularizer,!0):this.beta=null,this.built=!0}call(e,t){const n=ym(e),s=n.shape,a=s.length;return li((()=>{let{mean:e,variance:t}=Bo(n,this.axis,!0);const r=Pd(1,a);for(const e of this.axis)r[e]=s[e];const i=e=>null!=e&&e.shape.length!==a?_i(e,r):e;let o=this.scale?i(this.gamma.read()):null,l=this.center?i(this.beta.read()):null;const u=[],c=[];for(let e=0;e<a;++e)-1!==this.axis.indexOf(e)?(u.push(s[e]),c.push(1)):(u.push(1),c.push(s[e]));return e=oo(e,u),t=oo(t,u),null!=o&&(o=oo(o,c)),null!=l&&(l=oo(l,c)),Fb(n,e,t,l,o,this.epsilon)}))}getConfig(){const e={axis:this.axis,epsilon:this.epsilon,center:this.center,scale:this.scale,betaInitializer:dm(this.betaInitializer),gammaInitializer:dm(this.gammaInitializer),betaRegularizer:wy(this.betaRegularizer),gammaRegularizer:wy(this.gammaRegularizer)},t=super.getConfig();return Object.assign(e,t),e}}_b.className="LayerNormalization",ri(_b);class Ob extends Cm{constructor(e){if(null==e&&(e={}),super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,null==e.padding)this.padding=[[1,1],[1,1]];else if("number"==typeof e.padding)this.padding=[[e.padding,e.padding],[e.padding,e.padding]];else{if(e.padding=e.padding,2!==e.padding.length)throw new Md(`ZeroPadding2D expects padding to be a length-2 array, but received a length-${e.padding.length} array.`);let t,n;if("number"==typeof e.padding[0])t=[e.padding[0],e.padding[0]],n=[e.padding[1],e.padding[1]];else{if(e.padding=e.padding,2!==e.padding[0].length)throw new Md(`ZeroPadding2D expects height padding to be a length-2 array, but received a length-${e.padding[0].length} array.`);if(t=e.padding[0],2!==e.padding[1].length)throw new Md(`ZeroPadding2D expects width padding to be a length-2 array, but received a length-${e.padding[1].length} array.`);n=e.padding[1]}this.padding=[t,n]}this.inputSpec=[new Im({ndim:4})]}computeOutputShape(e){let t,n;return e=bm(e),"channelsFirst"===this.dataFormat?(t=null!=e[2]&&e[2]>=0?e[2]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[3]&&e[3]>=0?e[3]+this.padding[1][0]+this.padding[1][1]:null,[e[0],e[1],t,n]):(t=null!=e[1]&&e[1]>=0?e[1]+this.padding[0][0]+this.padding[0][1]:null,n=null!=e[2]&&e[2]>=0?e[2]+this.padding[1][0]+this.padding[1][1]:null,[e[0],t,n,e[3]])}call(e,t){return li((()=>{return t=ym(e),n=this.padding,s=this.dataFormat,li((()=>{if(4!==t.rank)throw new Md(`temporalPadding expects input tensor to be 4-D, but received a ${t.rank}-D tensor.`);if(null==n&&(n=[[1,1],[1,1]]),2!==n.length||2!==n[0].length||2!==n[1].length)throw new Md("spatial2dPadding expects `padding` to be an Array of two Arrays, each of which is an Array of two integers.");if(null==s&&(s="channelsLast"),"channelsLast"!==s&&"channelsFirst"!==s)throw new Md(`Unknown data format: ${s}. Supported data formats are 'channelsLast' and 'channelsFirst.`);let e;return e="channelsFirst"===s?[[0,0],[0,0],n[0],n[1]]:[[0,0],n[0],n[1],[0,0]],jo(t,e)}));var t,n,s}))}getConfig(){const e={padding:this.padding,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}function Mb(e,t,n,s,a,r){return li((()=>{let i;gf(a),bf(r),yf(s),null==n&&(n=[1,1]),null==s&&(s="valid"),null==a&&(a="channelsLast"),null==r&&(r="max"),e=Fy(e,a);const o="same"===s?"same":"valid";return i="max"===r?So(e,t,n,o):Oi(e,t,n,o),"channelsFirst"===a&&(i=Nl(i,[0,3,1,2])),i}))}function Lb(e,t,n,s,a,r){return li((()=>{let i;gf(a),bf(r),yf(s),null==n&&(n=[1,1,1]),null==s&&(s="valid"),null==a&&(a="channelsLast"),null==r&&(r="max"),e=Dy(e,a);const o="same"===s?"same":"valid";return i="max"===r?To(e,t,n,o):Mi(e,t,n,o),"channelsFirst"===a&&(i=Nl(i,[0,4,1,2,3])),i}))}Ob.className="ZeroPadding2D",ri(Ob);class zb extends Cm{constructor(e){if(null==e.poolSize&&(e.poolSize=2),super(e),"number"==typeof e.poolSize)this.poolSize=[e.poolSize];else{if(!Array.isArray(e.poolSize)||1!==e.poolSize.length||"number"!=typeof e.poolSize[0])throw new Md(`poolSize for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.poolSize)}`);this.poolSize=e.poolSize}if(nf(this.poolSize,"poolSize"),null==e.strides)this.strides=this.poolSize;else if("number"==typeof e.strides)this.strides=[e.strides];else{if(!Array.isArray(e.strides)||1!==e.strides.length||"number"!=typeof e.strides[0])throw new Md(`strides for 1D convolutional layer must be a number or an Array of a single number, but received ${JSON.stringify(e.strides)}`);this.strides=e.strides}nf(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,yf(this.padding),this.inputSpec=[new Im({ndim:3})]}computeOutputShape(e){const t=Ay((e=bm(e))[1],this.poolSize[0],this.padding,this.strides[0]);return[e[0],t,e[2]]}call(e,t){return li((()=>{this.invokeCallHook(e,t),e=Ff(ym(e),2);const n=this.poolingFunction(ym(e),[this.poolSize[0],1],[this.strides[0],1],this.padding,"channelsLast");return dl(n,[2])}))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides},t=super.getConfig();return Object.assign(e,t),e}}class Bb extends zb{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return gf(a),yf(s),Mb(e,t,n,s,a,"max")}}Bb.className="MaxPooling1D",ri(Bb);class Pb extends zb{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return gf(a),yf(s),Mb(e,t,n,s,a,"avg")}}Pb.className="AveragePooling1D",ri(Pb);class Wb extends Cm{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(2!==e.strides.length)throw new Md(`If the strides property of a 2D pooling layer is an Array, it is expected to have a length of 2, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides];nf(this.poolSize,"poolSize"),nf(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,gf(this.dataFormat),yf(this.padding),this.inputSpec=[new Im({ndim:4})]}computeOutputShape(e){e=bm(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2];return t=Ay(t,this.poolSize[0],this.padding,this.strides[0]),n=Ay(n,this.poolSize[1],this.padding,this.strides[1]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n]:[e[0],t,n,e[3]]}call(e,t){return li((()=>(this.invokeCallHook(e,t),this.poolingFunction(ym(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Vb extends Wb{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return gf(a),yf(s),Mb(e,t,n,s,a,"max")}}Vb.className="MaxPooling2D",ri(Vb);class Ub extends Wb{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return gf(a),yf(s),Mb(e,t,n,s,a,"avg")}}Ub.className="AveragePooling2D",ri(Ub);class Gb extends Cm{constructor(e){if(null==e.poolSize&&(e.poolSize=[2,2,2]),super(e),this.poolSize=Array.isArray(e.poolSize)?e.poolSize:[e.poolSize,e.poolSize,e.poolSize],null==e.strides)this.strides=this.poolSize;else if(Array.isArray(e.strides)){if(3!==e.strides.length)throw new Md(`If the strides property of a 3D pooling layer is an Array, it is expected to have a length of 3, but received length ${e.strides.length}.`);this.strides=e.strides}else this.strides=[e.strides,e.strides,e.strides];nf(this.poolSize,"poolSize"),nf(this.strides,"strides"),this.padding=null==e.padding?"valid":e.padding,this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,gf(this.dataFormat),yf(this.padding),this.inputSpec=[new Im({ndim:5})]}computeOutputShape(e){e=bm(e);let t="channelsFirst"===this.dataFormat?e[2]:e[1],n="channelsFirst"===this.dataFormat?e[3]:e[2],s="channelsFirst"===this.dataFormat?e[4]:e[3];return t=Ay(t,this.poolSize[0],this.padding,this.strides[0]),n=Ay(n,this.poolSize[1],this.padding,this.strides[1]),s=Ay(s,this.poolSize[2],this.padding,this.strides[2]),"channelsFirst"===this.dataFormat?[e[0],e[1],t,n,s]:[e[0],t,n,s,e[4]]}call(e,t){return li((()=>(this.invokeCallHook(e,t),this.poolingFunction(ym(e),this.poolSize,this.strides,this.padding,this.dataFormat))))}getConfig(){const e={poolSize:this.poolSize,padding:this.padding,strides:this.strides,dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Hb extends Gb{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return gf(a),yf(s),Lb(e,t,n,s,a,"max")}}Hb.className="MaxPooling3D",ri(Hb);class jb extends Gb{constructor(e){super(e)}poolingFunction(e,t,n,s,a){return gf(a),yf(s),Lb(e,t,n,s,a,"avg")}}jb.className="AveragePooling3D",ri(jb);class qb extends Cm{constructor(e){super(e),this.inputSpec=[new Im({ndim:3})]}computeOutputShape(e){return[e[0],e[2]]}call(e,t){throw new Ld}}class Kb extends qb{constructor(e){super(e||{})}call(e,t){return li((()=>{const t=ym(e);return Co(t,1)}))}}Kb.className="GlobalAveragePooling1D",ri(Kb);class Xb extends qb{constructor(e){super(e||{})}call(e,t){return li((()=>{const t=ym(e);return bo(t,1)}))}}Xb.className="GlobalMaxPooling1D",ri(Xb);class Yb extends Cm{constructor(e){super(e),this.dataFormat=null==e.dataFormat?"channelsLast":e.dataFormat,gf(this.dataFormat),this.inputSpec=[new Im({ndim:4})]}computeOutputShape(e){return"channelsLast"===this.dataFormat?[e[0],e[3]]:[e[0],e[1]]}call(e,t){throw new Ld}getConfig(){const e={dataFormat:this.dataFormat},t=super.getConfig();return Object.assign(e,t),e}}class Zb extends Yb{call(e,t){return li((()=>{const t=ym(e);return"channelsLast"===this.dataFormat?Co(t,[1,2]):Co(t,[2,3])}))}}Zb.className="GlobalAveragePooling2D",ri(Zb);class Jb extends Yb{call(e,t){return li((()=>{const t=ym(e);return"channelsLast"===this.dataFormat?bo(t,[1,2]):bo(t,[2,3])}))}}Jb.className="GlobalMaxPooling2D",ri(Jb);class Qb extends Cm{constructor(e){super(e),this.layer=e.layer}build(e){this.built=!0}get trainable(){return null!=this.layer&&this.layer.trainable}set trainable(e){null!=this.layer&&(this.layer.trainable=e)}get trainableWeights(){return this.layer.trainableWeights}get nonTrainableWeights(){return this.layer.nonTrainableWeights}get updates(){return this.layer._updates}get losses(){return this.layer.losses}getWeights(){return this.layer.getWeights()}setWeights(e){this.layer.setWeights(e)}getConfig(){const e={layer:{className:this.layer.getClassName(),config:this.layer.getConfig()}},t=super.getConfig();return Object.assign(e,t),e}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.layer&&this.layer.setFastWeightInitDuringBuild(e)}static fromConfig(e,t,n={}){const s=rg(t.layer,n);delete t.layer;const a={layer:s};return Object.assign(a,t),new e(a)}}class ex extends Qb{constructor(e){super(e),this.supportsMasking=!0}build(e){if((e=bm(e)).length<3)throw new Md(`TimeDistributed layer expects an input shape >= 3D, but received input shape ${JSON.stringify(e)}`);this.inputSpec=[{shape:e}];const t=[e[0]].concat(e.slice(2));this.layer.built||(this.layer.build(t),this.layer.built=!0),super.build(e)}computeOutputShape(e){const t=[(e=bm(e))[0]].concat(e.slice(2)),n=this.layer.computeOutputShape(t),s=e[1];return[n[0],s].concat(n.slice(1))}call(e,t){return li((()=>Ky(((e,n)=>[ym(this.layer.call(e,t)),[]]),e=ym(e),[],!1,null,null,!1,!0)[1]))}}ex.className="TimeDistributed",ri(ex);class tx extends Qb{constructor(e){super(e);const t=e.layer.getConfig(),n={};n.className=e.layer.getClassName(),n.config=t,this.forwardLayer=rg(n),t.goBackwards=!0!==t.goBackwards;const s={};var a;if(s.className=e.layer.getClassName(),s.config=t,this.backwardLayer=rg(s),this.forwardLayer.name="forward_"+this.forwardLayer.name,this.backwardLayer.name="backward_"+this.backwardLayer.name,this.mergeMode=void 0===e.mergeMode?"concat":e.mergeMode,a=this.mergeMode,ef(ff,"BidirectionalMergeMode",a),e.weights)throw new Ld("weights support is not implemented for Bidirectional layer yet.");this._stateful=e.layer.stateful,this.returnSequences=e.layer.returnSequences,this.returnState=e.layer.returnState,this.supportsMasking=!0,this._trainable=!0,this.inputSpec=e.layer.inputSpec,this.numConstants=null}get trainable(){return this._trainable}set trainable(e){this._trainable=e,null!=this.forwardLayer&&(this.forwardLayer.trainable=e),null!=this.backwardLayer&&(this.backwardLayer.trainable=e)}getWeights(){return this.forwardLayer.getWeights().concat(this.backwardLayer.getWeights())}setWeights(e){const t=e.length,n=Math.floor(t/2);this.forwardLayer.setWeights(e.slice(0,n)),this.backwardLayer.setWeights(e.slice(n))}computeOutputShape(e){let t,n,s,a=this.forwardLayer.computeOutputShape(e);return Array.isArray(a)&&Array.isArray(a[0])||(a=[a]),this.returnState?(s=a.slice(1),t=a[0]):t=a[0],"concat"===this.mergeMode?(t[t.length-1]*=2,n=[t]):n=null==this.mergeMode?[t,t.slice()]:[t],this.returnState?null==this.mergeMode?n.concat(s).concat(s.slice()):[t].concat(s).concat(s.slice()):Ud(n)}apply(e,t){let n=null==t?null:t.initialState,s=null==t?null:t.constants;null==t&&(t={});const a=qy(e,n,s,this.numConstants);if(e=a.inputs,n=a.initialState,s=a.constants,Array.isArray(e)&&(n=e.slice(1),e=e[0]),(null==n||0===n.length)&&null==s)return super.apply(e,t);const r=[],i=[];if(null!=n){const e=n.length;if(e%2>0)throw new Md("When passing `initialState` to a Bidrectional RNN, the state should be an Array containing the states of the underlying RNNs.");t.initialState=n,r.push(...n);const s=n.map((e=>new Im({shape:e.shape})));this.forwardLayer.stateSpec=s.slice(0,e/2),this.backwardLayer.stateSpec=s.slice(e/2),i.push(...s)}if(null!=s)throw new Ld("Support for constants in Bidirectional layers is not implemented yet.");const o=r[0]instanceof Nm;for(const e of r)if(e instanceof Nm!==o)throw new Md("The initial state of a Bidirectional layer cannot be specified as a mix of symbolic and non-symbolic tensors");if(o){const n=[e].concat(r),s=this.inputSpec.concat(i),a=this.inputSpec;this.inputSpec=s;const o=super.apply(n,t);return this.inputSpec=a,o}return super.apply(e,t)}call(e,t){return li((()=>{const n=t.initialState;let s,a,r,i;if(null==n)s=this.forwardLayer.call(e,t),a=this.backwardLayer.call(e,t);else{const r=n.slice(0,n.length/2),i=n.slice(n.length/2);s=this.forwardLayer.call(e,Object.assign(t,{initialState:r})),a=this.backwardLayer.call(e,Object.assign(t,{initialState:i}))}return this.returnState&&(Array.isArray(s)&&(r=s.slice(1).concat(a.slice(1))),s=s[0],a=a[0]),this.returnSequences&&(a=el(a,1)),"concat"===this.mergeMode?i=Mf([s,a]):"sum"===this.mergeMode?i=gi(s,a):"ave"===this.mergeMode?i=xo(.5,gi(s,a)):"mul"===this.mergeMode?i=xo(s,a):null==this.mergeMode&&(i=[s,a]),this.returnState?null==this.mergeMode?i.concat(r):[i].concat(r):i}))}resetStates(e){this.forwardLayer.resetStates(),this.backwardLayer.resetStates()}build(e){wf(this.forwardLayer.name,(()=>{this.forwardLayer.build(e)})),wf(this.backwardLayer.name,(()=>{this.backwardLayer.build(e)})),this.built=!0}computeMask(e,t){let n;if(Array.isArray(t)&&(t=t[0]),n=this.returnSequences?null==this.mergeMode?[t,t]:t:null==this.mergeMode?[null,null]:null,this.returnState){const e=this.forwardLayer.states.map((e=>null));return Array.isArray(n)?n.concat(e).concat(e):[n].concat(e).concat(e)}return n}get trainableWeights(){return this.forwardLayer.trainableWeights.concat(this.backwardLayer.trainableWeights)}get nonTrainableWeights(){return this.forwardLayer.nonTrainableWeights.concat(this.backwardLayer.nonTrainableWeights)}setFastWeightInitDuringBuild(e){super.setFastWeightInitDuringBuild(e),null!=this.forwardLayer&&this.forwardLayer.setFastWeightInitDuringBuild(e),null!=this.backwardLayer&&this.backwardLayer.setFastWeightInitDuringBuild(e)}getConfig(){const e={mergeMode:this.mergeMode},t=super.getConfig();return Object.assign(e,t),e}static fromConfig(e,t){const n=rg(t.layer);if(delete t.layer,null!=t.numConstants)throw new Ld("Deserialization of a Bidirectional layer with numConstants present is not supported yet.");const s=t;return s.layer=n,new e(s)}}tx.className="Bidirectional",ri(tx),pe().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(rb||(rb={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(ib||(ib={}));const nx={};function sx(e){return nx[e]}function ax(e,t,n,s,a){const r=t.inputParams[e];if(r&&void 0!==r.inputIndexStart){const e=r.inputIndexStart,i=0===r.inputIndexEnd?void 0:void 0===r.inputIndexEnd?e+1:r.inputIndexEnd;if("tensor"===r.type)return rx(t.inputNames[r.inputIndexStart],n,s,a);if("tensors"===r.type)return t.inputNames.slice(e,i).map((e=>rx(e,n,s,a)));const o=rx(t.inputNames.slice(e)[0],n,s,a),l=o.dataSync();return"number"===r.type?l[0]:ne(o.shape,l)}const i=t.attrParams[e];return i&&i.value}function rx(e,t,n,s){const[a,r]=lx(e);if(null!=s){const e=s.getHashTableHandleByName(a);if(null!=e)return e}const i=n.currentContextIds.find((e=>!!t[ox(a,e)]));return void 0!==i?t[ox(a,i)][r]:void 0}function ix(e,t){const[n,s,a]=lx(e);return[ox(n,t&&t.currentContextId),s,a]}function ox(e,t){return t?`${e}-${t}`:e}function lx(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],s=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),s]}function ux(e,t,n){let s=ax("pad",e,t,n);if("explicit"===s){s=ax("explicitPaddings",e,t,n);const a=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)a[e][0]=s[2*e],a[e][1]=s[2*e+1];return a}return s}function cx(e){return e.kept?e:Sr(e)}const hx=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],px=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],dx=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],fx=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],mx=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],gx=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],yx=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],bx=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],xx=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}],wx=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],kx=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],vx=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}],Ix=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],Nx=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],Sx=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],Tx=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],$x=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],Cx=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],Ex=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class Ax{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[a,r,i,o,l,u,c,h,p,d,f,m,g,y,b,x,w,k,v].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e,t={}){const n=e.node,s=[],a=[],r=[],i=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?s.push(e[t.name]):"Const"===t.op?a.push(e[t.name]):null!=t.input&&0!==t.input.length||r.push(e[t.name]),e)),{});let o=[];const l=[];let u={},c={};null!=t&&(u=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const h=Object.keys(i);h.forEach((e=>{const t=i[e];t.inputNames.forEach(((e,n)=>{const[s,,a]=ix(e),r=i[s];if(null!=r.outputs){const e=r.outputs.indexOf(a);if(-1!==e){const a=`${s}:${e}`;t.inputNames[n]=a}}t.inputs.push(r),r.children.push(t)}))})),0===Object.keys(c).length?h.forEach((e=>{const t=i[e];0===t.children.length&&l.push(t)})):Object.keys(c).forEach((e=>{const[t]=ix(e),n=i[t];null!=n&&(n.signatureKey=c[e],l.push(n))})),Object.keys(u).length>0?Object.keys(u).forEach((e=>{const[t]=ix(e),n=i[t];n&&(n.signatureKey=u[e],o.push(n))})):o=s;let p={};null!=e.library&&null!=e.library.function&&(p=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const d={nodes:i,inputs:o,outputs:l,weights:a,placeholders:s,signature:t,functions:p};return r.length>0&&(d.initNodes=r),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=sx(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.slice(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const s=n.type;let a;switch(n.type){case"string":a=Fx(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Fx(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":a=Vx(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Vx(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":a=_x(e.attr,n.tfName,n.defaultValue||0),void 0===a&&n.tfDeprecatedName&&(a=_x(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":a=Wx(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Wx(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":a=Dx(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Dx(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":a=Gx(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Gx(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":a=Px(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Px(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":a=Ux(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Ux(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":a=Lx(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Lx(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":a=zx(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=zx(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":a=Mx(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Mx(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:a,type:s},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let s={};null!=t&&(s=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const a=[],r=[];e.signature.inputArg.forEach((e=>{const[t]=ix(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:Ox(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,a.push(n),s[t]=n})),Object.keys(s).forEach((e=>{const t=s[e];t.inputNames.forEach(((e,n)=>{const[a,,r]=ix(e),i=s[a];if(null!=i.outputs){const e=i.outputs.indexOf(r);if(-1!==e){const s=`${a}:${e}`;t.inputNames[n]=s}}t.inputs.push(i),i.children.push(t)}))}));const i=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=ix(i[e.name]),a=s[t];null!=a&&(a.defaultOutput=n,r.push(a))}));const o=this.mapArgsToSignature(e);return{nodes:s,inputs:a,outputs:r,weights:n,placeholders:[],signature:o}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function Rx(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=pe().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function Fx(e,t,n,s=!1){const a=e[t];return null!=a?Rx(a.s,s):n}function Dx(e,t,n){const s=e[t];return s?s.b:n}function _x(e,t,n){const s=e[t]||{},a=null!=s.i?s.i:null!=s.f?s.f:n;return"number"==typeof a?a:parseInt(a,10)}function Ox(e){switch("string"==typeof e&&(e=rb[e]),e){case rb.DT_FLOAT:case rb.DT_HALF:return"float32";case rb.DT_INT32:case rb.DT_INT64:case rb.DT_INT8:case rb.DT_UINT8:return"int32";case rb.DT_BOOL:return"bool";case rb.DT_DOUBLE:return"float32";case rb.DT_STRING:return"string";default:return null}}function Mx(e,t,n){const s=e[t];return s&&s.func?s.func.name:n}function Lx(e,t,n){const s=e[t];return s&&s.type?Ox(s.type):n}function zx(e,t,n){const s=e[t];return s&&s.list&&s.list.type?s.list.type.map((e=>Ox(e))):n}function Bx(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"==typeof e.size?e.size:parseInt(e.size,10))):[]}function Px(e,t,n){const s=e[t];return s&&s.shape?Bx(s.shape):n}function Wx(e,t,n){const s=e[t];return s?((s.list.f&&s.list.f.length?s.list.f:s.list.i)||[]).map((e=>"number"==typeof e?e:parseInt(e,10))):n}function Vx(e,t,n,s=!1){const a=e[t];return a&&a.list&&a.list.s?a.list.s.map((e=>Rx(e,s))):n}function Ux(e,t,n){const s=e[t];return s&&s.list&&s.list.shape?s.list.shape.map((e=>Bx(e))):n}function Gx(e,t,n){const s=e[t];return s&&s.list&&s.list.b?s.list.b:n}class Hx{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return rx(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return rx(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return _x(this.node.rawAttrs,e,t);if(null!=n.s)return Fx(this.node.rawAttrs,e,t);if(null!=n.b)return Dx(this.node.rawAttrs,e,t);if(null!=n.shape)return Px(this.node.rawAttrs,e,t);if(null!=n.type)return Lx(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Wx(this.node.rawAttrs,e,t);if(null!=n.list.s)return Vx(this.node.rawAttrs,e,t);if(null!=n.list.shape)return Ux(this.node.rawAttrs,e,t);if(null!=n.list.b)return Gx(this.node.rawAttrs,e,t);if(null!=n.list.type)return zx(this.node.rawAttrs,e,t)}return t}}const jx=za({addN_:function(e){R(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),R(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>Ma(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!M(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const s=t;return Ca.runKernel(ke,s)}});function qx(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){R(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let s=0;s<e.length;s++){const a=e[s],r=t[s];R(a<0||r<0||a===r,(()=>n+` Shapes ${e} and ${t} must match`))}}}function Kx(e){return"number"!=typeof e&&!e.some((e=>e<0))}function Xx(e,t,n){let s=Yx(e,n);const a=!Kx(s);if(a&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${s}`);if(a&&t.forEach((e=>{s=Yx(e.shape,s)})),!Kx(s))throw new Error(`Non-fully-defined elementShape: ${s}`);return s}function Yx(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let s=0;s<e.length;++s){const a=e[s],r=t[s];if(a>=0&&r>=0&&a!==r)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[s]=a>=0?a:r}return n}class Zx{constructor(e,t,n,s,a,r,i){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=s,this.identicalElementShapes=a,this.dynamicSize=r,this.clearAfterRead=i,this.tensors=[],this.closed_=!1,this.idTensor=di(0),ci(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),qx(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,ci(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return Wa([],[0].concat(this.elementShape));const n=this.readMany(e);return qx(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),fl(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return Wa([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return qx(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),Vi(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,bl(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const s=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const a=0===n?0:t.size/n,r=[];li((()=>{t=_i(t,[1,n,a]);for(let n=0;n<e.length;++n){const i=[0,0===n?0:s[n-1],0],o=[1,e[n],a];r[n]=_i(al(t,i,o),this.elementShape)}return r}));const i=[];for(let t=0;t<e.length;t++)i[t]=t;this.writeMany(i,r)}}class Jx{constructor(e,t,n,s=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);qx(t,e.shape,"TensorList shape mismatch: "),ci(e)})),this.idTensor=di(0),this.maxNumElements=s,ci(this.idTensor)}get id(){return this.idTensor.id}copy(){return new Jx([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);qx(e,this.elementShape,"TensorList shape mismatch: ");const s=Xx(this.elementShape,this.tensors,e);return li((()=>{const e=this.tensors.map((e=>_i(e,s)));return fl(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=Xx(this.elementShape,this.tensors,e),s=this.tensors.pop();return qx(s.shape,e,"TensorList shape mismatch: "),_i(s,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(qx(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");ci(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new Jx([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);qx(this.tensors[e].shape,t,"TensorList shape mismatch: ");const s=Xx(this.elementShape,this.tensors,t);return _i(this.tensors[e],s)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);qx(this.elementShape,t.shape,"TensorList shape mismatch: "),ci(t),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);qx(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const s=Xx(this.elementShape,this.tensors,n);return 0===e.length?Wa([],[0].concat(s)):li((()=>{const t=e.map((e=>_i(this.tensors[e],s)));return fl(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);qx(this.elementShape,t,"TensorList shape mismatch: ");const n=Xx(this.elementShape,this.tensors,t);return 0===this.size()?Wa([],[0].concat(n)):li((()=>{const e=this.tensors.map((e=>_i(e,n)));return Vi(e,0)}))}}const Qx=za({maxPoolWithArgmax_:function(e,t,n,s,a=!1){const r={x:Ma(e,"x","maxPoolWithArgmax")},i={filterSize:t,strides:n,pad:s,includeBatchInIndex:a},o=Ca.runKernel(Qt,r,i);return{result:o[0],indexes:o[1]}}});function ew(e,t,n){const[s,a]=ax("fusedOps",e,t,n),r="biasadd"===s,i=!r,o="prelu"===a,l="fusedbatchnorm"===s,u=ax("numArgs",e,t,n);if(r){if(o&&2!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&r&&1!==u)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(l)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=ax("strides",e,t,n),h=ux(e,t,n),p=ax("dataFormat",e,t,n).toUpperCase(),d=ax("dilations",e,t,n);let[f,m]=ax("args",e,t,n);return i&&(m=f,f=void 0),{stride:c,pad:h,dataFormat:p,dilations:d,biasArg:f,preluArg:m,activationFunc:a,leakyreluAlpha:ax("leakyreluAlpha",e,t,n)}}function tw(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const s={start:e,stop:t,num:n};return Ca.runKernel(Bt,{},s)}const nw=za({multinomial_:function(e,t,n,s=!1){const a=Ma(e,"logits","multinomial"),r=a.size,i=a.rank;if(r<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${r}.`);if(i>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${i}`);n=n||Math.random();const o={logits:1===i?_i(a,[1,-1]):a},l={numSamples:t,seed:n,normalized:s},u=Ca.runKernel(rn,o,l);return 1===i?_i(u,[u.size]):u}}),sw=async function(e){const t=Ma(e,"condition","whereAsync","bool"),n=await t.data(),s=Jc(t.shape,n);return e!==t&&t.dispose(),s};function aw(e,t,n){return{boxes:ax("boxes",e,t,n),scores:ax("scores",e,t,n),maxOutputSize:ax("maxOutputSize",e,t,n),iouThreshold:ax("iouThreshold",e,t,n),scoreThreshold:ax("scoreThreshold",e,t,n),softNmsSigma:ax("softNmsSigma",e,t,n)}}const rw=2147483648,iw=za({searchSorted_:function(e,t,n="left"){const s=Ma(e,"sortedSequence","searchSorted"),a=Ma(t,"values","searchSorted"),r=s.shape[s.shape.length-1],i=a.shape[a.shape.length-1],o=_i(s,[-1,r]),l=_i(a,[-1,i]);if(o.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(o.shape[0]!==l.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(O(l.shape)>=rw)throw new Error("values tensor size must less than 2147483648");if(o.shape[1]>=rw)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${o.shape[1]}`);const u={sortedSequence:o,values:l},c={side:n};return Ca.runKernel(_n,u,c)}});function ow(e,t){return iw(e,t,"right")}class lw{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=di(0),this.tensorMap=new Map,ci(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return di(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),li((()=>{const e=bl(t),s=n.length,a=e.length;R(s===a,(()=>`The number of elements doesn't match, keys has ${s} elements, the values has ${a} elements.`));for(let t=0;t<s;t++){const s=n[t],a=e[t];ci(a),this.tensorMap.set(s,a)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return li((()=>{const e=[];for(let s=0;s<n.length;s++){const a=n[s],r=this.findWithDefault(a,t);e.push(r)}return fl(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}const uw=za({einsum_:function(e,...t){const n=t.map(((e,t)=>Ma(e,`tensors${t}`,"einsum"))),s={equation:e};return Ca.runKernel(pt,n,s)}}),cw=za({sparseToDense_:function(e,t,n,s=0){const a=Ma(e,"sparseIndices","sparseToDense","int32"),r=Ma(t,"sparseValues","sparseToDense","string_or_numeric"),i=Ma(s,"defaultValue","sparseToDense",r.dtype);!function(e,t,n,s){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const a=e.rank>0?e.shape[0]:1,r=e.rank>1?e.shape[1]:1;if(n.length!==r)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${r}.`);const i=t.size;if(0!==t.rank&&(1!==t.rank||i!==a))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${a}]`);if(t.dtype!==s.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(a,r,n,i);const o={sparseIndices:a,sparseValues:r,defaultValue:i},l={outputShape:n};return Ca.runKernel(Jn,o,l)}}),hw=za({denseBincount_:function(e,t,n,s=!1){const a=Ma(e,"x","denseBincount"),r=Ma(t,"weights","denseBincount");R("int32"===a.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${a.dtype}`)),R(a.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${a.rank}.`)),R(n>=0,(()=>`size must be non-negative, but got ${n}.`)),R(r.size===a.size||0===r.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${a.shape}, weights shape: ${r.shape}.`));const i={x:a,weights:r},o={size:n,binaryOutput:s};return Ca.runKernel(nt,i,o)}}),pw=za({scatterND_:function(e,t,n){const s=Ma(e,"indices","scatterND","int32"),a=Ma(t,"updates","scatterND");uc(a,s,n);const r={indices:s,updates:a},i={shape:n};return Ca.runKernel(Dn,r,i)}}),dw=za({gatherND_:function(e,t){const n=Ma(t,"indices","gatherND","int32"),s={params:Ma(e,"x","gatherND","string_or_numeric"),indices:n};return Ca.runKernel($t,s)}}),fw=za({broadcastArgs_:function(e,t){const n=Ma(e,"s0","broadcastArgs","int32"),s=Ma(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==s.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${s.rank}`);const a={s0:n,s1:s};return Ca.runKernel(ze,a)}});function mw(e,t,n,s){const a=((e,t,n)=>{switch(e.category){case"arithmetic":return li((()=>((e,t,n)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[gi(ax("a",e,t,n),ax("b",e,t,n))];case"AddN":return[jx(ax("tensors",e,t,n))];case"FloorMod":case"Mod":return[Sd(ax("a",e,t,n),ax("b",e,t,n))];case"Mul":return[xo(ax("a",e,t,n),ax("b",e,t,n))];case"RealDiv":case"Div":return[no(ax("a",e,t,n),ax("b",e,t,n))];case"DivNoNan":return[pd(ax("a",e,t,n),ax("b",e,t,n))];case"FloorDiv":return[to(ax("a",e,t,n),ax("b",e,t,n))];case"Sub":return[wo(ax("a",e,t,n),ax("b",e,t,n))];case"Minimum":return[Eo(ax("a",e,t,n),ax("b",e,t,n))];case"Maximum":return[$o(ax("a",e,t,n),ax("b",e,t,n))];case"Pow":return[xu(ax("a",e,t,n),ax("b",e,t,n))];case"SquaredDifference":return[$u(ax("a",e,t,n),ax("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"basic_math":return li((()=>((e,t,n)=>{switch(e.op){case"Abs":case"ComplexAbs":return[mi(ax("x",e,t,n))];case"Acos":return[td(ax("x",e,t,n))];case"Acosh":return[nd(ax("x",e,t,n))];case"Asin":return[ad(ax("x",e,t,n))];case"Asinh":return[rd(ax("x",e,t,n))];case"Atan":return[id(ax("x",e,t,n))];case"Atan2":return[od(ax("x",e,t,n),ax("y",e,t,n))];case"Atanh":return[ld(ax("x",e,t,n))];case"Ceil":return[ud(ax("x",e,t,n))];case"Complex":return[Ba(ax("real",e,t,n),ax("imag",e,t,n))];case"Cos":return[Gp(ax("x",e,t,n))];case"Cosh":return[jp(ax("x",e,t,n))];case"Elu":return[so(ax("x",e,t,n))];case"Erf":return[fd(ax("x",e,t,n))];case"Exp":return[ro(ax("x",e,t,n))];case"Expm1":return[gd(ax("x",e,t,n))];case"Floor":return[co(ax("x",e,t,n))];case"Log":return[go(ax("x",e,t,n))];case"Log1p":return[yo(ax("x",e,t,n))];case"Imag":return[vl(ax("x",e,t,n))];case"Neg":return[Po(ax("x",e,t,n))];case"Reciprocal":return[Cd(ax("x",e,t,n))];case"Real":return[Il(ax("x",e,t,n))];case"Relu":return[Qo(ax("x",e,t,n))];case"Round":return[du(ax("x",e,t,n))];case"Selu":return[tl(ax("x",e,t,n))];case"Sigmoid":return[sl(ax("x",e,t,n))];case"Sin":return[Ch(ax("x",e,t,n))];case"Sign":return[Ed(ax("x",e,t,n))];case"Sinh":return[Ah(ax("x",e,t,n))];case"Softplus":return[cl(ax("x",e,t,n))];case"Sqrt":return[pl(ax("x",e,t,n))];case"Square":return[zo(ax("x",e,t,n))];case"Tanh":return[ml(ax("x",e,t,n))];case"Tan":return[Rd(ax("x",e,t,n))];case"ClipByValue":return[Wi(ax("x",e,t,n),ax("clipValueMin",e,t,n),ax("clipValueMax",e,t,n))];case"Relu6":return[Rl(ax("x",e,t,n))];case"Rsqrt":return[Uh(rx(e.inputNames[0],t,n))];case"Prod":return[$d(ax("x",e,t,n),ax("axes",e,t,n))];case"LeakyRelu":return[mo(ax("x",e,t,n),ax("alpha",e,t,n))];case"Prelu":return[qo(ax("x",e,t,n),ax("alpha",e,t,n))];case"IsNan":return[xd(rx(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"control":return(async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const s=ax("thenBranch",e,t,n),a=ax("elseBranch",e,t,n),r=ax("cond",e,t,n),i=ax("args",e,t,n);return(await r.data())[0]?n.functionMap[s].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap):n.functionMap[a].executeFunctionAsync(i,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const s=ax("body",e,t,n),a=ax("cond",e,t,n),r=ax("args",e,t,n),i=await n.functionMap[a].executeFunctionAsync(r,n.tensorArrayMap,n.tensorListMap),o=r.map((e=>e.id));let l=await i[0].data();i.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||e.dispose()}));let u=r;for(;l[0];){const e=u;u=await n.functionMap[s].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);const t=u.map((e=>e.id));e.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const r=await n.functionMap[a].executeFunctionAsync(u,n.tensorArrayMap,n.tensorListMap);l=await r[0].data(),r.forEach((e=>{e.kept||-1!==o.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return u}case"LoopCond":return[cx(ax("pred",e,t,n))];case"Switch":{const s=ax("pred",e,t,n);let a=ax("data",e,t,n);return a.kept||(a=cx(a)),(await s.data())[0]?[void 0,a]:[a,void 0]}case"Merge":{const s=e.inputNames.find((e=>void 0!==rx(e,t,n)));return s?[cx(rx(s,t,n))]:void 0}case"Enter":{const s=ax("frameName",e,t,n),a=ax("tensor",e,t,n);return n.enterFrame(s),[cx(a)]}case"Exit":{const s=ax("tensor",e,t,n);return n.exitFrame(),[cx(s)]}case"NextIteration":{const s=ax("tensor",e,t,n);return n.nextIteration(),[cx(s)]}case"TensorArrayV3":{const s=ax("size",e,t,n),a=ax("dtype",e,t,n),r=ax("elementShape",e,t,n),i=ax("dynamicSize",e,t,n),o=ax("clearAfterRead",e,t,n),l=ax("identicalElementShapes",e,t,n),u=ax("name",e,t,n),c=new Zx(u,a,s,r,l,i,o);return n.addTensorArray(c),[c.idTensor,di(1)]}case"TensorArrayWriteV3":{const s=ax("tensorArrayId",e,t,n),a=ax("index",e,t,n),r=ax("tensor",e,t,n),i=n.getTensorArray(s.id);return i.write(a,r),[i.idTensor]}case"TensorArrayReadV3":{const s=ax("tensorArrayId",e,t,n),a=ax("index",e,t,n);return[n.getTensorArray(s.id).read(a)]}case"TensorArrayGatherV3":{const s=ax("tensorArrayId",e,t,n),a=ax("indices",e,t,n),r=ax("dtype",e,t,n);return[n.getTensorArray(s.id).gather(a,r)]}case"TensorArrayScatterV3":{const s=ax("tensorArrayId",e,t,n),a=ax("indices",e,t,n),r=ax("tensor",e,t,n),i=n.getTensorArray(s.id);return i.scatter(a,r),[i.idTensor]}case"TensorArrayConcatV3":{const s=ax("tensorArrayId",e,t,n),a=n.getTensorArray(s.id),r=ax("dtype",e,t,n);return[a.concat(r)]}case"TensorArraySplitV3":{const s=ax("tensorArrayId",e,t,n),a=ax("tensor",e,t,n),r=ax("lengths",e,t,n),i=n.getTensorArray(s.id);return i.split(r,a),[i.idTensor]}case"TensorArraySizeV3":{const s=ax("tensorArrayId",e,t,n);return[di(n.getTensorArray(s.id).size(),"int32")]}case"TensorArrayCloseV3":{const s=ax("tensorArrayId",e,t,n),a=n.getTensorArray(s.id);return a.clearAndClose(),[a.idTensor]}case"TensorListSetItem":{const s=ax("tensorListId",e,t,n),a=ax("index",e,t,n),r=ax("tensor",e,t,n),i=n.getTensorList(s.id);return i.setItem(a,r),[i.idTensor]}case"TensorListGetItem":{const s=ax("tensorListId",e,t,n),a=ax("index",e,t,n),r=ax("elementShape",e,t,n),i=ax("elementDType",e,t,n);return[n.getTensorList(s.id).getItem(a,r,i)]}case"TensorListScatterV2":case"TensorListScatter":{const s=ax("indices",e,t,n),a=function(e,t,n,s){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const a=Math.max(...t);if(null!=s&&-1!==s&&a>=s)throw new Error(`Max index must be < array size (${a}  vs. ${s})`);const r=new Jx([],n,e.dtype,s),i=bl(e,0);return t.forEach(((e,t)=>{r.setItem(e,i[t])})),r}(ax("tensor",e,t,n),s,ax("elementShape",e,t,n),ax("numElements",e,t,n));return n.addTensorList(a),[a.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const s=ax("elementShape",e,t,n),a=ax("elementDType",e,t,n);let r;r="TensorListReserve"===e.op?"numElements":"maxNumElements";const i=function(e,t,n){return new Jx([],e,t,n)}(s,a,ax(r,e,t,n));return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const s=ax("tensorListId",e,t,n),a=ax("indices",e,t,n),r=ax("elementShape",e,t,n),i=ax("elementDType",e,t,n);return[n.getTensorList(s.id).gather(a,i,r)]}case"TensorListStack":{const s=ax("tensorListId",e,t,n),a=ax("elementShape",e,t,n),r=ax("elementDType",e,t,n),i=ax("numElements",e,t,n);return[n.getTensorList(s.id).stack(a,r,i)]}case"TensorListFromTensor":{const s=function(e,t,n){const s=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);qx(e.shape.slice(1),t,"TensorList shape mismatch: ");const a=bl(e);return new Jx(a,t,s)}(ax("tensor",e,t,n),ax("elementShape",e,t,n),ax("elementDType",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const s=ax("tensorListId",e,t,n),a=n.getTensorList(s.id),r=ax("dtype",e,t,n),i=ax("elementShape",e,t,n);return[a.concat(r,i)]}case"TensorListPushBack":{const s=ax("tensorListId",e,t,n),a=ax("tensor",e,t,n),r=n.getTensorList(s.id);return r.pushBack(a),[r.idTensor]}case"TensorListPopBack":{const s=ax("tensorListId",e,t,n),a=ax("elementShape",e,t,n),r=ax("elementDType",e,t,n);return[n.getTensorList(s.id).popBack(a,r)]}case"TensorListSplit":{const s=ax("tensor",e,t,n),a=ax("elementShape",e,t,n),r=function(e,t,n){let s=0;const a=t.map((e=>(s+=e,s)));if(s!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${s}, and tensor's shape is: ${e.shape}`);const r=Yx(e.shape.slice(1),n),i=0===s?0:e.size/s,o=li((()=>{const n=[];e=_i(e,[1,s,i]);for(let s=0;s<t.length;++s){const o=[0,0===s?0:a[s-1],0],l=[1,t[s],i];n[s]=_i(al(e,o,l),r)}return e.dispose(),n})),l=new Jx([],n,e.dtype,t.length);for(let e=0;e<o.length;e++)l.setItem(e,o[e]);return l}(s,ax("lengths",e,t,n),a);return n.addTensorList(r),[r.idTensor]}case"TensorListLength":{const s=ax("tensorListId",e,t,n);return[di(n.getTensorList(s.id).size(),"int32")]}case"TensorListResize":{const s=ax("tensorListId",e,t,n),a=ax("size",e,t,n),r=n.getTensorList(s.id).resize(a);return n.addTensorList(r),[r.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"convolution":return li((()=>((e,t,n)=>{switch(e.op){case"Conv1D":{const s=ax("stride",e,t,n),a=ax("pad",e,t,n),r=ax("dataFormat",e,t,n).toUpperCase(),i=ax("dilation",e,t,n);return[Ki(ax("x",e,t,n),ax("filter",e,t,n),s,a,r,i)]}case"Conv2D":{const s=ax("strides",e,t,n),a=ux(e,t,n),r=ax("dataFormat",e,t,n).toUpperCase(),i=ax("dilations",e,t,n);return[qi(ax("x",e,t,n),ax("filter",e,t,n),[s[1],s[2]],a,r,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:a,dataFormat:r,dilations:i,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=ew(e,t,n);return[Ll({x:ax("x",e,t,n),filter:ax("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:r,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:a,dataFormat:r,dilations:i,biasArg:o,preluArg:l,activationFunc:u,leakyreluAlpha:c}=ew(e,t,n);return[Pl({x:ax("x",e,t,n),filter:ax("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:r,dilations:[i[1],i[2]],bias:o,activation:u,preluActivationWeights:l,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=ax("outputShape",e,t,n),a=ax("strides",e,t,n),r=ux(e,t,n);return[Yi(ax("x",e,t,n),ax("filter",e,t,n),s,[a[1],a[2]],r)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=ax("strides",e,t,n),a=ux(e,t,n),r=ax("dilations",e,t,n),i=ax("dataFormat",e,t,n).toUpperCase();return[eo(ax("input",e,t,n),ax("filter",e,t,n),[s[1],s[2]],a,i,[r[1],r[2]])]}case"Conv3D":{const s=ax("strides",e,t,n),a=ax("pad",e,t,n),r=ax("dataFormat",e,t,n).toUpperCase(),i=ax("dilations",e,t,n);return[Zi(ax("x",e,t,n),ax("filter",e,t,n),[s[1],s[2],s[3]],a,r,[i[1],i[2],i[3]])]}case"AvgPool":{const s=ax("strides",e,t,n),a=ax("pad",e,t,n),r=ax("kernelSize",e,t,n);return[Oi(ax("x",e,t,n),[r[1],r[2]],[s[1],s[2]],a)]}case"MaxPool":{const s=ax("strides",e,t,n),a=ax("pad",e,t,n),r=ax("kernelSize",e,t,n);return[So(ax("x",e,t,n),[r[1],r[2]],[s[1],s[2]],a)]}case"MaxPoolWithArgmax":{const s=ax("strides",e,t,n),a=ax("pad",e,t,n),r=ax("kernelSize",e,t,n),i=ax("includeBatchInIndex",e,t,n),{result:o,indexes:l}=Qx(ax("x",e,t,n),[r[1],r[2]],[s[1],s[2]],a,i);return[o,l]}case"AvgPool3D":{const s=ax("strides",e,t,n),a=ax("pad",e,t,n),r=ax("kernelSize",e,t,n);return[Mi(ax("x",e,t,n),[r[1],r[2],r[3]],[s[1],s[2],s[3]],a)]}case"MaxPool3D":{const s=ax("strides",e,t,n),a=ax("pad",e,t,n),r=ax("kernelSize",e,t,n);return[To(ax("x",e,t,n),[r[1],r[2],r[3]],[s[1],s[2],s[3]],a)]}case"Dilation2D":{const s=ax("strides",e,t,n),a=ax("pad",e,t,n),r=ax("dilations",e,t,n),i=s[1],o=s[2],l=r[1],u=r[2];return[hd(ax("x",e,t,n),ax("filter",e,t,n),[i,o],a,[l,u],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"creation":return li((()=>((e,t,n)=>{switch(e.op){case"Fill":{const s=ax("shape",e,t,n),a=ax("dtype",e,t,n);return[uo(s,ax("value",e,t,n),a)]}case"LinSpace":return[tw(ax("start",e,t,n),ax("stop",e,t,n),ax("num",e,t,n))];case"Multinomial":{const s=ax("logits",e,t,n),a=ax("numSamples",e,t,n),r=ax("seed",e,t,n);return[nw(s,a,r)]}case"OneHot":{const s=ax("indices",e,t,n),a=ax("depth",e,t,n),r=ax("onValue",e,t,n),i=ax("offValue",e,t,n);return[Vo(s,a,r,i)]}case"Ones":return[Go(ax("shape",e,t,n),ax("dtype",e,t,n))];case"OnesLike":return[Ho(ax("x",e,t,n))];case"RandomUniform":return[Jo(ax("shape",e,t,n),ax("minval",e,t,n),ax("maxval",e,t,n),ax("dtype",e,t,n))];case"Range":return[fu(ax("start",e,t,n),ax("stop",e,t,n),ax("step",e,t,n),ax("dtype",e,t,n))];case"TruncatedNormal":{const s=ax("shape",e,t,n),a=ax("mean",e,t,n),r=ax("stdDev",e,t,n),i=ax("seed",e,t,n);return[yl(s,a,r,ax("dtype",e,t,n),i)]}case"Zeros":return[Uo(ax("shape",e,t,n),ax("dtype",e,t,n))];case"ZerosLike":return[kl(ax("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"dynamic":return(async(e,t,n)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:s,scores:a,maxOutputSize:r,iouThreshold:i,scoreThreshold:o,softNmsSigma:l}=aw(e,t,n),u=await Mu.nonMaxSuppressionWithScoreAsync(s,a,r,i,o,l);return[u.selectedIndices,u.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:s,scores:a,maxOutputSize:r,iouThreshold:i,scoreThreshold:o}=aw(e,t,n),l=ax("padToMaxOutputSize",e,t,n),u=await Mu.nonMaxSuppressionPaddedAsync(s,a,r,i,o,l);return[u.selectedIndices,u.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:s,scores:a,maxOutputSize:r,iouThreshold:i,scoreThreshold:o}=aw(e,t,n);return[await Mu.nonMaxSuppressionAsync(s,a,r,i,o)]}case"Where":{const s=Nr(ax("condition",e,t,n),"bool"),a=[await sw(s)];return s.dispose(),a}case"ListDiff":return async function(e,t){const n=Ma(e,"x","setdiff1d"),s=Ma(t,"y","setdiff1d");R(n.dtype===s.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${s.dtype}).`)),R(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),R(1===s.rank,(()=>`y should be 1D tensor, but got y (${s.shape}).`));const a=await n.data(),r=await s.data(),i=new Set(r);let o=0;for(let e=0;e<a.length;e++)i.has(a[e])||o++;const l=new ra([o],n.dtype),u=new ra([o],"int32");for(let e=0,t=0;e<a.length;e++)i.has(a[e])||(l.values[t]=a[e],u.values[t]=e,t++);return[l.toTensor(),u.toTensor()]}(ax("x",e,t,n),ax("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return li((()=>((e,t,n)=>{switch(e.op){case"LowerBound":return[(s=ax("sortedSequence",e,t,n),a=ax("values",e,t,n),iw(s,a,"left"))];case"TopKV2":{const s=ax("x",e,t,n),a=ax("k",e,t,n),r=ax("sorted",e,t,n),i=Fd(s,a,r);return[i.values,i.indices]}case"UpperBound":return[ow(ax("sortedSequence",e,t,n),ax("values",e,t,n))];case"Unique":{const s=ax("x",e,t,n),a=Dd(s);return[a.values,a.indices]}case"UniqueV2":{const s=ax("x",e,t,n),a=ax("axis",e,t,n),r=Dd(s,a);return[r.values,r.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}var s,a})(e,t,n)));case"image":return li((()=>((e,t,n)=>{switch(e.op){case"ResizeBilinear":{const s=ax("images",e,t,n),a=ax("size",e,t,n),r=ax("alignCorners",e,t,n),i=ax("halfPixelCenters",e,t,n);return[Mu.resizeBilinear(s,[a[0],a[1]],r,i)]}case"ResizeNearestNeighbor":{const s=ax("images",e,t,n),a=ax("size",e,t,n),r=ax("alignCorners",e,t,n),i=ax("halfPixelCenters",e,t,n);return[Mu.resizeNearestNeighbor(s,[a[0],a[1]],r,i)]}case"CropAndResize":{const s=ax("image",e,t,n),a=ax("boxes",e,t,n),r=ax("boxInd",e,t,n),i=ax("cropSize",e,t,n),o=ax("method",e,t,n),l=ax("extrapolationValue",e,t,n);return[Mu.cropAndResize(s,a,r,i,o,l)]}case"ImageProjectiveTransformV3":{const s=ax("images",e,t,n),a=ax("transforms",e,t,n),r=ax("outputShape",e,t,n),i=ax("fillValue",e,t,n),o=ax("interpolation",e,t,n),l=ax("fillMode",e,t,n);return[Mu.transform(s,a,o.toLowerCase(),l.toLowerCase(),i,r)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"graph":return li((()=>((e,t,n)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const s=ax("default",e,t,n);return[rx(e.name,t,n)||s];case"Placeholder":return[rx(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[cx(ax("x",e,t,n))];case"IdentityN":return ax("x",e,t,n).map((e=>cx(e)));case"Shape":return[gl(ax("x",e,t,n).shape,"int32")];case"ShapeN":return ax("x",e,t,n).map((e=>gl(e.shape)));case"Size":return[di(ax("x",e,t,n).size,"int32")];case"Rank":return[di(ax("x",e,t,n).rank,"int32")];case"NoOp":return[di(1)];case"Print":const a=ax("x",e,t,n),r=ax("data",e,t,n),i=ax("message",e,t,n),o=ax("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<r.length;e++)console.log(Array.prototype.slice.call(r[e].dataSync()).slice(0,o));return[a];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"logical":return li((()=>((e,t,n)=>{switch(e.op){case"Equal":return[ao(ax("a",e,t,n),ax("b",e,t,n))];case"NotEqual":return[Wo(ax("a",e,t,n),ax("b",e,t,n))];case"Greater":return[po(ax("a",e,t,n),ax("b",e,t,n))];case"GreaterEqual":return[fo(ax("a",e,t,n),ax("b",e,t,n))];case"Less":return[lp(ax("a",e,t,n),ax("b",e,t,n))];case"LessEqual":return[pu(ax("a",e,t,n),ax("b",e,t,n))];case"LogicalAnd":return[Io(ax("a",e,t,n),ax("b",e,t,n))];case"LogicalNot":return[Bp(ax("a",e,t,n))];case"LogicalOr":return[vd(ax("a",e,t,n),ax("b",e,t,n))];case"Select":case"SelectV2":return[wl(ax("condition",e,t,n),ax("a",e,t,n),ax("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"matrices":return li((()=>((e,t,n)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[No(ax("a",e,t,n),ax("b",e,t,n),ax("transposeA",e,t,n),ax("transposeB",e,t,n))];case"Einsum":return[uw(ax("equation",e,t,n),...ax("tensors",e,t,n))];case"Transpose":return[Nl(ax("x",e,t,n),ax("perm",e,t,n))];case"_FusedMatMul":const[s,a]=ax("fusedOps",e,t,n),r="biasadd"===s,i="prelu"===a,o=ax("numArgs",e,t,n),l=ax("leakyreluAlpha",e,t,n);if(r){if(i&&2!==o)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==o)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[u,c]=ax("args",e,t,n);return[Wl({a:ax("a",e,t,n),b:ax("b",e,t,n),transposeA:ax("transposeA",e,t,n),transposeB:ax("transposeB",e,t,n),bias:u,activation:a,preluActivationWeights:c,leakyreluAlpha:l})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"normalization":return li((()=>((e,t,n)=>{switch(e.op){case"EuclideanNorm":return[md(ax("x",e,t,n),ax("axis",e,t,n),ax("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[Li(ax("x",e,t,n),ax("mean",e,t,n),ax("variance",e,t,n),ax("offset",e,t,n),ax("scale",e,t,n),ax("epsilon",e,t,n))];case"LRN":return[wd(ax("x",e,t,n),ax("radius",e,t,n),ax("bias",e,t,n),ax("alpha",e,t,n),ax("beta",e,t,n))];case"Softmax":return[ul(ax("x",e,t,n))];case"LogSoftmax":return[vo(ax("x",e,t,n))];case"SparseToDense":return[cw(ax("sparseIndices",e,t,n),ax("outputShape",e,t,n),ax("sparseValues",e,t,n),ax("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"reduction":return li((()=>((e,t,n)=>{switch(e.op){case"Max":{const s=ax("axis",e,t,n),a=ax("keepDims",e,t,n);return[bo(ax("x",e,t,n),s,a)]}case"Mean":{const s=ax("axis",e,t,n),a=ax("keepDims",e,t,n);return[Co(ax("x",e,t,n),s,a)]}case"Min":{const s=ax("axis",e,t,n),a=ax("keepDims",e,t,n);return[bu(ax("x",e,t,n),s,a)]}case"Sum":{const s=ax("axis",e,t,n),a=ax("keepDims",e,t,n);return[ko(ax("x",e,t,n),s,a)]}case"All":{const s=ax("axis",e,t,n),a=ax("keepDims",e,t,n);return[yi(ax("x",e,t,n),s,a)]}case"Any":{const s=ax("axis",e,t,n),a=ax("keepDims",e,t,n);return[bi(ax("x",e,t,n),s,a)]}case"ArgMax":{const s=ax("axis",e,t,n);return[xi(ax("x",e,t,n),s)]}case"ArgMin":{const s=ax("axis",e,t,n);return[sd(ax("x",e,t,n),s)]}case"Prod":{const s=ax("axis",e,t,n),a=ax("keepDims",e,t,n);return[$d(ax("x",e,t,n),s,a)]}case"Cumprod":{const s=ax("axis",e,t,n),a=ax("exclusive",e,t,n),r=ax("reverse",e,t,n);return[$p(ax("x",e,t,n),s,a,r)]}case"Cumsum":{const s=ax("axis",e,t,n),a=ax("exclusive",e,t,n),r=ax("reverse",e,t,n);return[Fh(ax("x",e,t,n),s,a,r)]}case"Bincount":const s=ax("x",e,t,n),a=ax("weights",e,t,n),r=ax("size",e,t,n);return[hu(s,a,r)];case"DenseBincount":{const s=ax("x",e,t,n),a=ax("weights",e,t,n),r=ax("size",e,t,n),i=ax("binaryOutput",e,t,n);return[hw(s,a,r,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"slice_join":return li((()=>((e,t,n)=>{switch(e.op){case"ConcatV2":case"Concat":{const s=ax("n",e,t,n),a=ax("axis",e,t,n);let r=ax("tensors",e,t,n);return r=r.slice(0,s),[Vi(r,a)]}case"Gather":{const s=ax("x",e,t,n),a=ax("indices",e,t,n);return[ho(s,Nr(a,"int32"),0)]}case"GatherV2":{const s=ax("axis",e,t,n),a=ax("batchDims",e,t,n),r=ax("x",e,t,n),i=ax("indices",e,t,n);return[ho(r,Nr(i,"int32"),s,a)]}case"Reverse":{const s=ax("dims",e,t,n),a=[];for(let e=0;e<s.length;e++)s[e]&&a.push(e);const r=ax("x",e,t,n);return[el(r,a)]}case"ReverseV2":{const s=ax("axis",e,t,n),a=ax("x",e,t,n);return[el(a,s)]}case"Slice":{const s=ax("begin",e,t,n),a=ax("size",e,t,n);return[al(ax("x",e,t,n),s,a)]}case"StridedSlice":{const s=ax("begin",e,t,n),a=ax("end",e,t,n),r=ax("strides",e,t,n),i=ax("beginMask",e,t,n),o=ax("endMask",e,t,n),l=ax("ellipsisMask",e,t,n),u=ax("newAxisMask",e,t,n),c=ax("shrinkAxisMask",e,t,n),h=ax("x",e,t,n);return[Ad(h,s,a,r,i,o,l,u,c)]}case"Pack":return li((()=>{const s=ax("axis",e,t,n),a=ax("tensors",e,t,n),r=a[0].shape,i=dl(a[0]).shape,o=a.map((e=>{const t=M(e.shape,r);if(!t&&!M(dl(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:_i(e,r)}));return[fl(o,s)]}));case"Unpack":{const s=ax("axis",e,t,n),a=ax("tensor",e,t,n);return bl(a,s)}case"Tile":{const s=ax("reps",e,t,n);return[oo(ax("x",e,t,n),s)]}case"Split":case"SplitV":{const s=ax("axis",e,t,n),a=ax("numOrSizeSplits",e,t,n),r=ax("x",e,t,n);return hl(r,a,s)}case"ScatterNd":{const s=ax("indices",e,t,n),a=ax("values",e,t,n),r=ax("shape",e,t,n);return[pw(s,a,r)]}case"GatherNd":{const s=ax("x",e,t,n),a=ax("indices",e,t,n);return[dw(s,a)]}case"SparseToDense":{const s=ax("sparseIndices",e,t,n),a=ax("outputShape",e,t,n),r=ax("sparseValues",e,t,n),i=ax("defaultValue",e,t,n);return[cw(s,r,a,r.dtype===i.dtype?i:Nr(i,r.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"sparse":return li((()=>((e,t,n)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:s,outputValues:a,emptyRowIndicator:r,reverseIndexMap:i}=zu.sparseFillEmptyRows(ax("indices",e,t,n),ax("values",e,t,n),ax("denseShape",e,t,n),ax("defaultValue",e,t,n));return[s,a,r,i]}case"SparseReshape":{const{outputIndices:s,outputShape:a}=zu.sparseReshape(ax("inputIndices",e,t,n),ax("inputShape",e,t,n),ax("newShape",e,t,n));return[s,a]}case"SparseSegmentMean":return[zu.sparseSegmentMean(ax("data",e,t,n),ax("indices",e,t,n),ax("segmentIds",e,t,n))];case"SparseSegmentSum":return[zu.sparseSegmentSum(ax("data",e,t,n),ax("indices",e,t,n),ax("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"spectral":return li((()=>((e,t,n)=>{switch(e.op){case"FFT":return[Tl(ax("x",e,t,n))];case"IFFT":return[Cl(ax("x",e,t,n))];case"RFFT":return[$l(ax("x",e,t,n))];case"IRFFT":return[El(ax("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"string":return li((()=>((e,t,n)=>{switch(e.op){case"StringNGrams":{const{nGrams:s,nGramsSplits:a}=Bu.stringNGrams(ax("data",e,t,n),ax("dataSplits",e,t,n),ax("separator",e,t,n),ax("nGramWidths",e,t,n),ax("leftPad",e,t,n),ax("rightPad",e,t,n),ax("padWidth",e,t,n),ax("preserveShortSequences",e,t,n));return[s,a]}case"StringSplit":{const{indices:s,values:a,shape:r}=Bu.stringSplit(ax("input",e,t,n),ax("delimiter",e,t,n),ax("skipEmpty",e,t,n));return[s,a,r]}case"StringToHashBucketFast":return[Bu.stringToHashBucketFast(ax("input",e,t,n),ax("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"transformation":return li((()=>((e,t,n)=>{switch(e.op){case"Cast":return[Nr(ax("x",e,t,n),ax("dtype",e,t,n))];case"ExpandDims":{const s=ax("axis",e,t,n);return[io(ax("x",e,t,n),s)]}case"Squeeze":{const s=ax("axis",e,t,n);return[dl(ax("x",e,t,n),s)]}case"Reshape":return[_i(ax("x",e,t,n),ax("shape",e,t,n))];case"MirrorPad":return[Nd(ax("x",e,t,n),ax("padding",e,t,n),ax("mode",e,t,n))];case"PadV2":case"Pad":return[jo(ax("x",e,t,n),ax("padding",e,t,n),ax("constantValue",e,t,n))];case"SpaceToBatchND":{const s=ax("blockShape",e,t,n),a=ax("paddings",e,t,n);return[gh(ax("x",e,t,n),s,a)]}case"BatchToSpaceND":{const s=ax("blockShape",e,t,n),a=ax("crops",e,t,n);return[Zp(ax("x",e,t,n),s,a)]}case"DepthToSpace":{const s=ax("blockSize",e,t,n),a=ax("dataFormat",e,t,n).toUpperCase();return[cd(ax("x",e,t,n),s,a)]}case"BroadcastTo":return[xl(ax("x",e,t,n),ax("shape",e,t,n))];case"BroadcastArgs":return[fw(ax("s0",e,t,n),ax("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n)));case"hash_table":return(async(e,t,n,s)=>{switch(e.op){case"HashTable":case"HashTableV2":{const a=ax("keyDType",e,t,n),r=ax("valueDType",e,t,n),i=new lw(a,r);return s.addHashTable(e.name,i),[i.handle]}case"LookupTableImport":case"LookupTableImportV2":{const a=ax("tableHandle",e,t,n,s),r=ax("keys",e,t,n),i=ax("values",e,t,n),o=s.getHashTableById(a.id);return[await o.import(r,i)]}case"LookupTableFind":case"LookupTableFindV2":{const a=ax("tableHandle",e,t,n,s),r=ax("keys",e,t,n),i=ax("defaultValue",e,t,n),o=s.getHashTableById(a.id);return[await o.find(r,i)]}case"LookupTableSize":case"LookupTableSizeV2":{const a=ax("tableHandle",e,t,n,s);return[s.getHashTableById(a.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,s);case"custom":const a=sx(e.op);if(a&&a.customExecutor)return a.customExecutor(new Hx(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return ue(a)?a.then((e=>[].concat(e))):[].concat(a)}class gw{constructor(e={},t={},n={},s={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=s,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function yw(e,t,n,s){const a=new Set,r=[];let i=null,o=null;const l=new Set,u=Object.keys(e).map((e=>lx(e)[0]));let c=[];null!=s&&(c=s.map((e=>lx(e.name)[0])));const h=[...t];for(;h.length>0;){const e=h.pop();(kw(e)||vw(e)||Iw(e))&&null==i&&(i=e,o=i.children.map((e=>e.name)).filter((e=>a.has(e)))),a.add(e.name),null==n[e.name]&&-1===u.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{l.has(e.name)||(l.add(e.name),h.push(e))})):r.push(e.name))}return{inputs:e,outputs:t,usedNodes:a,missingInputs:r,dynamicNode:i,syncInputs:o}}const bw=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],xw=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],ww=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function kw(e){return bw.indexOf(e.op)>=0}function vw(e){return xw.indexOf(e.op)>=0}function Iw(e){return ww.indexOf(e.op)>=0}class Nw{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new Nw(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),s=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+s.join(this.SEPERATOR)}compile(e,t){const n=yw(e,t,this.weightMap,this._initNodes),{missingInputs:s,dynamicNode:a,syncInputs:r}=n;if(null!=a)throw new Error(`This execution contains the node '${a.name}', which has the dynamic op '${a.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${r}]`);if(s.length>0){const n=t.map((e=>e.name)),a=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${a}]. Missing the following inputs: [${s}]`)}return function(e,t,n){const{usedNodes:s,inputs:a}=n,r=[],i=Object.keys(a).map((e=>lx(e)[0])).map((t=>e.nodes[t])),o=e.initNodes;i.forEach((e=>{s.has(e.name)&&r.push(e)})),e.weights.forEach((e=>{s.has(e.name)&&r.push(e)})),null!=o&&o.forEach((e=>{s.has(e.name)&&r.push(e)}));const l=new Set,u=[];for(;r.length>0;){const e=r.pop();l.add(e.name),t[e.name]||u.push(e),e.children.forEach((e=>{!l.has(e.name)&&s.has(e.name)&&e.inputs.every((e=>l.has(e.name)))&&r.push(e)}))}return u}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const s=n.map((e=>this.graph.nodes[lx(e)[0]])),a=t.map((e=>lx(e)[0]));let r=a.map((e=>this.graph.nodes[e]));this.resetIntermediateTensors(),0===r.length&&(r=this._outputs);const i=this.getCompilationKey(s,r);let o=this.compiledMap.get(i);null==o&&(o=this.compile(e,r),this.compiledMap.set(i,o));const l={},u={};return li((()=>{const n=new gw(this.weightMap,l,u,this.functionExecutorMap),s=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,a]=lx(t),r=[];r[a]=e[t],s[n]=r}));const r=this.getFrozenTensorIds(s),i={};for(let e=0;e<o.length;e++){const t=o[e];if(!s[t.name]){const e=mw(t,s,n,this._resourceManager);if(ue(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);s[t.name]=e,this.checkTensorForDisposal(t.name,t,s,n,r,a,i)}}return null==this.parent&&n.dispose(r),t.map((e=>rx(e,s,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,s,a,r,i){"control"!==t.category&&-1===r.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(i[e.id]=(i[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const r=function(e,t,n){return t[ox(e,n.currentContextId)]}(e.name,n,s);null!=r&&r.forEach((e=>{if(e&&!e.kept&&!a.has(e.id)){const n=i[e.id];if(1===n){if(this.keepTensorForDebug){const[n,a]=ix(t.name,s);this.intermediateTensors[n]||(this.intermediateTensors[n]=[]),this.intermediateTensors[n][a]=e}else e.dispose();delete i[e.id]}else null!=n&&i[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.intermediateTensors&&(Object.keys(this.intermediateTensors).forEach((e=>this.intermediateTensors[e].forEach((e=>e.dispose())))),this.disposeTensorsMap())}disposeTensorsMap(){this.tensorsMap&&Object.keys(this.tensorsMap).forEach((e=>{this.tensorsMap[e].forEach((e=>{!e||e.kept||e.isDisposed||this.keepIds.has(e.id)||e.dispose()}))}))}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(const e in this.intermediateTensors)this.intermediateTensors[e].forEach((e=>e.dispose())),delete this.intermediateTensors[e]}async _executeAsync(e,t,n=!1,s={},a={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepTensorForDebug=pe().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){console.warn(e.message)}this.resetIntermediateTensors();const r=new gw(this.weightMap,s,a,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(e,r,t,n);const i=t.map((e=>rx(e,this.tensorsMap,r))),o=i.map((e=>e.id)),l=Object.keys(e).map((t=>e[t].id));return this.keepIds=new Set([...o,...l,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),null==this.parent&&r.dispose(this.keepIds),i}async executeFunctionAsync(e,t,n){const s=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(s,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,s){const a=Object.keys(e),r=a.map((e=>this.graph.nodes[lx(e)[0]])),i=n.map((e=>lx(e)[0]));let o=i.map((e=>this.graph.nodes[e]));0===o.length&&(o=this._outputs);const{usedNodes:l,missingInputs:u,dynamicNode:c,syncInputs:h}=yw(e,o,this.weightMap,this._initNodes),p=[...r,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),d=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,s]=lx(t),a=[];a[s]=e[t],d[n]=a}));const f={},m=this.getFrozenTensorIds(d),g={};for(;p.length>0;){const e=this.processStack(r,p,t,d,g,m,i,f,l);await Promise.all(e)}null!=c||s||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=o.filter((e=>!kw(e)&&!rx(e.name,d,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${h}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${a}]. Consider providing the following inputs: [${u}]. ${e}`)}return d}processStack(e,t,n,s,a,r,i,o,l){const u=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&ax("isConstant",e.node,s,n)&&([c]=ix(e.node.name,n)),null==s[e.node.name]){const h=mw(e.node,s,n,this._resourceManager);c||([c]=ix(e.node.name,n));const p=n.currentContext;ue(h)?u.push(h.then((u=>(s[c]=u,n.currentContext=p,this.checkTensorForDisposal(c,e.node,s,n,r,i,o),this.processChildNodes(e.node,t,n,s,a,l),u)))):(s[c]=h,this.checkTensorForDisposal(c,e.node,s,n,r,i,o),this.processChildNodes(e.node,t,n,s,a,l))}else this.processChildNodes(e.node,t,n,s,a,l)}return u}processChildNodes(e,t,n,s,a,r){e.children.forEach((e=>{const[i]=ix(e.name,n);!a[i]&&r.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!rx(e,s,n)))&&(a[i]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!rx(e,s,n)))&&(a[i]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[s]=lx(t),a=this.graph.nodes[s];if(a.attrParams.shape&&a.attrParams.shape.value){const e=a.attrParams.shape.value;R(e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t)),(()=>`The shape of dict['${a.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}a.attrParams.dtype&&a.attrParams.dtype.value&&R(n.dtype===a.attrParams.dtype.value,(()=>`The dtype of dict['${a.name}'] provided in model.execute(dict) must be ${a.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]?t[this._signature.inputs[n].name]=e[n]:t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=lx(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]?this._signature.outputs[e].name:e),{})}checkOutputs(e){e.forEach((e=>{const[t]=lx(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class Sw{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class Tw{constructor(e,t={}){this.modelUrl=e,this.loadOptions=t,this.version="n/a",null==t&&(this.loadOptions={}),this.resourceManager=new Sw}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=_r(e,this.loadOptions);else{const s=(t=e,n=this.loadOptions,Za.getLoadHandlers(t,n));if(0===s.length)s.push(_r(e,this.loadOptions));else if(s.length>1)throw new Error(`Found more than one (${s.length}) load handlers for URL '${[e]}'`);this.handler=s[0]}var t,n}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return ue(e)?e.then((e=>this.loadSync(e))):this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n;n=null!=this.artifacts.userDefinedMetadata&&null!=this.artifacts.userDefinedMetadata.signature?this.artifacts.userDefinedMetadata.signature:this.artifacts.signature,this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const s=function(e,t){const n={};let s,a=0;for(const r of t){const t=r.name,i=r.dtype,o=r.shape,l=O(o);let u;if("quantization"in r){const n=r.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${r.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${r.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==i)throw new Error(`Weight ${r.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${i}.`)}const o=Va[n.dtype],c=e.slice(a,a+l*o),h="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===i)if("uint8"===n.dtype||"uint16"===n.dtype){u=new Float32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===s&&(s=Ya()),u=s(h)}else{if("int32"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);u=new Int32Array(h.length);for(let e=0;e<h.length;e++){const t=h[e];u[e]=Math.round(t*n.scale+n.min)}}a+=l*o}else if("string"===i){const t=O(r.shape);u=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(a,a+4))[0];a+=4;const n=new Uint8Array(e.slice(a,a+t));u.push(n),a+=t}}else{const s=Va[i],r=e.slice(a,a+l*s);if("float32"===i)u=new Float32Array(r);else if("int32"===i)u=new Int32Array(r);else if("bool"===i)u=new Uint8Array(r);else{if("complex64"!==i)throw new Error(`Unsupported dtype in weight '${t}': ${i}`);{u=new Float32Array(r);const e=new Float32Array(u.length/2),s=new Float32Array(u.length/2);for(let t=0;t<e.length;t++)e[t]=u[2*t],s[t]=u[2*t+1];const a=Wa(e,o,"float32"),i=Wa(s,o,"float32");n[t]=Ba(a,i),a.dispose(),i.dispose()}}a+=l*s}"complex64"!==i&&(n[t]=Wa(u,o,i))}return n}(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new Nw(Ax.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(s),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=Ax.Instance.transformGraph(e.modelInitializer);this.initializer=new Nw(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=Ja(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){return this.execute(e,this.outputNodes)}normalizeInputs(e){if(!(e instanceof ua||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,s)=>(t[n]=e[s],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}function $w(e,t,n=new Map,s=new Set){if(null==e)return null;if("function"==typeof Blob&&e instanceof Blob)return e.slice();if(s.has(e))throw new Error("Circular references are not supported.");if(n.has(e))return n.get(e);const a=t(e);if(a.recurse&&null!==a.value)throw new Error("A deep map function may not return both a value and recurse=true.");if(a.recurse){if(Rw(e)){const a=Array.isArray(e)?[]:{};s.add(e);for(const r in e){const i=$w(e[r],t,n,s);a[r]=i}return s.delete(e),e.__proto__&&(a.__proto__=e.__proto__),a}throw new Error(`Can't recurse into non-iterable type: ${e}`)}return n.set(e,a.value),a.value}function Cw(e,t=Aw){return Ew(e,t)}function Ew(e,t,n=new Set){const s=e[0];if(n.has(s))throw new Error("Circular references are not supported.");const a=t(e);if(a.recurse&&null!==a.value)throw new Error("A deep zip function may not return both a value and recurse=true.");if(a.recurse){if(Rw(s)){const a=Array.isArray(s)?[]:{};n.add(s);for(const r in s){const s=Ew(e.map((e=>e[r])),t,n);a[r]=s}return n.delete(s),a}throw new Error(`Can't recurse into non-iterable type: ${s}`)}return a.value}function Aw(e){return null===e?null:Rw(e[0])?{value:null,recurse:!0}:{value:e,recurse:!1}}function Rw(e){let t=!1;if(pe().get("IS_BROWSER"))t=e instanceof TextDecoder;else{const{StringDecoder:s}=n(977);t=e instanceof s}return null!=e&&!ArrayBuffer.isView(e)&&(Array.isArray(e)||"object"==typeof e&&!(e instanceof ua)&&!(e instanceof Promise)&&!t)}function Fw(e){return $w(e,Dw)}function Dw(e){return e instanceof ua?{value:e.clone(),recurse:!1}:Rw(e)?{value:null,recurse:!0}:{value:e,recurse:!1}}class _w{constructor(e){if(this.capacity=e,this.begin=0,this.end=0,null==e)throw new RangeError("Can't create a ring buffer of unknown capacity.");if(e<1)throw new RangeError("Can't create ring buffer of capacity < 1.");this.data=new Array(e),this.doubledCapacity=2*e}wrap(e){for(;e<0;)e+=this.doubledCapacity;return e%this.doubledCapacity}get(e){if(e<0)throw new RangeError("Can't get item at a negative index.");return this.data[e%this.capacity]}set(e,t){if(e<0)throw new RangeError("Can't set item at a negative index.");this.data[e%this.capacity]=t}length(){let e=this.end-this.begin;return e<0&&(e=this.doubledCapacity+e),e}isFull(){return this.length()===this.capacity}isEmpty(){return 0===this.length()}push(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.set(this.end,e),this.end=this.wrap(this.end+1)}pushAll(e){for(const t of e)this.push(t)}pop(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");this.end=this.wrap(this.end-1);const e=this.get(this.end);return this.set(this.end,void 0),e}unshift(e){if(this.isFull())throw new RangeError("Ring buffer is full.");this.begin=this.wrap(this.begin-1),this.set(this.begin,e)}shift(){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const e=this.get(this.begin);return this.set(this.begin,void 0),this.begin=this.wrap(this.begin+1),e}shuffleExcise(e){if(this.isEmpty())throw new RangeError("Ring buffer is empty.");const t=this.wrap(this.begin+e),n=this.get(t);return this.set(t,this.pop()),n}}class Ow extends _w{constructor(){super(Ow.INITIAL_CAPACITY)}isFull(){return!1}push(e){super.isFull()&&this.expand(),super.push(e)}unshift(e){super.isFull()&&this.expand(),super.unshift(e)}expand(){const e=2*this.capacity,t=new Array(e),n=this.length();for(let e=0;e<n;e++)t[e]=this.get(this.wrap(this.begin+e));this.data=t,this.capacity=e,this.doubledCapacity=2*this.capacity,this.begin=0,this.end=n}}Ow.INITIAL_CAPACITY=32;class Mw{async toArray(){const e=[];let t=await this.next();for(;!t.done;)e.push(t.value),t=await this.next();return e}async toArrayForTest(){const e=this.prefetch(100),t=[];let n=await e.next();for(;!n.done;)t.push(n.value),n=await e.next();return t}async resolveFully(){let e=await this.next();for(;!e.done;)e=await this.next()}async resolveWhile(e){let t=await this.next(),n=e(t.value);for(;!t.done&&n;)t=await this.next(),n=e(t.value)}handleErrors(e){return new Hw(this,e)}filter(e){return new Uw(this,e)}map(e){return new Gw(this,e)}mapAsync(e){return new jw(this,e)}serialMapAsync(e){return new jw(this,e).serial()}flatmap(e){return new Kw(this,e)}async forEachAsync(e){return this.map(e).resolveFully()}async serialForEach(e){return this.serialMapAsync(e).resolveWhile((e=>!0===e))}rowMajorBatch(e,t=!0){return new Vw(this,e,t)}columnMajorBatch(e,t=!0,n=Aw){return this.rowMajorBatch(e,t).map((e=>Cw(e,n)))}concatenate(e,t){return new Xw(new Lw([this,e]),t)}take(e){return e<0||null==e?this:new Ww(this,e)}skip(e){return e<0||null==e?this:new Pw(this,e)}prefetch(e){return new Jw(this,e)}shuffle(e,t){return new Qw(this,e,t)}serial(){return new Bw(this)}}class Lw extends Mw{constructor(e){super(),this.items=e,this.trav=0}summary(){return`Array of ${this.items.length} items`}async next(){if(this.trav>=this.items.length)return{value:null,done:!0};const e=this.items[this.trav];return this.trav++,{value:Fw(e),done:!1}}}class zw extends Mw{constructor(e){super(),this.nextFn=e}summary(){return"Function call"}async next(){try{return this.nextFn()}catch(e){throw e.message=`Error thrown while iterating through a dataset: ${e.message}`,e}}}class Bw extends Mw{constructor(e){super(),this.upstream=e,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Serial`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){return this.upstream.next()}}class Pw extends Mw{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Skip`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;this.count++<this.maxCount;){const e=await this.upstream.next();if(e.done)return e;ui(e.value)}return this.upstream.next()}}class Ww extends Mw{constructor(e,t){super(),this.upstream=e,this.maxCount=t,this.count=0}summary(){return`${this.upstream.summary()} -> Take`}async next(){return this.count++>=this.maxCount?{value:null,done:!0}:this.upstream.next()}}class Vw extends Mw{constructor(e,t,n=!0){super(),this.upstream=e,this.batchSize=t,this.enableSmallLastBatch=n,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> RowMajorBatch`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){const e=[];for(;e.length<this.batchSize;){const t=await this.upstream.next();if(t.done)return this.enableSmallLastBatch&&e.length>0?{value:e,done:!1}:{value:null,done:!0};e.push(t.value)}return{value:e,done:!1}}}class Uw extends Mw{constructor(e,t){super(),this.upstream=e,this.predicate=t,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> Filter`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;){const e=await this.upstream.next();if(e.done||this.predicate(e.value))return e;ui(e.value)}}}class Gw extends Mw{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Map`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=va(e.value),n=this.transform(e.value),s=va(n);for(const e of t)ka(e,s)||e.dispose();return{value:n,done:!1}}}class Hw extends Mw{constructor(e,t){super(),this.upstream=e,this.handler=t,this.count=0,this.lastRead=Promise.resolve({value:null,done:!1})}summary(){return`${this.upstream.summary()} -> handleErrors`}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;;)try{return await this.upstream.next()}catch(e){if(!this.handler(e))return{value:null,done:!0}}}}class jw extends Mw{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> AsyncMap`}async next(){const e=await this.upstream.next();if(e.done)return{value:null,done:!0};const t=va(e.value),n=await this.transform(e.value),s=va(n);for(const e of t)ka(e,s)||e.dispose();return{value:n,done:!1}}}class qw extends Mw{constructor(){super(),this.outputQueue=new Ow,this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}async serialNext(){for(;0===this.outputQueue.length();)if(!await this.pump())return{value:null,done:!0};return{value:this.outputQueue.shift(),done:!1}}}class Kw extends qw{constructor(e,t){super(),this.upstream=e,this.transform=t}summary(){return`${this.upstream.summary()} -> Flatmap`}async pump(){const e=await this.upstream.next();if(e.done)return!1;const t=va(e.value),n=this.transform(e.value),s=va(n);this.outputQueue.pushAll(n);for(const e of t)ka(e,s)||e.dispose();return!0}}class Xw extends Mw{constructor(e,t){super(),this.baseErrorHandler=t,this.lastRead=null,this.iterator=null,this.moreIterators=e}summary(){return"TODO: fill in upstream of chained summaries -> Chained"}async next(){return this.lastRead=this.readFromChain(this.lastRead),this.lastRead}async readFromChain(e){if(await e,null==this.iterator){const e=await this.moreIterators.next();if(e.done)return{value:null,done:!0};this.iterator=e.value,null!=this.baseErrorHandler&&(this.iterator=this.iterator.handleErrors(this.baseErrorHandler))}const t=await this.iterator.next();return t.done?(this.iterator=null,this.readFromChain(e)):t}}var Yw,Zw;(Zw=Yw||(Yw={}))[Zw.FAIL=0]="FAIL",Zw[Zw.SHORTEST=1]="SHORTEST",Zw[Zw.LONGEST=2]="LONGEST";class Jw extends Mw{constructor(e,t){super(),this.upstream=e,this.bufferSize=t,this.buffer=new _w(t)}summary(){return`${this.upstream.summary()} -> Prefetch`}refill(){for(;!this.buffer.isFull();){const e=this.upstream.next();this.buffer.push(e)}}next(){return this.refill(),this.buffer.shift()}}class Qw extends Jw{constructor(e,t,n){super(e,t),this.upstream=e,this.windowSize=t,this.upstreamExhausted=!1,this.random=Ko.alea(n||Ks().toString()),this.lastRead=Promise.resolve({value:null,done:!1})}async next(){return this.lastRead=this.lastRead.then((()=>this.serialNext())),this.lastRead}randomInt(e){return Math.floor(this.random()*e)}chooseIndex(){return this.randomInt(this.buffer.length())}async serialNext(){for(this.upstreamExhausted||this.refill();!this.buffer.isEmpty();){const e=this.chooseIndex(),t=await this.buffer.shuffleExcise(e);if(!t.done)return this.refill(),t;this.upstreamExhausted=!0}return{value:null,done:!0}}}class ek{constructor(){this.size=null}batch(e,t=!0){const n=this;let s;return R(e>0,(()=>`batchSize needs to be positive, but it is\n      ${e}`)),s=this.size===1/0||null==this.size?this.size:t?Math.ceil(this.size/e):Math.floor(this.size/e),tk((async()=>(await n.iterator()).columnMajorBatch(e,t,nk)),s)}concatenate(e){const t=this;let n;return n=this.size===1/0||e.size===1/0?1/0:null!=this.size&&null!=e.size?this.size+e.size:null,tk((async()=>(await t.iterator()).concatenate(await e.iterator())),n)}filter(e){const t=this;let n;return n=this.size===1/0?1/0:null,tk((async()=>(await t.iterator()).filter((t=>li((()=>e(t)))))),n)}async forEachAsync(e){return(await this.iterator()).forEachAsync(e)}map(e){const t=this;return tk((async()=>(await t.iterator()).map((t=>li((()=>e(t)))))),this.size)}mapAsync(e){const t=this;return tk((async()=>(await t.iterator()).mapAsync(e)),this.size)}prefetch(e){if(null==e)throw new RangeError("`Dataset.prefetch()` requires bufferSize to be specified.");const t=this;return tk((async()=>(await t.iterator()).prefetch(e)),this.size)}repeat(e){const t=this;let n;return n=null!=this.size&&e>0?this.size*e:0===e?0:null!=this.size&&(void 0===e||e<0)?1/0:null,tk((async()=>{return n=(a=async()=>({value:await t.iterator(),done:!1}),new zw(a)).take(e),new Xw(n,s);var n,s,a}),n)}skip(e){const t=this;let n;return n=null!=this.size&&e>=0&&this.size>=e?this.size-e:null!=this.size&&(this.size<e||void 0===e||e<0)?0:null,tk((async()=>(await t.iterator()).skip(e)),n)}shuffle(e,t,n=!0){if(null==e||e<0)throw null==this.size?new RangeError("`Dataset.shuffle()` requires bufferSize to be specified."):new RangeError(`\`Dataset.shuffle()\` requires bufferSize to be specified.  If your data fits in main memory (for regular JS objects), and/or GPU memory (for \`tf.Tensor\`s), consider setting bufferSize to the dataset size (${this.size} elements)`);const s=this,a=Ko.alea(t||Ks().toString());return tk((async()=>{let t=a.int32();return n&&(t+=a.int32()),(await s.iterator()).shuffle(e,t.toString())}),this.size)}take(e){const t=this;let n;return n=null!=this.size&&this.size>e?e:null!=this.size&&this.size<=e?this.size:null,tk((async()=>(await t.iterator()).take(e)),n)}async toArray(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArray()}async toArrayForTest(){if(this.size===1/0)throw new Error("Can not convert infinite data stream to array.");return(await this.iterator()).toArrayForTest()}}function tk(e,t=null){return new class extends ek{constructor(){super(...arguments),this.size=t}async iterator(){return e()}}}function nk(e){if(null===e)return null;return null==(t=e[0])||null===(n=t)||"object"!=typeof n&&"function"!=typeof n||Array.isArray(t)||"object"==typeof t&&t instanceof ua||q(t)?{value:function(e){if(0===e.length)throw new Error("Can't make a batch of zero elements.");return e[0]instanceof ua?fl(e):Wa(e)}(e),recurse:!1}:{value:null,recurse:!0};var t,n}function sk(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&R("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}ek.MAX_BUFFER_SIZE=1e4,Symbol("out"),Symbol("field"),Symbol("quote"),Symbol("quoteafterquote"),Symbol("quoteinquote");const ak=Jc;class rk extends S{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new N(this,ii())}nextDataId(){return rk.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,pe().get("IS_NODE")&&vs("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const s={id:this.nextDataId()};return this.data.set(s,{values:e,dtype:n,refCount:1}),s}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&X(n[0])){const a=n.map((e=>Xs(e)));s=this.write(a,e,t)}else s=this.write(n,e,t);return{dataId:s,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,s,a){this.data.set(e,{values:t,dtype:s,refCount:a})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);return"complex64"===t?xc(this.readSync(n.real.dataId),this.readSync(n.imag.dataId)):this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>Ys(e)));return Ir(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Ir(e.shape,e.dtype,t)}makeOutput(e,t,n){return ii().makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=Ks();return e(),{kernelMs:Ks()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){sk([e],"where");const t=this.readSync(e.dataId);return ak(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function ik(e,t,n){return({inputs:s,attrs:a,backend:r})=>{const{x:i}=s;if(sk(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=r,l=o.data.get(i.dataId).values,u=O(i.shape),c=n||i.dtype,h=H(c,u);for(let e=0;e<u;++e)h[e]=t(l[e],a);return o.makeTensorInfo(i.shape,c,h)}}function ok(e,t,n){return({inputs:s,attrs:a,backend:r})=>{const{x:i}=s;if(sk(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const o=r,l=o.data.get(i.dataId).values,u=n||i.dtype,c=t(l,u,a);return o.makeTensorInfo(i.shape,u,c)}}rk.nextDataId=0,hi("cpu",(()=>new rk),1);const lk=ik(dt,(e=>e>=0?e:Math.exp(e)-1)),uk={kernelName:dt,backendName:"cpu",kernelFunc:lk};function ck(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const hk={kernelName:At,backendName:"cpu",kernelFunc:ck};function pk(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{alpha:r}=s;sk([a],"leakyRelu");const i=O(a.shape),o=n.data.get(a.dataId).values,l=G("float32",i);for(let e=0;e<o.length;e++)l[e]=o[e]<0?r*o[e]:o[e];return n.makeTensorInfo(a.shape,"float32",l)}const dk={kernelName:Mt,backendName:"cpu",kernelFunc:pk};function fk(e){return(t,n,s,a,r)=>{const i=Lr(t,n),o=i.length,l=ee(i),u=G(r,O(i)),c=t.length,h=n.length,p=ee(t),d=ee(n),f=Or(t,i),m=Or(n,i);if(f.length+m.length===0)for(let t=0;t<u.length;++t)u[t]=e(s[t%s.length],a[t%a.length]);else for(let t=0;t<u.length;++t){const n=le(t,o,l),r=n.slice(-c);f.forEach((e=>r[e]=0));const i=oe(r,c,p),g=n.slice(-h);m.forEach((e=>g[e]=0));const y=oe(g,h,d);u[t]=e(s[i],a[y])}return[u,i]}}const mk=fk(((e,t)=>e<0?t*e:e));function gk(e){const{inputs:t,backend:n}=e,{x:s,alpha:a}=t;sk([s,a],"prelu");const r=n.data.get(s.dataId).values,i=n.data.get(a.dataId).values,[o,l]=mk(s.shape,a.shape,r,i,"float32");return n.makeTensorInfo(l,"float32",o)}const yk={kernelName:bn,backendName:"cpu",kernelFunc:gk},bk=ik(In,(e=>Math.max(0,e))),xk={kernelName:In,backendName:"cpu",kernelFunc:bk},wk=ik(En,(e=>Math.min(Math.max(0,e),6))),kk={kernelName:En,backendName:"cpu",kernelFunc:wk};function vk(e){return(t,n,s)=>{const a=G(n,t.length);for(let n=0;n<t.length;++n)a[n]=e(t[n],s);return a}}const Ik=vk((e=>1/(1+Math.exp(-e)))),Nk=ik(Wn,(e=>1/(1+Math.exp(-e)))),Sk={kernelName:Wn,backendName:"cpu",kernelFunc:Nk};function Tk(e,t,n,s,a){if("linear"===n)return ck({inputs:{x:t},backend:e});if("relu"===n)return bk({inputs:{x:t},backend:e});if("elu"===n)return lk({inputs:{x:t},backend:e});if("relu6"===n)return wk({inputs:{x:t},backend:e});if("prelu"===n)return gk({inputs:{x:t,alpha:s},backend:e});if("leakyrelu"===n)return pk({inputs:{x:t},backend:e,attrs:{alpha:a}});if("sigmoid"===n)return Nk({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function $k(e){const{inputs:t,backend:n}=e,{real:s,imag:a}=t,r=n.data.get(s.dataId).values,i=n.data.get(a.dataId).values,o=n.makeTensorInfo(s.shape,"complex64");return n.data.get(o.dataId).complexTensorInfos={real:n.makeTensorInfo(s.shape,"float32",r),imag:n.makeTensorInfo(a.shape,"float32",i)},o}const Ck={kernelName:Ve,backendName:"cpu",kernelFunc:$k};function Ek(e,t,n="float32"){if("complex64"===n)return $k({inputs:{real:Ek(e,t,"float32"),imag:Ek(e,t,"float32")},backend:e});const s=ae(O(t),n);return e.makeTensorInfo(t,n,s)}function Ak(e){const{inputs:t,backend:n}=e,{input:s}=t,a=n.data.get(s.dataId).complexTensorInfos.real,r=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,r)}const Rk={kernelName:kn,backendName:"cpu",kernelFunc:Ak};function Fk(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dtype:r}=s;if("complex64"===r){if("complex64"===a.dtype)return ck({inputs:{x:a},backend:n});const e=Ek(n,a.shape,a.dtype),t=Fk({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),s=$k({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),s}if("complex64"===a.dtype){const e=Ak({inputs:{input:a},backend:n}),t=Fk({inputs:{x:e},backend:n,attrs:{dtype:r}});return n.disposeIntermediateTensorInfo(e),t}if(!j(a.dtype,r)){const e=ck({inputs:{x:a},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:r}}if("int32"===r){const e=n.data.get(a.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(a.shape,"int32",t)}if("bool"===r){const e=n.data.get(a.dataId).values,t=qs([0],a.dtype),[s,r]=fk(((e,t)=>e!==t?1:0))(a.shape,[],e,t,"bool");return n.makeTensorInfo(r,"bool",s)}throw new Error(`Error in Cast: failed to cast ${a.dtype} to ${r}`)}const Dk={kernelName:Be,backendName:"cpu",kernelFunc:Fk};function _k(e,t,n,s){return null==n?({inputs:n,backend:a})=>{const{a:r,b:i}=n,o=a;sk([r,i],e);const l=o.data.get(r.dataId).values,u=o.data.get(i.dataId).values,c="string"===r.dtype?Yc(l):l,h="string"===r.dtype?Yc(u):u,p=s||r.dtype,[d,f]=t(r.shape,i.shape,c,h,p);return o.makeTensorInfo(f,p,d)}:({inputs:e,backend:a})=>{const{a:r,b:i}=e,o=a;if("complex64"===r.dtype||"complex64"===i.dtype){const e=Fk({inputs:{x:r},backend:o,attrs:{dtype:"complex64"}}),t=o.data.get(e.dataId),s=t.complexTensorInfos.real,a=t.complexTensorInfos.imag,l=o.data.get(s.dataId).values,u=o.data.get(a.dataId).values,c=Fk({inputs:{x:i},backend:o,attrs:{dtype:"complex64"}}),h=o.data.get(c.dataId),p=h.complexTensorInfos.real,d=h.complexTensorInfos.imag,f=o.data.get(p.dataId).values,m=o.data.get(d.dataId).values,[g,y,b]=n(r.shape,i.shape,l,u,f,m),x=o.makeTensorInfo(b,"float32",g),w=o.makeTensorInfo(b,"float32",y),k=$k({inputs:{real:x,imag:w},backend:o});return o.disposeIntermediateTensorInfo(e),o.disposeIntermediateTensorInfo(c),o.disposeIntermediateTensorInfo(x),o.disposeIntermediateTensorInfo(w),k}{const e=o.data.get(r.dataId).values,n=o.data.get(i.dataId).values,a=s||r.dtype,[l,u]=t(r.shape,i.shape,e,n,a);return o.makeTensorInfo(u,a,l)}}}function Ok(e){return(t,n,s,a,r,i)=>{const o=Lr(t,n),l=O(o),u=o.length,c=ee(o),h=G("float32",l),p=G("float32",l),d=Or(t,o),f=Or(n,o),m=xc(s,a),g=xc(r,i),y=t.length,b=ee(t),x=n.length,w=ee(n);if(d.length+f.length===0)for(let t=0;t<h.length;t++){const n=t%m.length,s=t%g.length,a=e(m[2*n],m[2*n+1],g[2*s],g[2*s+1]);h[t]=a.real,p[t]=a.imag}else for(let t=0;t<h.length;t++){const n=le(t,u,c),s=n.slice(-y);d.forEach((e=>s[e]=0));const a=oe(s,y,b),r=n.slice(-x);f.forEach((e=>r[e]=0));const i=oe(r,x,w),o=e(m[2*a],m[2*a+1],g[2*i],g[2*i+1]);h[t]=o.real,p[t]=o.imag}return[h,p,o]}}const Mk=fk(((e,t)=>e+t)),Lk=Ok(((e,t,n,s)=>({real:e+n,imag:t+s}))),zk=_k(we,Mk,Lk),Bk={kernelName:we,backendName:"cpu",kernelFunc:zk};function Pk(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{shape:r}=s,i=O(a.shape),o=W(r,i),l=O(o);R(i===l,(()=>`The new shape (${o}) has ${l} elements and the old shape (${a.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`)),n.incRef(a.dataId);const u=n.data.get(a.dataId);if(null!=u.complexTensorInfos){const e=u.complexTensorInfos.real,t=u.complexTensorInfos.imag;e.shape=o,t.shape=o}return{dataId:a.dataId,shape:o,dtype:a.dtype}}const Wk={kernelName:Nn,backendName:"cpu",kernelFunc:Pk};function Vk(e){const{inputs:t,backend:n,attrs:s}=e,{a,b:r}=t,{transposeA:i,transposeB:o}=s;sk([a,r],"matMul");const l=a.shape.length,u=r.shape.length,c=i?a.shape[l-2]:a.shape[l-1],h=o?r.shape[u-1]:r.shape[u-2],p=i?a.shape[l-1]:a.shape[l-2],d=o?r.shape[u-2]:r.shape[u-1],f=a.shape.slice(0,-2),m=r.shape.slice(0,-2),g=O(f),y=O(m),b=Lr(a.shape.slice(0,-2),r.shape.slice(0,-2)).concat([p,d]);R(c===h,(()=>`Error in matMul: inner shapes (${c}) and (${h}) of Tensors with shapes ${a.shape} and ${r.shape} and transposeA=${i} and transposeB=${o} must match.`));const x=o?[y,d,h]:[y,h,d],w=Pk({inputs:{x:a},backend:n,attrs:{shape:i?[g,c,p]:[g,p,c]}}),k=Pk({inputs:{x:r},backend:n,attrs:{shape:x}}),v=i?w.shape[1]:w.shape[2],I=i?w.shape[2]:w.shape[1],N=o?k.shape[1]:k.shape[2],S=Math.max(g,y),T=n.data.get(w.dataId).values,$=n.data.get(k.dataId).values,C=ee(w.shape),E=ee(k.shape),[A,F,D]=i?[C[0],1,C[1]]:[C[0],C[1],1],[_,M,L]=o?[1,E[1],E[0]]:[E[1],1,E[0]],z=I*N,B=Ir([S,I,N],w.dtype),P=B.values,W=n.blockSize;for(let e=0;e<S;e++)for(let t=0;t<I;t+=W)for(let n=0;n<N;n+=W)for(let s=0;s<v;s+=W){const a=Math.min(t+W,I),r=Math.min(n+W,N),i=Math.min(s+W,v);for(let o=t;o<a;o++)for(let t=n;t<r;t++){let n=0;for(let a=s;a<i;a++){const s=Math.min(e,g-1)*A,r=Math.min(e,y-1)*L;n+=T[s+o*F+a*D]*$[a*_+t*M+r]}P[e*z+(o*N+t)]+=n}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(k),n.makeTensorInfo(b,B.dtype,B.values)}const Uk={kernelName:Oe,backendName:"cpu",kernelFunc:Vk},Gk={kernelName:xs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a,b:r,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;let p,d,f;const m=[];p=Vk({inputs:{a,b:r},attrs:{transposeA:l,transposeB:u},backend:n}),i&&(d=zk({inputs:{a:p,b:i},backend:n}),m.push(p),p=d),c&&(f=Tk(n,p,c,o,h),m.push(p),p=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return p}};function Hk(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}const jk={kernelName:ye,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;sk(t,"abs");let s=new Float32Array(O(t.shape));return s=Hk(n.data.get(t.dataId).values),n.makeOutput(s,t.shape,t.dtype)}},qk=ik(be,(e=>Math.acos(e))),Kk={kernelName:be,backendName:"cpu",kernelFunc:qk},Xk=ik(xe,(e=>Math.acosh(e))),Yk={kernelName:xe,backendName:"cpu",kernelFunc:Xk},Zk={kernelName:ke,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,s=t;sk(t,"addN");const a=s.map((e=>n.data.get(e.dataId).values)),r=Ir(s[0].shape,s[0].dtype),i=r.values;for(let e=0;e<s.length;e++){const t=a[e];for(let e=0;e<i.length;e++)i[e]+=t[e]}return n.makeTensorInfo(r.shape,r.dtype,r.values)}};function Jk(e,t,n,s,a){const r=t.length,i=O(t),o=ee(t),l=ee(a),u=G(n,O(a));for(let t=0;t<i;++t){const n=le(t,r,o),a=new Array(n.length);for(let e=0;e<a.length;e++)a[e]=n[s[e]];u[oe(a,r,l)]=e[t]}return u}function Qk(e){const{inputs:t,attrs:n,backend:s}=e,{x:a}=t,{perm:r}=n;sk(a,"transpose");const i=a.shape.length,o=new Array(i);for(let e=0;e<o.length;e++)o[e]=a.shape[r[e]];const l=Jk(s.data.get(a.dataId).values,a.shape,a.dtype,r,o);return{dataId:s.write(l,o,a.dtype),shape:o,dtype:a.dtype}}const ev={kernelName:hs,backendName:"cpu",kernelFunc:Qk},tv={kernelName:ve,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s;sk(a,"all");const o=V(r,a.shape);let l=o;const u=Oo(l,a.shape.length);let c=a;null!=u&&(c=Qk({inputs:{x:a},backend:n,attrs:{perm:u}}),l=Lo(l.length,a.shape.length)),_o("all",l,c.shape.length);const[h,p]=Fo(c.shape,l),d=O(p),f=ae(O(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];n=n&&s}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=Pk({inputs:{x:g},backend:n,attrs:{shape:Do(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},nv={kernelName:Ie,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s;sk(a,"any");const o=V(r,a.shape);let l=o;const u=Oo(l,a.shape.length);let c=a;null!=u&&(c=Qk({inputs:{x:a},backend:n,attrs:{perm:u}}),l=Lo(l.length,a.shape.length)),_o("any",l,c.shape.length);const[h,p]=Fo(c.shape,l),d=O(p),f=ae(O(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];n=n||s}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=Pk({inputs:{x:g},backend:n,attrs:{shape:Do(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},sv={kernelName:Ne,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r}=s;sk(a,"argMax");let i=V(r,a.shape);const o=Oo(i,a.shape.length);let l=a;const u=[];null!=o&&(l=Qk({inputs:{x:a},backend:n,attrs:{perm:o}}),u.push(l),i=Lo(i.length,l.shape.length)),i=[i[0]],_o("argMax",i,l.shape.length);const[c,h]=Fo(l.shape,i),p=ae(O(c),"int32"),d=O(h),f=n.data.get(l.dataId).values;for(let e=0;e<p.length;++e){const t=e*d;let n=f[t],s=0;for(let e=0;e<d;++e){const a=f[t+e];a>n&&(n=a,s=e)}p[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",p)}},av={kernelName:Se,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r}=s;sk(a,"argMin");let i=V(r,a.shape);const o=Oo(i,a.shape.length);let l=a;const u=[];null!=o&&(l=Qk({inputs:{x:a},backend:n,attrs:{perm:o}}),u.push(l),i=Lo(i.length,l.shape.length)),i=[i[0]],_o("argMin",i,l.shape.length);const[c,h]=Fo(l.shape,i),p=ae(O(c),"int32"),d=O(h),f=n.data.get(l.dataId).values;for(let e=0;e<p.length;++e){const t=e*d;let n=f[t],s=0;for(let e=0;e<d;++e){const a=f[t+e];a<n&&(n=a,s=e)}p[e]=s}return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c,"int32",p)}},rv=ik(Te,(e=>Math.asin(e))),iv={kernelName:Te,backendName:"cpu",kernelFunc:rv},ov=ik($e,(e=>Math.asinh(e))),lv={kernelName:$e,backendName:"cpu",kernelFunc:ov},uv=ik(Ce,(e=>Math.atan(e))),cv={kernelName:Ce,backendName:"cpu",kernelFunc:uv},hv=fk(((e,t)=>Math.atan2(e,t))),pv=_k(Ae,hv),dv={kernelName:Ae,backendName:"cpu",kernelFunc:pv},fv=ik(Ee,(e=>Math.atanh(e))),mv={kernelName:Ee,backendName:"cpu",kernelFunc:fv};function gv(e,t,n,s,a,r){const i=a.strideHeight,o=a.strideWidth,l=a.dilationHeight,u=a.dilationWidth,c=a.effectiveFilterHeight,h=a.effectiveFilterWidth,p=a.padInfo.top,d=a.padInfo.left,f="max"===r?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=Ir(a.outShape,n),g=m.values,y=a.outShape[1]*a.outShape[2]*a.outShape[3],b=a.outShape[2]*a.outShape[3],x=a.outShape[3];for(let t=0;t<a.batchSize;++t){const n=t*y,m=t*s[0];for(let t=0;t<a.inChannels;++t)for(let y=0;y<a.outHeight;++y){const w=y*i-p,k=Math.max(0,w),v=Math.min(a.inHeight,c+w),I=n+y*b;for(let n=0;n<a.outWidth;++n){const i=n*o-d,c=Math.max(0,i),p=Math.min(a.inWidth,h+i);let y=f,b=0,w=0;for(let n=k;n<v;n+=l){const a=m+n*s[1];for(let n=c;n<p;n+=u){const i=e[a+n*s[2]+t];"max"===r&&i>y?y=i:"avg"===r&&(b+=i,w++)}if(isNaN(y))break}g[I+n*x+t]="avg"===r?b/w:y}}}return m}function yv(e,t,n,s,a=!1,r=!1){const i=Ir(s.outShape,"int32"),o=s.strideHeight,l=s.strideWidth,u=s.dilationHeight,c=s.dilationWidth,h=s.effectiveFilterHeight,p=s.effectiveFilterWidth,d=s.padInfo.top,f=s.padInfo.left,m=Ir(t,n,e);for(let e=0;e<s.batchSize;++e)for(let t=0;t<s.inChannels;++t)for(let n=0;n<s.outHeight;++n){const g=n*o-d;let y=g;for(;y<0;)y+=u;const b=Math.min(s.inHeight,h+g);for(let o=0;o<s.outWidth;++o){const h=o*l-f;let d=h;for(;d<0;)d+=c;const x=Math.min(s.inWidth,p+h);let w=Number.NEGATIVE_INFINITY,k=-1;for(let n=y;n<b;n+=u){const i=n-g;for(let o=d;o<x;o+=c){const l=o-h,u=m.get(e,n,o,t);u>w&&(w=u,k=a?r?((e*s.inHeight+n)*s.inWidth+o)*s.inChannels+t:(n*s.inWidth+o)*s.inChannels+t:i*p+l)}}i.set(k,e,n,o,t)}}return i}function bv(e,t,n,s,a,r){const i=a.strideDepth,o=a.strideHeight,l=a.strideWidth,u=a.dilationDepth,c=a.dilationHeight,h=a.dilationWidth,p=a.effectiveFilterDepth,d=a.effectiveFilterHeight,f=a.effectiveFilterWidth,m=a.padInfo.front,g=a.padInfo.top,y=a.padInfo.left,b="max"===r?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,x=Ir(a.outShape,n),w=x.values,k=a.outShape[1]*a.outShape[2]*a.outShape[3]*a.outShape[4],v=a.outShape[2]*a.outShape[3]*a.outShape[4],I=a.outShape[3]*a.outShape[4],N=a.outShape[4];for(let t=0;t<a.batchSize;++t){const n=t*k,x=t*s[0];for(let t=0;t<a.inChannels;++t)for(let k=0;k<a.outDepth;++k){const S=k*i-m;let T=S;for(;T<0;)T+=u;const $=Math.min(a.inDepth,p+S),C=n+k*v;for(let n=0;n<a.outHeight;++n){const i=n*o-g;let p=i;for(;p<0;)p+=c;const m=Math.min(a.inHeight,d+i),k=C+n*I;for(let n=0;n<a.outWidth;++n){const i=n*l-y;let o=i;for(;o<0;)o+=h;const d=Math.min(a.inWidth,f+i),g=k+n*N;let v=b,I=0,S=0;for(let n=T;n<$;n+=u){const a=x+n*s[1];for(let n=p;n<m;n+=c){const i=a+n*s[2];for(let n=o;n<d;n+=h){const a=e[i+n*s[3]+t];if("max"===r&&a>v?v=a:"avg"===r&&(I+=a,S++),isNaN(v))break}if(isNaN(v))break}if(isNaN(v))break}w[g+t]="avg"===r?I/S:v}}}}return x}const xv={kernelName:Re,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;sk(a,"avgPool");const{filterSize:r,strides:i,pad:o,dimRoundingMode:l}=s;R(Ri(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=ki(a.shape,r,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&M(u.inShape,u.outShape))c=ck({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=ee(a.shape),s=gv(e,a.shape,a.dtype,t,u,"avg");c=n.makeTensorInfo(u.outShape,a.dtype,s.values)}return c}},wv={kernelName:De,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:r,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;sk(a,"avgPool3d");const c=vi(a.shape,r,i,1,o,l,u),h=bv(n.data.get(a.dataId).values,a.shape,a.dtype,ee(a.shape),c,"avg");return n.makeTensorInfo(h.shape,"float32",h.values)}},kv={kernelName:_e,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;sk([a,r],"avgPool3DGrad");const c=vi(r.shape,i,o,1,l,u),h=c.strideDepth,p=c.strideHeight,d=c.strideWidth,f=c.filterDepth,m=c.filterHeight,g=c.filterWidth,y=c.dilationDepth,b=c.dilationHeight,x=c.dilationWidth,w=c.effectiveFilterDepth,k=c.effectiveFilterHeight,v=c.effectiveFilterWidth,I=w-1-c.padInfo.front,N=v-1-c.padInfo.left,S=k-1-c.padInfo.top,T=Ir(r.shape,"float32"),$=1/(f*m*g),C=n.bufferSync(a);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let a=0;a<c.inWidth;++a){const r=n-I,i=s-S,o=a-N;let l=0;for(let n=0;n<w;n+=y){const s=(r+n)/h;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let n=0;n<k;n+=b){const a=(i+n)/p;if(!(a<0||a>=c.outHeight||Math.floor(a)!==a))for(let n=0;n<v;n+=x){const r=(o+n)/d;r<0||r>=c.outWidth||Math.floor(r)!==r||(l+=C.get(e,s,a,r,t))}}}T.set(l*$,e,n,s,a,t)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}},vv={kernelName:Fe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,i=r;sk([a,r],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=ki(i.shape,o,l,1,u),h=c.strideHeight,p=c.strideWidth,d=c.filterHeight,f=c.filterWidth,m=c.dilationHeight,g=c.dilationWidth,y=c.effectiveFilterHeight,b=c.effectiveFilterWidth,x=b-1-c.padInfo.left,w=y-1-c.padInfo.top,k=Ir(i.shape,"float32"),v=1/(d*f),I=n.data.get(a.dataId).values,N=Ir(a.shape,"float32",I);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inHeight;++n)for(let s=0;s<c.inWidth;++s){const a=n-w,r=s-x;let i=0;for(let n=0;n<y;n+=m){const s=(a+n)/h;if(!(s<0||s>=c.outHeight||Math.floor(s)!==s))for(let n=0;n<b;n+=g){const a=(r+n)/p;a<0||a>=c.outWidth||Math.floor(a)!==a||(i+=N.get(e,s,a,t))}}k.set(i*v,e,n,s,t)}return n.makeTensorInfo(k.shape,k.dtype,k.values)}},Iv={kernelName:St,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,scale:r,offset:i,mean:o,variance:l}=t;R(o.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),R(null==i||o.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),R(null==r||o.shape.length===r.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks.")),sk([a,o,l,r,i],"batchNorm");let{varianceEpsilon:u}=s;null==u&&(u=.001);const c=n.data.get(a.dataId).values,h=n.data.get(o.dataId).values,p=n.data.get(l.dataId).values,d=r?n.data.get(r.dataId).values:new Float32Array([1]),f=i?n.data.get(i.dataId).values:new Float32Array([0]),m=new Float32Array(c.length),g=f.length,y=d.length,b=p.length,x=h.length;let w=0,k=0,v=0,I=0;for(let e=0;e<c.length;++e)m[e]=f[w++]+(c[e]-h[k++])*d[v++]/Math.sqrt(p[I++]+u),w>=g&&(w=0),k>=x&&(k=0),v>=y&&(v=0),I>=b&&(I=0);return n.makeTensorInfo(a.shape,a.dtype,m)}};function Nv(e,t,n,s,a){const r=Jr(s,t,n),i=O(n),o=ee(s);if(r){const n=Qr(t,o);return"string"===a?e.slice(n,n+i):e.subarray(n,n+i)}const l=Ir(s,a,"string"===a?Yc(e):e),u=Ir(n,a);for(let e=0;e<u.size;++e){const n=u.indexToLoc(e),s=n.map(((e,n)=>e+t[n]));u.set(l.get(...s),...n)}return"string"===a?Zc(u.values):u.values}function Sv(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:r,size:i}=s;sk(a,"slice");const[o,l]=ei(a,r,i);Pr(a,o,l);const u=Nv(n.data.get(a.dataId).values,o,l,a.shape,a.dtype);return n.makeTensorInfo(l,a.dtype,u)}const Tv={kernelName:Ln,backendName:"cpu",kernelFunc:Sv},$v={kernelName:Me,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:r,crops:i}=s;sk([a],"batchToSpaceND");const o=r.reduce(((e,t)=>e*t)),l=nc(a.shape,r,o),u=sc(l.length,r.length),c=ac(a.shape,r,o),h=rc(i,r.length),p=ic(c,i,r.length),d=Pk({inputs:{x:a},backend:n,attrs:{shape:l}}),f=Qk({inputs:{x:d},backend:n,attrs:{perm:u}}),m=Pk({inputs:{x:f},backend:n,attrs:{shape:c}}),g=Sv({inputs:{x:m},backend:n,attrs:{begin:h,size:p}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};function Cv(e,t,n,s,a){const r=O(s),i=ae(a,n);for(let n=0;n<e.length;n++){const s=e[n];if(s<0)throw new Error("Input x must be non-negative!");s>=a||(i[s]+=r>0?t[n]:1)}return i}function Ev(e,t,n,s=!1){const a=e.shape[0],r=e.shape[1],i=Ir([a,n],t.dtype);for(let o=0;o<a;o++)for(let a=0;a<r;a++){const r=e.get(o,a);if(r<0)throw new Error("Input x must be non-negative!");r>=n||(s?i.set(1,o,r):t.size>0?i.set(i.get(o,r)+t.get(o,a),o,r):i.set(i.get(o,r)+1,o,r))}return i}const Av={kernelName:Le,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:i}=s,o=Cv(n.data.get(a.dataId).values,n.data.get(r.dataId).values,r.dtype,r.shape,i);return n.makeTensorInfo([i],r.dtype,o)}},Rv={kernelName:ze,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:a}=t,r=n.data.get(s.dataId).values,i=n.data.get(a.dataId).values,o=Lr(Array.from(r),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},Fv=vk((e=>Math.ceil(e))),Dv=ok(Pe,Fv),_v={kernelName:Pe,backendName:"cpu",kernelFunc:Dv},Ov=ik(We,((e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e})),Mv={kernelName:We,backendName:"cpu",kernelFunc:Ov},Lv={kernelName:Ue,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,s=new Float32Array(O(t.shape)),a=n.data.get(t.dataId),r=a.complexTensorInfos.real,i=a.complexTensorInfos.imag,o=n.data.get(r.dataId).values,l=n.data.get(i.dataId).values;for(let e=0;e<o.length;e++){const t=o[e],n=l[e];s[e]=Math.hypot(t,n)}return n.makeOutput(s,t.shape,"float32")}};function zv(e,t,n,s){const a=H(n,O(t));if(s&&"string"!==n){let t=0;e.forEach((e=>{const n=O(e.shape);a.set(e.vals,t),t+=n}))}else{let s=0;e.forEach((e=>{const r="string"===n?Yc(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const o=n*t[1]+s;for(let t=0;t<e.shape[1];++t)a[o+t]=r[i++]}s+=e.shape[1]}))}return a}function Bv(e){const{inputs:t,backend:n}=e,{input:s}=t,a=n.data.get(s.dataId).complexTensorInfos.imag,r=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,r)}const Pv={kernelName:Ft,backendName:"cpu",kernelFunc:Bv};function Wv(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s,r=V(a,t[0].shape)[0];let i=Ju(t.map((e=>e.shape)),r);if(0===O(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>O(e.shape)>0));if(1===o.length)return ck({inputs:{x:o[0]},backend:n});if(Zu(o.map((e=>e.shape)),r),"complex64"===o[0].dtype){const e=o.map((e=>Ak({inputs:{input:e},backend:n}))),t=o.map((e=>Bv({inputs:{input:e},backend:n}))),s=Wv({inputs:e,backend:n,attrs:{axis:r}}),a=Wv({inputs:t,backend:n,attrs:{axis:r}}),i=$k({inputs:{real:s,imag:a},backend:n});return e.forEach((e=>n.disposeIntermediateTensorInfo(e))),t.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),i}const l=o.map((e=>{const t=O(e.shape.slice(r));return Pk({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})})),u=l.map((e=>({vals:n.data.get(e.dataId).values,shape:e.shape})));i=Ju(l.map((e=>e.shape)),1);const c=1===l[0].shape[0],h=zv(u,i,t[0].dtype,c),p=Ju(o.map((e=>e.shape)),r),d=n.makeTensorInfo(p,t[0].dtype,h);return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}const Vv={kernelName:Ge,backendName:"cpu",kernelFunc:Wv};function Uv(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s;sk([a,r],"conv2d");const h=Fi(l),p=Ii(a.shape,r.shape,i,u,o,c,!1,h),d=p.filterHeight,f=p.filterWidth,m=p.dilationHeight,g=p.dilationWidth,y=p.padInfo.left,b=p.padInfo.top,x="channelsLast"===p.dataFormat,w=new ra(p.outShape,a.dtype),k=ee(a.shape),v=ee(r.shape),I=k[0],N=x?k[1]:k[2],S=x?k[2]:1,T=x?1:k[1],$=w.strides[0],C=x?w.strides[1]:w.strides[2],E=x?w.strides[2]:1,A=x?1:w.strides[1],R=n.data.get(a.dataId).values,F=n.data.get(r.dataId).values,D=w.values;for(let e=0;e<p.batchSize;++e){const t=e*I,n=e*$;for(let e=0;e<p.outHeight;++e){const s=n+e*C,a=e*p.strideHeight-b;for(let e=0;e<d;++e){const n=a+e*m;if(n<0||n>=p.inHeight)continue;const r=e*v[0],i=t+n*N;for(let e=0;e<p.outWidth;++e){const t=s+e*E,n=e*p.strideWidth-y;for(let e=0;e<f;++e){const s=n+e*g;if(s<0||s>=p.inWidth)continue;const a=i+s*S;let o=r+e*v[1];for(let e=0;e<p.inChannels;++e){const n=R[a+e*T];for(let e=0;e<p.outChannels;++e)D[t+e*A]+=n*F[o+e];o+=p.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,D)}const Gv={kernelName:He,backendName:"cpu",kernelFunc:Uv},Hv={kernelName:je,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s;sk([a,r],"conv2dBackpropFilter");const h=Fi(l),p=Ii(a.shape,c,i,1,o,u,!1,h),{strideHeight:d,strideWidth:f,filterHeight:m,filterWidth:g}=p,y="channelsLast"===p.dataFormat,b=new ra(p.filterShape,"float32"),x=p.padInfo.left,w=p.padInfo.top,k=n.data.get(a.dataId).values,v=n.data.get(r.dataId).values,I=new ra(a.shape,a.dtype,k),N=new ra(r.shape,r.dtype,v);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((w-e)/d)),n=Math.min(p.outHeight,(p.inHeight+w-e)/d);for(let s=0;s<g;++s){const a=Math.max(0,Math.ceil((x-s)/f)),r=Math.min(p.outWidth,(p.inWidth+x-s)/f);for(let i=0;i<p.inChannels;++i)for(let o=0;o<p.outChannels;++o){let l=0;for(let u=0;u<p.batchSize;++u)for(let c=t;c<n;++c){const t=e+c*d-w;for(let e=a;e<r;++e){const n=s+e*f-x;l+=y?I.get(u,t,n,i)*N.get(u,c,e,o):I.get(u,i,t,n)*N.get(u,o,c,e)}}b.set(l,e,s,i,o)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},jv={kernelName:qe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s;sk([a,r],"conv2dBackpropInput");const h=ee(r.shape),p=ee(a.shape);let d=Fi(u);const f=Ii(i,r.shape,o,1,l,c,!1,d),m=new ra(f.inShape,"float32"),g=m.values,y=n.data.get(a.dataId).values,b=n.data.get(r.dataId).values,[x,w,k]=h,{batchSize:v,filterHeight:I,filterWidth:N,inChannels:S,inHeight:T,inWidth:$,outChannels:C,outHeight:E,outWidth:A,strideHeight:R,strideWidth:F}=f;d=f.dataFormat;const D=I-1-f.padInfo.top,_=N-1-f.padInfo.left,O="channelsLast"===d,M=m.strides[0],L=O?m.strides[1]:m.strides[2],z=O?m.strides[2]:1,B=O?1:m.strides[1],P=p[0],W=O?p[1]:p[2],V=O?p[2]:1,U=O?1:p[1];for(let e=0;e<v;++e)for(let t=0;t<S;++t)for(let n=0;n<T;++n){const s=n-D,a=Math.max(0,Math.ceil(s/R)),r=Math.min(E,(I+s)/R);for(let i=0;i<$;++i){const o=i-_,l=Math.max(0,Math.ceil(o/F)),u=Math.min(A,(N+o)/F);let c=0;for(let n=a;n<r;++n){const a=n*R-s;for(let s=l;s<u;++s){const r=P*e+W*n+V*s,i=x*(I-1-a)+w*(N-1-(s*F-o))+k*t;for(let e=0;e<C;++e)c+=y[r+U*e]*b[i+e]}}g[M*e+L*n+z*i+B*t]=c}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}},qv={kernelName:Ke,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:i,pad:o,dilations:l}=s;sk([a,r],"conv3d");const u=Ni(a.shape,r.shape,i,l,o),{filterDepth:c,filterHeight:h,filterWidth:p,dilationDepth:d,dilationHeight:f,dilationWidth:m,padInfo:g}=u,y=g.front,b=g.left,x=g.top,w=new ra(u.outShape,a.dtype),k=n.data.get(a.dataId).values,v=n.data.get(r.dataId).values,I=w.values,N=ee(a.shape),S=ee(r.shape);for(let e=0;e<u.batchSize;++e){const t=e*N[0],n=e*w.strides[0];for(let e=0;e<u.outDepth;++e){const s=n+e*w.strides[1],a=e*u.strideDepth-y;for(let e=0;e<c;++e){const n=a+e*d;if(n<0||n>=u.inDepth)continue;const r=e*S[0],i=t+n*N[1];for(let e=0;e<u.outHeight;++e){const t=s+e*w.strides[2],n=e*u.strideHeight-x;for(let e=0;e<h;++e){const s=n+e*f;if(s<0||s>=u.inHeight)continue;const a=r+e*S[1],o=i+s*N[2];for(let e=0;e<u.outWidth;++e){const n=t+e*u.outChannels,s=e*u.strideWidth-b;for(let e=0;e<p;++e){const t=s+e*m;if(t<0||t>=u.inWidth)continue;const r=a+e*S[2],i=o+t*u.inChannels;let l=r;for(let e=0;e<u.inChannels;++e){const t=k[i+e];for(let e=0;e<u.outChannels;++e)I[n+e]+=t*v[l+e];l+=u.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},Kv={kernelName:Xe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:i,pad:o,filterShape:l}=s;sk([a,r],"conv3dBackpropFilterV2");const u=ee(a.shape),c=ee(r.shape),h=Ni(a.shape,l,i,1,o),p=h.strideDepth,d=h.strideHeight,f=h.strideWidth,m=h.filterDepth,g=h.filterHeight,y=h.filterWidth,b=new ra(h.filterShape,"float32"),x=b.values,[w,k,v,I]=b.strides,N=n.data.get(r.dataId).values,[S,T,$,C]=c,E=n.data.get(a.dataId).values,[A,R,F,D]=u,_=h.padInfo.front,O=h.padInfo.left,M=h.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((_-e)/p)),n=Math.min(h.outDepth,(h.inDepth+_-e)/p),s=e*w;for(let a=0;a<g;++a){const r=Math.max(0,Math.ceil((M-a)/d)),i=Math.min(h.outHeight,(h.inHeight+M-a)/d),o=a*k+s;for(let s=0;s<y;++s){const l=Math.max(0,Math.ceil((O-s)/f)),u=Math.min(h.outWidth,(h.inWidth+O-s)/f),c=s*v+o;for(let o=0;o<h.inChannels;++o){const m=o*I+c;for(let c=0;c<h.outChannels;++c){let g=0;for(let m=0;m<h.batchSize;++m){const h=m*A,y=m*S;for(let m=t;m<n;++m){const t=(e+m*p-_)*R+h,n=m*T+y;for(let e=r;e<i;++e){const r=(a+e*d-M)*F+t,i=e*$+n;for(let e=l;e<u;++e){const t=e*C+i;g+=E[(s+e*f-O)*D+r+o]*N[t+c]}}}}x[m+c]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},Xv={kernelName:Ye,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{pad:i,strides:o,inputShape:l}=s;sk([a],"conv3dBackpropInputV2");const u=ee(a.shape),c=ee(r.shape),h=Ni(l,r.shape,o,1,i),p=new ra(h.inShape,"float32"),d=p.values,[f,m,g,y]=p.strides,b=n.data.get(a.dataId).values,[x,w,k,v]=u,I=n.data.get(r.dataId).values,[N,S,T,$]=c,{batchSize:C,filterDepth:E,filterHeight:A,filterWidth:R,inChannels:F,inDepth:D,inHeight:_,inWidth:O,outChannels:M,outDepth:L,outHeight:z,outWidth:B,strideDepth:P,strideHeight:W,strideWidth:V}=h,U=E-1-h.padInfo.front,G=A-1-h.padInfo.top,H=R-1-h.padInfo.left;for(let e=0;e<C;++e)for(let t=0;t<F;++t)for(let n=0;n<D;++n){const s=n-U,a=Math.max(0,Math.ceil(s/P)),r=Math.min(L,(E+s)/P);for(let i=0;i<_;++i){const o=i-G,l=Math.max(0,Math.ceil(o/W)),u=Math.min(z,(A+o)/W);for(let c=0;c<O;++c){const h=c-H,p=Math.max(0,Math.ceil(h/V)),C=Math.min(B,(R+h)/V);let F=0;for(let n=a;n<r;++n){const a=n*P-s;for(let s=l;s<u;++s){const r=s*W-o;for(let i=p;i<C;++i){const o=x*e+w*n+k*s+v*i,l=N*(E-1-a)+S*(A-1-r)+T*(R-1-(i*V-h))+$*t;for(let e=0;e<M;++e)F+=b[o+e]*I[l+e]}}}d[f*e+m*n+g*i+y*c+t]=F}}}return n.makeTensorInfo(p.shape,p.dtype,p.values)}},Yv=ik(Ze,(e=>Math.cos(e))),Zv={kernelName:Ze,backendName:"cpu",kernelFunc:Yv},Jv=ik(Je,(e=>Math.cosh(e))),Qv={kernelName:Je,backendName:"cpu",kernelFunc:Jv},eI={kernelName:tt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:a,boxes:r,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,[c,h,p,d]=a.shape,f=r.shape[0],[m,g]=o,y=Ir([f,m,g,d],"float32"),b=n.data.get(r.dataId).values,x=n.data.get(i.dataId).values,w=n.data.get(a.dataId).values,k=ee(a.shape),v=ee(y.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],s=b[t+1],a=b[t+2],r=b[t+3],i=x[e];if(i>=c)continue;const o=m>1?(a-n)*(h-1)/(m-1):0,f=g>1?(r-s)*(p-1)/(g-1):0;for(let t=0;t<m;t++){const c=m>1?n*(h-1)+t*o:.5*(n+a)*(h-1);if(c<0||c>h-1)for(let n=0;n<g;n++)for(let s=0;s<d;s++){const a=s+n*v[2]+t*v[1]+e*v[0];y.values[a]=u}else if("bilinear"===l){const n=Math.floor(c),a=Math.ceil(c),o=c-n;for(let l=0;l<g;l++){const c=g>1?s*(p-1)+l*f:.5*(s+r)*(p-1);if(c<0||c>p-1){for(let n=0;n<d;n++){const s=n+l*v[2]+t*v[1]+e*v[0];y.values[s]=u}continue}const h=Math.floor(c),m=Math.ceil(c),b=c-h;for(let s=0;s<d;s++){let r=s+h*k[2]+n*k[1]+i*k[0];const u=w[r];r=s+m*k[2]+n*k[1]+i*k[0];const c=w[r];r=s+h*k[2]+a*k[1]+i*k[0];const p=w[r];r=s+m*k[2]+a*k[1]+i*k[0];const d=u+(c-u)*b,f=p+(w[r]-p)*b;r=s+l*v[2]+t*v[1]+e*v[0],y.values[r]=d+(f-d)*o}}}else for(let n=0;n<g;++n){const a=g>1?s*(p-1)+n*f:.5*(s+r)*(p-1);if(a<0||a>p-1){for(let s=0;s<d;s++){const a=s+n*v[2]+t*v[1]+e*v[0];y.values[a]=u}continue}const o=Math.round(a),l=Math.round(c);for(let s=0;s<d;s++){const a=s+o*k[2]+l*k[1]+i*k[0],r=s+n*v[2]+t*v[1]+e*v[0];y.values[r]=w[a]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},tI={kernelName:Qe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,exclusive:i,reverse:o}=s;sk(a,"cumprod");const l=Oo([r],a.shape.length);let u=a;null!=l&&(u=Qk({inputs:{x:a},backend:n,attrs:{perm:l}}));const c=Lo(1,a.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=ba(u.dtype,"int32"),p=se(O(u.shape),h),d=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)p[n]=i?1:d[n];else{const s=m(e,t-1);p[n]=i?d[s]*p[s]:d[n]*p[s]}}const g=n.makeTensorInfo(u.shape,h,p);if(null!=l){const e=Qk({inputs:{x:g},backend:n,attrs:{perm:Mo(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}},nI={kernelName:et,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,exclusive:i,reverse:o}=s;sk(a,"cumsum");const l=Oo([r],a.shape.length);let u=a;null!=l&&(u=Qk({inputs:{x:a},backend:n,attrs:{perm:l}}));const c=Lo(1,a.shape.length)[0];if(c!==u.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length-1} but got axis=${c}`);const h=ba(u.dtype,"int32"),p=ae(O(u.shape),h),d=n.data.get(u.dataId).values,f=u.shape[u.shape.length-1],m=o?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<d.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)p[n]=i?0:d[n];else{const s=m(e,t-1);p[n]=i?d[s]+p[s]:d[n]+p[s]}}const g=n.makeTensorInfo(u.shape,h,p);if(null!=l){const e=Qk({inputs:{x:g},backend:n,attrs:{perm:Mo(l)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(u),e}return g}},sI={kernelName:nt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:i,binaryOutput:o}=s;if(1===a.shape.length){const e=Cv(n.data.get(a.dataId).values,n.data.get(r.dataId).values,r.dtype,r.shape,i);return n.makeTensorInfo([i],r.dtype,e)}if(2===a.shape.length){const e=Ev(n.bufferSync(a),n.bufferSync(r),i,o);return n.makeTensorInfo(e.shape,r.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}},aI={kernelName:st,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockSize:r,dataFormat:i}=s;R("NHWC"===i,(()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${i}`));const o=a.shape[0],l=a.shape[1],u=a.shape[2],c=a.shape[3],h=l*r,p=u*r,d=c/(r*r),f=n.data.get(a.dataId).values,m=new Float32Array(o*h*p*d);let g=0;for(let e=0;e<o;++e)for(let t=0;t<h;++t){const n=Math.floor(t/r),s=t%r;for(let t=0;t<p;++t){const a=Math.floor(t/r),i=(s*r+t%r)*d;for(let t=0;t<d;++t){const s=t+i+c*(a+u*(n+l*e));m[g++]=f[s]}}}return n.makeTensorInfo([o,h,p,d],a.dtype,m)}};function rI(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;sk([a,r],"depthwiseConv2DNative");const c=ee(a.shape),h=ee(r.shape);let p=l;null==p&&(p=[1,1]),R(Ri(i,p),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${p}'`));const d=Ii(a.shape,r.shape,i,p,o,u,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=d,x=b.left,w=b.top,k=d.outChannels/d.inChannels,v=new ra(d.outShape,a.dtype),I=n.data.get(a.dataId).values,N=n.data.get(r.dataId).values,S=v.values;for(let e=0;e<d.batchSize;++e){const t=e*c[0],n=e*v.strides[0];for(let e=0;e<d.outHeight;++e){const s=n+e*v.strides[1],a=e*d.strideHeight-w;for(let e=0;e<f;++e){const n=a+e*g;if(n<0||n>=d.inHeight)continue;const r=e*h[0],i=t+n*c[1];for(let e=0;e<d.outWidth;++e){const t=s+e*v.strides[2],n=e*d.strideWidth-x;for(let e=0;e<m;++e){const s=n+e*y;if(s<0||s>=d.inWidth)continue;const a=r+e*h[1],o=i+s*d.inChannels;let l=t,u=a;for(let e=0;e<d.inChannels;++e){const t=I[o+e];for(let e=0;e<k;++e)S[l+e]+=t*N[u+e];l+=k,u+=k}}}}}}return n.makeTensorInfo(v.shape,v.dtype,v.values)}const iI={kernelName:at,backendName:"cpu",kernelFunc:rI},oI={kernelName:rt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s;sk([a,r],"depthwiseConv2dNativeBackpropFilter");const h=Ii(a.shape,c,i,o,l,u,!0),{strideHeight:p,strideWidth:d,filterHeight:f,filterWidth:m}=h,g=new ra(h.filterShape,"float32"),y=h.padInfo.left,b=h.padInfo.top,x=h.outChannels/h.inChannels,w=n.data.get(a.dataId).values,k=new ra(a.shape,a.dtype,w),v=n.data.get(r.dataId).values,I=new ra(r.shape,r.dtype,v);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/p)),n=Math.min(h.outHeight,(h.inHeight+b-e)/p);for(let s=0;s<m;++s){const a=Math.max(0,Math.ceil((y-s)/d)),r=Math.min(h.outWidth,(h.inWidth+y-s)/d);for(let i=0;i<h.outChannels;++i){const o=Math.trunc(i/x),l=i%x;let u=0;for(let l=0;l<h.batchSize;++l)for(let c=t;c<n;++c){const t=e+c*p-b;for(let e=a;e<r;++e){const n=s+e*d-y;u+=k.get(l,t,n,o)*I.get(l,c,e,i)}}g.set(u,e,s,o,l)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},lI={kernelName:it,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s;sk([a,r],"depthwiseConv2DNativeBackpropInput");const h=ee(a.shape),p=ee(r.shape),d=Ii(c,r.shape,i,o,l,u,!0),f=new ra(d.inShape,"float32"),m=f.values,[g,y,b]=f.strides,x=n.data.get(a.dataId).values,[w,k,v]=h,I=n.data.get(r.dataId).values,[N,S,T]=p,{batchSize:$,filterHeight:C,filterWidth:E,inChannels:A,inHeight:R,inWidth:F,outChannels:D,outHeight:_,outWidth:O,strideHeight:M,strideWidth:L}=d,z=C-1-d.padInfo.top,B=E-1-d.padInfo.left,P=D/A;for(let e=0;e<$;++e)for(let t=0;t<A;++t)for(let n=0;n<R;++n){const s=n-z,a=Math.max(0,Math.ceil(s/M)),r=Math.min(_,(C+s)/M);for(let i=0;i<F;++i){const o=i-B,l=Math.max(0,Math.ceil(o/L)),u=Math.min(O,(E+o)/L);let c=0;for(let n=a;n<r;++n){const a=n*M-s;for(let s=l;s<u;++s){const r=w*e+k*n+v*s,i=N*(C-1-a)+S*(E-1-(s*L-o))+T*t;for(let e=0;e<P;++e)c+=x[r+(t*P+e)]*I[i+e]}}m[g*e+y*n+b*i+t]=c}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},uI={kernelName:ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=O(s.shape),r=n.data.get(s.dataId).values,i=Ir([a,a],s.dtype),o=i.values;for(let e=0;e<r.length;e++)o[e*a+e]=r[e];const l=[...s.shape,...s.shape];return n.makeTensorInfo(l,i.dtype,i.values)}},cI={kernelName:lt,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a}=e,{strides:r,pad:i,dilations:o}=n,l=t,u=l.data.get(s.dataId).values,c=s.shape.length,h=l.data.get(a.dataId).values,p=a.shape.length,{batchSize:d,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:x,strideHeight:w,strideWidth:k,filterHeight:v,filterWidth:I,dilationHeight:N,dilationWidth:S,outShape:T}=wi(s.shape,a.shape,r,i,"NHWC",o),$=O(T),C=T.length,E=H(s.dtype,$);for(let e=0;e<d;++e)for(let t=0;t<y;++t){const n=t*w-x.top;for(let r=0;r<b;++r){const i=r*k-x.left;for(let o=0;o<g;++o){let l=Number.MIN_SAFE_INTEGER;for(let t=0;t<v;++t){const r=n+t*N;if(r>=0&&r<f)for(let n=0;n<I;++n){const d=i+n*S;if(d>=0&&d<m){const i=oe([e,r,d,o],c,ee(s.shape)),f=oe([t,n,o],p,ee(a.shape)),m=u[i]+h[f];m>l&&(l=m)}}}E[oe([e,t,r,o],C,ee(T))]=l}}}return{dataId:l.write(qs(E,s.dtype),T,s.dtype),shape:T,dtype:s.dtype}}},hI={kernelName:ct,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a,dy:r}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=ne(s.shape,u.data.get(s.dataId).values),h=ne(a.shape,u.data.get(a.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:I,dilationWidth:N,outShape:S}=wi(s.shape,a.shape,i,o,"NHWC",l);R(r.rank===S.length,(()=>`Error in Dilation2DBackpropFilter, dy must have the same rank as output ${S.length}, but got ${r.rank}`));const T=ne(S,u.data.get(r.dataId).values),$=re(a.shape,a.dtype);for(let e=0;e<p;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let s=0;s<y;++s){const a=s*w-b.left;for(let r=0;r<m;++r){let i=Number.MIN_SAFE_INTEGER,o=0,l=0;for(let t=0;t<k;++t){const s=n+t*I;if(s>=0&&s<d)for(let n=0;n<v;++n){const u=a+n*N;if(u>=0&&u<f){const a=c[e][s][u][r]+h[t][n][r];a>i&&(i=a,o=t,l=n)}}}$[o][l][r]+=T[e][t][s][r]}}}return{dataId:u.write(qs($,s.dtype),a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},pI={kernelName:ut,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,filter:a,dy:r}=e,{strides:i,pad:o,dilations:l}=n,u=t,c=ne(s.shape,u.data.get(s.dataId).values),h=ne(a.shape,u.data.get(a.dataId).values),{batchSize:p,inHeight:d,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:x,strideWidth:w,filterHeight:k,filterWidth:v,dilationHeight:I,dilationWidth:N,outShape:S}=wi(s.shape,a.shape,i,o,"NHWC",l);R(r.rank===S.length,(()=>`Error in Dilation2DBackpropInput, dy must have the same rank as output ${S.length}, but got ${r.rank}`));const T=ne(S,u.data.get(r.dataId).values),$=re(s.shape,s.dtype);for(let e=0;e<p;++e)for(let t=0;t<g;++t){const n=t*x-b.top;for(let s=0;s<y;++s){const a=s*w-b.left;for(let r=0;r<m;++r){let i=Number.MIN_SAFE_INTEGER,o=n<0?0:n,l=a<0?0:a;for(let t=0;t<k;++t){const s=n+t*I;if(s>=0&&s<d)for(let n=0;n<v;++n){const u=a+n*N;if(u>=0&&u<f){const a=c[e][s][u][r]+h[t][n][r];a>i&&(i=a,o=s,l=u)}}}$[e][o][l][r]+=T[e][t][s][r]}}}return{dataId:u.write(qs($,s.dtype),s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},dI=fk(((e,t)=>e*t)),fI=Ok(((e,t,n,s)=>({real:e*n-t*s,imag:e*s+t*n}))),mI=_k(on,dI,fI),gI={kernelName:on,backendName:"cpu",kernelFunc:mI};function yI(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s;let o;sk(a,"sum"),o="bool"===a.dtype?Fk({inputs:{x:a},backend:n,attrs:{dtype:"int32"}}):ck({inputs:{x:a},backend:n});const l=o.shape.length,u=V(r,o.shape),c=Oo(u,l);let h=u,p=o;null!=c&&(p=Qk({inputs:{x:o},backend:n,attrs:{perm:c}}),h=Lo(h.length,l)),_o("sum",h,p.shape.length);const[d,f]=Fo(p.shape,h);let m=Ek(n,d,ba(p.dtype,"int32"));const g=O(f),y=n.data.get(m.dataId).values,b=n.data.get(p.dataId).values;for(let e=0;e<y.length;++e){const t=e*g;let n=0;for(let e=0;e<g;++e)n+=b[t+e];y[e]=n}if(i){const e=m;m=Pk({inputs:{x:m},backend:n,attrs:{shape:Do(m.shape,u)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(o),null!=c&&n.disposeIntermediateTensorInfo(p),m}const bI={kernelName:Gn,backendName:"cpu",kernelFunc:yI},xI={kernelName:pt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:a}=s,r=t,{allDims:i,summedDims:o,idDims:l}=Cc(a,r.length);Ac(i.length,l,r);const{path:u,steps:c}=Rc(o,l),h=c.length;let p=null,d=i.length;const f=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=Ec(d,l[t]);let a;Fc(e)?a=r[t]:(a=Qk({inputs:{x:r[t]},backend:n,attrs:{perm:e}}),f.push(a));const i=a.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);M(a.shape,i)||(a=Pk({inputs:{x:a},backend:n,attrs:{shape:i}}),f.push(a)),null===p?p=a:(p=mI({inputs:{a,b:p},backend:n}),f.push(p))}e<h-1&&(u[e]>=0&&(p=yI({inputs:{x:p},backend:n,attrs:{axis:u[e]-(i.length-d),keepDims:!1}}),f.push(p)),d--)}for(const e of f)e!==p&&n.disposeIntermediateTensorInfo(e);return p}},wI={kernelName:ft,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:s,y:a}=t;sk([s,a],"eluGrad");const r=new Float32Array(O(a.shape)),i=n.data.get(a.dataId).values,o=n.data.get(s.dataId).values;for(let e=0;e<i.length;++e){const t=i[e];r[e]=t>=1?o[e]:o[e]*(t+1)}return n.makeTensorInfo(a.shape,"float32",r)}},kI=fk(((e,t)=>e===t?1:0)),vI=_k(gt,kI,null,"bool"),II={kernelName:gt,backendName:"cpu",kernelFunc:vI},NI=dc,SI=fc,TI=mc,$I=gc,CI=yc,EI=bc,AI=ik(mt,(e=>{const t=Math.sign(e),n=Math.abs(e),s=1/(1+NI*n);return t*(1-((((EI*s+CI)*s+$I)*s+TI)*s+SI)*s*Math.exp(-n*n))})),RI={kernelName:mt,backendName:"cpu",kernelFunc:AI},FI=vk((e=>Math.exp(e))),DI=ok(yt,FI,"float32"),_I={kernelName:yt,backendName:"cpu",kernelFunc:DI};function OI(e){const{inputs:t,backend:n,attrs:s}=e,{input:a}=t,{dim:r}=s,i=a.shape.length,o=a.shape.slice();let l=r;return r<0&&(R(-(i+1)<=r,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+r+1),o.splice(l,0,1),Pk({inputs:{x:a},backend:n,attrs:{shape:o}})}const MI={kernelName:bt,backendName:"cpu",kernelFunc:OI},LI=vk((e=>Math.expm1(e))),zI=ok(xt,LI),BI={kernelName:xt,backendName:"cpu",kernelFunc:zI},PI=fk(((e,t)=>e/t)),WI=_k(ht,PI),VI={kernelName:ht,backendName:"cpu",kernelFunc:WI},UI=fk(((e,t)=>e-t)),GI=Ok(((e,t,n,s)=>({real:e-n,imag:t-s}))),HI=_k(rs,UI,GI),jI={kernelName:rs,backendName:"cpu",kernelFunc:HI};function qI(e,t,n){const s=e.shape,a=s[0],r=s[1],i=n.data.get(e.dataId),o=i.complexTensorInfos.real,l=i.complexTensorInfos.imag,u=[a,r],c=O(u),h=G("float32",c),p=G("float32",c);for(let e=0;e<a;e++){const s=Sv({inputs:{x:o},backend:n,attrs:{begin:[e,0],size:[1,r]}}),a=Sv({inputs:{x:l},backend:n,attrs:{begin:[e,0],size:[1,r]}}),i=$k({inputs:{real:s,imag:a},backend:n}),{real:u,imag:c}=KI(i,t,n),d=xc(u,c);for(let t=0;t<r;t++){const n=Ic(d,t);h[e*r+t]=n.real,p[e*r+t]=n.imag}n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(i)}const d=n.makeTensorInfo(u,"float32",h),f=n.makeTensorInfo(u,"float32",p),m=$k({inputs:{real:d,imag:f},backend:n});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}function KI(e,t,n){const s=O(e.shape),a=n.data.get(e.dataId),r=n.data.get(a.complexTensorInfos.real.dataId).values,i=n.data.get(a.complexTensorInfos.imag.dataId).values;if(0==((o=s)&o-1)){const a=XI(r,i,s,t,n),o=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(o,"float32",a.real),t=n.makeTensorInfo(o,"float32",a.imag),r=n.makeTensorInfo([],"float32",js(s,"float32")),i=ck({inputs:{x:r},backend:n}),l=VI.kernelFunc({inputs:{a:e,b:r},backend:n}),u=VI.kernelFunc({inputs:{a:t,b:i},backend:n}),c=n.data.get(l.dataId).values,h=n.data.get(u.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),{real:c,imag:h}}return a}{const e=function(e,t,n){const s=new Float32Array(2*t);for(let a=0;a<t;a++){let r=0,i=0;for(let s=0;s<t;s++){const o=Tc(a*s,t,n),l=Ic(e,s);r+=l.real*o.real-l.imag*o.imag,i+=l.real*o.imag+l.imag*o.real}n&&(r/=t,i/=t),Nc(s,r,i,a)}return s}(xc(r,i),s,t);return wc(e)}var o}function XI(e,t,n,s,a){if(1===n)return{real:e,imag:t};const r=xc(e,t),i=n/2,o=kc(r),l=o.real,u=o.imag,c=[l.length],h=a.makeTensorInfo(c,"float32",l),p=a.makeTensorInfo(c,"float32",u),d=$k({inputs:{real:h,imag:p},backend:a}),f=vc(r),m=f.real,g=f.imag,y=[m.length],b=a.makeTensorInfo(y,"float32",m),x=a.makeTensorInfo(y,"float32",g),w=$k({inputs:{real:b,imag:x},backend:a}),k=XI(l,u,i,s,a),v=k.real,I=k.imag,N=[v.length],S=a.makeTensorInfo(N,"float32",v),T=a.makeTensorInfo(N,"float32",I),$=$k({inputs:{real:S,imag:T},backend:a}),C=XI(m,g,i,s,a),E=C.real,A=C.imag,R=[E.length],F=a.makeTensorInfo(R,"float32",E),D=a.makeTensorInfo(R,"float32",A),_=$k({inputs:{real:F,imag:D},backend:a}),O=Sc(n,s),M=[O.real.length],L=a.makeTensorInfo(M,"float32",O.real),z=a.makeTensorInfo(M,"float32",O.imag),B=$k({inputs:{real:L,imag:z},backend:a}),P=mI({inputs:{a:B,b:_},backend:a}),W=zk({inputs:{a:$,b:P},backend:a}),V=HI({inputs:{a:$,b:P},backend:a}),U=Ak({inputs:{input:W},backend:a}),G=Ak({inputs:{input:V},backend:a}),H=Bv({inputs:{input:W},backend:a}),j=Bv({inputs:{input:V},backend:a}),q=Wv({inputs:[U,G],backend:a,attrs:{axis:0}}),K=Wv({inputs:[H,j],backend:a,attrs:{axis:0}}),X=a.data.get(q.dataId).values,Y=a.data.get(K.dataId).values;return a.disposeIntermediateTensorInfo(h),a.disposeIntermediateTensorInfo(p),a.disposeIntermediateTensorInfo(d),a.disposeIntermediateTensorInfo(b),a.disposeIntermediateTensorInfo(x),a.disposeIntermediateTensorInfo(w),a.disposeIntermediateTensorInfo(S),a.disposeIntermediateTensorInfo(T),a.disposeIntermediateTensorInfo($),a.disposeIntermediateTensorInfo(F),a.disposeIntermediateTensorInfo(D),a.disposeIntermediateTensorInfo(_),a.disposeIntermediateTensorInfo(L),a.disposeIntermediateTensorInfo(z),a.disposeIntermediateTensorInfo(B),a.disposeIntermediateTensorInfo(P),a.disposeIntermediateTensorInfo(W),a.disposeIntermediateTensorInfo(V),a.disposeIntermediateTensorInfo(U),a.disposeIntermediateTensorInfo(H),a.disposeIntermediateTensorInfo(G),a.disposeIntermediateTensorInfo(j),a.disposeIntermediateTensorInfo(q),a.disposeIntermediateTensorInfo(K),{real:X,imag:Y}}const YI={kernelName:wt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,a=O(s.shape),r=s.shape[s.shape.length-1],i=Pk({inputs:{x:s},backend:n,attrs:{shape:[a/r,r]}}),o=qI(i,!1,n),l=Pk({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}};function ZI(e){const{backend:t,attrs:n}=e,{shape:s,value:a,dtype:r}=n,i=r||Z(a),o=H(i,O(s));return function(e,t,n){e.fill(t)}(o,a),t.makeTensorInfo(s,i,o)}const JI={kernelName:kt,backendName:"cpu",kernelFunc:ZI},QI={kernelName:vt,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,a=n,r=G(s.dtype,O(s.shape)),[i,o,l,u]=s.shape,c=a.data.get(s.dataId).values;for(let e=0;e<i;e++){const t=e*l*o*u;for(let e=0;e<o;e++){const n=e*(l*u);for(let e=0;e<l;e++){const s=e*u;for(let a=0;a<u;a++){const i=Math.round(l-e-1),o=t+n+s+a;let h=c[o];i>=0&&i<l&&(h=c[t+n+i*u+a]),r[o]=h}}}}return{dataId:a.write(r,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},eN=vk((e=>Math.floor(e))),tN=ok(It,eN),nN={kernelName:It,backendName:"cpu",kernelFunc:tN},sN=fk(((e,t)=>Math.floor(e/t))),aN=_k(Nt,sN,null,"int32"),rN={kernelName:Nt,backendName:"cpu",kernelFunc:aN},iN={kernelName:ws,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=Uv({inputs:{x:a,filter:r},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;if("NCHW"===c&&1===i.shape.length&&1!==i.shape[0]){const e=Pk({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});m=zk({inputs:{a:m,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else m=zk({inputs:{a:m,b:i},backend:n});n.disposeIntermediateTensorInfo(e)}if(d){const e=m;if("NCHW"===c&&"prelu"===d&&1===o.shape.length&&1!==o.shape[0]){const e=Pk({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=Tk(n,m,d,e,f),n.disposeIntermediateTensorInfo(e)}else m=Tk(n,m,d,o,f);n.disposeIntermediateTensorInfo(e)}return m}},oN={kernelName:ks,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s;let m=rI({inputs:{x:a,filter:r},backend:n,attrs:{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p}});if(i){const e=m;m=zk({inputs:{a:m,b:i},backend:n}),n.disposeIntermediateTensorInfo(e)}if(d){const e=m;m=Tk(n,m,d,o,f),n.disposeIntermediateTensorInfo(e)}return m}};function lN(e,t,n,s,a,r,i,o,l){const u=Ir([s,r],n);for(let n=0;n<s;n++){const s=[];let c=0;for(let t=0;t<a;t++){const r=e[n*a+t];c+=r*i[t],s.push(r)}if(c<0||c>=l/r)throw new Error(`Invalid indices: ${s} does not index into ${o}`);for(let e=0;e<r;e++)u.values[n*r+e]=t.get(...t.indexToLoc(c*r+e))}return u}const uN={kernelName:$t,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:a}=t,r=O(s.shape),i=a.shape,o=i[i.length-1],[l,u,c,h]=oc(s,a);if(0===u)return n.makeTensorInfo(l,s.dtype,[]);const p=lN(n.data.get(a.dataId).values,n.bufferSync(s),s.dtype,u,o,c,h,s.shape,r);return n.makeTensorInfo(l,s.dtype,p.values)}};function cN(e,t,n){const s=Ir(n,e.dtype);for(let n=0;n<s.size;++n){const a=s.indexToLoc(n).slice(),r=a[0],i=a[2],o=t.locToIndex([r,i]);a[2]=t.values[o];const l=e.locToIndex(a);0<=l&&l<e.values.length&&(s.values[n]=e.values[l])}return s}const hN={kernelName:Tt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,indices:r}=t,{axis:i,batchDims:o}=s;sk([a,r],"gatherV2");const l=V(i,a.shape)[0],u=n.data.get(r.dataId).values,c=a.shape[l];for(let e=0;e<u.length;++e){const t=u[e];R(t<=c-1&&t>=0,(()=>`GatherV2: the index value ${t} is not in [0, ${c-1}]`))}let h=o;null==o&&(h=0);const p=O(r.shape),d=Xc(a,r,l,h),f=Pk({inputs:{x:a},backend:n,attrs:{shape:[d.batchSize,d.outerSize,d.dimSize,d.sliceSize]}}),m=Pk({inputs:{x:r},backend:n,attrs:{shape:[d.batchSize,p/d.batchSize]}}),g=[d.batchSize,d.outerSize,p/d.batchSize,d.sliceSize],y=n.bufferSync(m),b=cN(n.bufferSync(f),y,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(d.outputShape,b.dtype,b.values)}},pN=fk(((e,t)=>e>t?1:0)),dN=_k(Ct,pN,null,"bool"),fN={kernelName:Ct,backendName:"cpu",kernelFunc:dN},mN=fk(((e,t)=>e>=t?1:0)),gN=_k(Et,mN,null,"bool"),yN={kernelName:Et,backendName:"cpu",kernelFunc:gN},bN={kernelName:Rt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t,a=O(s.shape),r=s.shape[s.shape.length-1],i=Pk({inputs:{x:s},backend:n,attrs:{shape:[a/r,r]}}),o=qI(i,!0,n),l=Pk({inputs:{x:o},backend:n,attrs:{shape:s.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(o),l}},xN=ik(Dt,(e=>Number.isFinite(e)?1:0),"bool"),wN={kernelName:Dt,backendName:"cpu",kernelFunc:xN},kN=ik(_t,(e=>Math.abs(e)===1/0?1:0),"bool"),vN={kernelName:_t,backendName:"cpu",kernelFunc:kN},IN=ik(Ot,(e=>Number.isNaN(e)?1:0),"bool"),NN={kernelName:Ot,backendName:"cpu",kernelFunc:IN},SN=fk(((e,t)=>e<t?1:0)),TN=_k(Lt,SN,null,"bool"),$N={kernelName:Lt,backendName:"cpu",kernelFunc:TN},CN=fk(((e,t)=>e<=t?1:0)),EN=_k(zt,CN,null,"bool"),AN={kernelName:zt,backendName:"cpu",kernelFunc:EN};function RN(e,t,n){const s=(t-e)/(n-1),a=ae(n,"float32");a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+s;return a}const FN={kernelName:Bt,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:a,num:r}=n,i=RN(s,a,r);return t.makeTensorInfo([i.length],"float32",i)}},DN=vk((e=>Math.log(e))),_N=ok(Pt,DN),ON={kernelName:Pt,backendName:"cpu",kernelFunc:_N},MN=ik(Wt,(e=>Math.log1p(e))),LN={kernelName:Wt,backendName:"cpu",kernelFunc:MN},zN=fk(((e,t)=>e&&t)),BN=_k(Vt,zN,null,"bool"),PN={kernelName:Vt,backendName:"cpu",kernelFunc:BN},WN=ik(Ut,(e=>e?0:1),"bool"),VN={kernelName:Ut,backendName:"cpu",kernelFunc:WN},UN=fk(((e,t)=>e||t)),GN=_k(Gt,UN,null,"bool"),HN={kernelName:Gt,backendName:"cpu",kernelFunc:GN},jN={kernelName:Ht,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{depthRadius:r,bias:i,alpha:o,beta:l}=s;sk(a,"LRN");const u=a.shape[3],c=u-1,h=n.data.get(a.dataId).values,p=O(a.shape),d=new Float32Array(p);function f(e){const t=e%u;let n=e-t+Math.max(0,t-r);const s=e-t+Math.min(t+r,c);let a=0;for(;n<=s;n++){const e=h[n];a+=e*e}return a}for(let e=0;e<p;e++){const t=f(e),n=h[e]*Math.pow(i+o*t,-l);d[e]=n}return n.makeTensorInfo(a.shape,a.dtype,d)}},qN={kernelName:jt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,y:r,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s;sk(i,"LRNGrad");const h=O(i.shape),p=i.shape[3],d=n.data.get(i.dataId).values,f=n.data.get(a.dataId).values,m=n.data.get(r.dataId).values,g=new Float32Array(h),y=h;for(let e=0;e<y;e++){const t=e%p,n=e-t+Math.max(0,t-o),s=e-t+Math.min(p,t+o+1);let a=0;for(let e=n;e<s;e++)a+=Math.pow(f[e],2);a=u*a+l;for(let t=n;t<s;t++){let n=-2*u*c*f[t]*m[e]/a;e===t&&(n+=Math.pow(a,-c)),n*=d[e],g[t]+=n}}return n.makeTensorInfo(i.shape,a.dtype,g)}};function KN(e,t,n,s){const a=G(s,O(n));for(let n=0;n<a.length;++n){const s=n*t;let r=e[s];for(let n=0;n<t;++n){const t=e[s+n];(Number.isNaN(t)||t>r)&&(r=t)}a[n]=r}return a}function XN(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reductionIndices:r,keepDims:i}=s,o=n;let l=a.shape;const u=l.length,c=V(r,l);let h=c;const p=Oo(h,u);let d=o.data.get(a.dataId).values;if(null!=p){const e=new Array(u);for(let t=0;t<e.length;t++)e[t]=l[p[t]];d=Jk(d,l,a.dtype,p,e),h=Lo(h.length,u),l=e}sk(a,"max"),_o("max",h,u);const[f,m]=Fo(l,h),g=KN(d,O(m),f,a.dtype),y=o.write(g,f,a.dtype);let b=f;return i&&(b=Do(f,c)),{dataId:y,shape:b,dtype:a.dtype}}const YN={kernelName:qt,backendName:"cpu",kernelFunc:XN},ZN=fk(((e,t)=>Math.max(e,t))),JN=_k(Kt,ZN),QN={kernelName:Kt,backendName:"cpu",kernelFunc:JN},eS={kernelName:Xt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;sk(a,"maxPool");const{filterSize:r,strides:i,pad:o,dimRoundingMode:l}=s;R(Ri(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=ki(a.shape,r,i,1,o,l);let c;if(1===u.filterWidth&&1===u.filterHeight&&M(u.inShape,u.outShape))c=ck({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=ee(a.shape),s=gv(e,a.shape,a.dtype,t,u,"max");c=n.makeTensorInfo(u.outShape,a.dtype,s.values)}return c}},tS={kernelName:Zt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:r,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s;sk(a,"maxPool3d");const c=vi(a.shape,r,i,1,o,l,u),h=bv(n.data.get(a.dataId).values,a.shape,a.dtype,ee(a.shape),c,"max");return n.makeTensorInfo(h.shape,"float32",h.values)}},nS={kernelName:Jt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,{filterSize:i,strides:o,pad:l,dimRoundingMode:u}=s;sk([a,r],"maxPool3DGrad");const c=vi(r.shape,i,o,1,l,u),h=function(e,t){const n=Ir(t.outShape,"int32"),s=t.strideDepth,a=t.strideHeight,r=t.strideWidth,i=t.dilationDepth,o=t.dilationHeight,l=t.dilationWidth,u=t.effectiveFilterDepth,c=t.effectiveFilterHeight,h=t.effectiveFilterWidth,p=t.padInfo.front,d=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*s-p;let x=b;for(;x<0;)x+=i;const w=Math.min(t.inDepth,u+b);for(let s=0;s<t.outHeight;++s){const u=s*a-d;let p=u;for(;p<0;)p+=o;const k=Math.min(t.inHeight,c+u);for(let a=0;a<t.outWidth;++a){const d=a*r-f;let v=d;for(;v<0;)v+=l;const I=Math.min(t.inWidth,h+d);let N=Number.NEGATIVE_INFINITY,S=-1;for(let t=x;t<w;t+=i){const n=t-b;for(let s=p;s<k;s+=o){const a=s-u;for(let r=v;r<I;r+=l){const i=r-d,o=e.get(m,t,s,r,g);o>=N&&(N=o,S=n*c*h+a*c+i)}}}n.set(S,m,y,s,a,g)}}}return n}(n.bufferSync(r),c),p=c.strideDepth,d=c.strideHeight,f=c.strideWidth,m=c.dilationDepth,g=c.dilationHeight,y=c.dilationWidth,b=c.effectiveFilterDepth,x=c.effectiveFilterHeight,w=c.effectiveFilterWidth,k=b-1-c.padInfo.front,v=w-1-c.padInfo.left,I=x-1-c.padInfo.top,N=Ir(r.shape,"float32"),S=n.bufferSync(a);for(let e=0;e<c.batchSize;++e)for(let t=0;t<c.inChannels;++t)for(let n=0;n<c.inDepth;++n)for(let s=0;s<c.inHeight;++s)for(let a=0;a<c.inWidth;++a){const r=n-k,i=s-I,o=a-v;let l=0;for(let n=0;n<b;n+=m){const s=(r+n)/p;if(!(s<0||s>=c.outDepth||Math.floor(s)!==s))for(let a=0;a<x;a+=g){const r=(i+a)/d;if(!(r<0||r>=c.outHeight||Math.floor(r)!==r))for(let i=0;i<w;i+=y){const u=(o+i)/f;if(u<0||u>=c.outWidth||Math.floor(u)!==u)continue;const p=b*x*w-1-h.get(e,s,r,u,t)===n*x*w+a*w+i?1:0;0!==p&&(l+=S.get(e,s,r,u,t)*p)}}}N.set(l,e,n,s,a,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}},sS={kernelName:Yt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r,output:i}=t,o=r;sk([r,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=ki(o.shape,l,u,1,c,h),d=n.data.get(o.dataId).values,f=Ir(p.outShape,o.dtype,yv(d,o.shape,o.dtype,p).values),m=p.strideHeight,g=p.strideWidth,y=p.dilationHeight,b=p.dilationWidth,x=p.effectiveFilterHeight,w=p.effectiveFilterWidth,k=w-1-p.padInfo.left,v=x-1-p.padInfo.top,I=Ir(o.shape,"float32"),N=n.data.get(a.dataId).values,S=Ir(a.shape,"float32",N);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inHeight;++n)for(let s=0;s<p.inWidth;++s){const a=n-v,r=s-k;let i=0;for(let n=0;n<x;n+=y){const s=(a+n)/m;if(!(s<0||s>=p.outHeight||Math.floor(s)!==s))for(let a=0;a<w;a+=b){const o=(r+a)/g;if(o<0||o>=p.outWidth||Math.floor(o)!==o)continue;const l=x*w-1-f.get(e,s,o,t)===n*w+a?1:0;0!==l&&(i+=S.get(e,s,o,t)*l)}}I.set(i,e,n,s,t)}return n.makeTensorInfo(I.shape,I.dtype,I.values)}},aS={kernelName:Qt,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:a,strides:r,pad:i,includeBatchInIndex:o}=t,l=n;sk(s,"MaxPoolWithArgmax");const u=l.data.get(s.dataId).values,c=ki(s.shape,a,r,[1,1],i),[h,p]=function(e,t,n,s,a){const r=gv(e,0,n,ee(t),a,"max"),i=yv(e,t,n,a,!0,s);return[r.values,i.values]}(u,s.shape,s.dtype,o,c),d=l.write(h,c.outShape,s.dtype),f=l.write(p,c.outShape,s.dtype);return[{dataId:d,shape:c.outShape,dtype:s.dtype},{dataId:f,shape:c.outShape,dtype:"int32"}]}},rS={kernelName:en,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s,o=V(r,a.shape),l=O(Fo(a.shape,o)[1]),u=[],c=n.makeTensorInfo([],"float32",new Float32Array([l]));u.push(c);const h=Fk({inputs:{x:a},backend:n,attrs:{dtype:"float32"}});u.push(h);const p=WI({inputs:{a:h,b:c},backend:n});u.push(p);const d=yI({inputs:{x:p},backend:n,attrs:{axis:r,keepDims:i}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}},iS={kernelName:tn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s;sk(a,"min");const o=V(r,a.shape);let l=o;const u=Oo(l,a.shape.length);let c=a;null!=u&&(c=Qk({inputs:{x:a},backend:n,attrs:{perm:u}}),l=Lo(l.length,a.shape.length)),_o("min",l,c.shape.length);const[h,p]=Fo(c.shape,l),d=O(p),f=ae(O(h),c.dtype),m=n.data.get(c.dataId).values;for(let e=0;e<f.length;++e){const t=e*d;let n=m[t];for(let e=0;e<d;++e){const s=m[t+e];(Number.isNaN(s)||s<n)&&(n=s)}f[e]=n}null!=u&&n.disposeIntermediateTensorInfo(c);const g=n.makeTensorInfo(h,c.dtype,f);if(i){const e=Pk({inputs:{x:g},backend:n,attrs:{shape:Do(h,o)}});return n.disposeIntermediateTensorInfo(g),e}return g}},oS=fk(((e,t)=>Math.min(e,t))),lS=_k(nn,oS),uS={kernelName:nn,backendName:"cpu",kernelFunc:lS},cS={kernelName:sn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:r,mode:i}=s;sk(a,"mirrorPad");const o=r.map(((e,t)=>e[0]+a.shape[t]+e[1])),l=r.map((e=>e[0])),u=r.map(((e,t)=>e[0]+a.shape[t])),c="reflect"===i?0:1,h=n.data.get(a.dataId).values,p=a.shape.length,d=ee(a.shape),f=O(o),m=o.length,g=ee(o),y=G(a.dtype,f);for(let e=0;e<f;e++){let t=le(e,m,g);for(let e=0;e<m;e++)t[e]<l[e]?t[e]=2*l[e]-t[e]-c:t[e]>=u[e]&&(t[e]=2*(u[e]-1)-t[e]+c);t=t.map(((e,t)=>e-l[t]));const n=oe(t,p,d);y[e]=h[n]}return{dataId:n.write(y,o,a.dtype),shape:o,dtype:a.dtype}}},hS=fk(((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t})),pS=_k(an,hS),dS={kernelName:an,backendName:"cpu",kernelFunc:pS};function fS(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{dim:r}=s,i=a.shape.length;let o=r;if(-1===o&&(o=i-1),o!==i-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${i} and dim was ${o}`);const l=V([o],a.shape),u=XN({inputs:{x:a},backend:n,attrs:{reductionIndices:l,keepDims:!1}}),c=Do(u.shape,l),h=Pk({inputs:{x:u},backend:n,attrs:{shape:c}}),p=HI({inputs:{a,b:h},backend:n}),d=DI({inputs:{x:p},backend:n}),f=yI({inputs:{x:d},backend:n,attrs:{axis:l,keepDims:!1}}),m=Pk({inputs:{x:f},backend:n,attrs:{shape:c}}),g=WI({inputs:{a:d,b:m},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const mS={kernelName:qn,backendName:"cpu",kernelFunc:fS},gS={kernelName:rn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{numSamples:r,seed:i,normalized:o}=s;sk(a,"multinomial");const l=o?a:fS({inputs:{logits:a},backend:n,attrs:{dim:-1}}),u=l.shape[0],c=l.shape[1],h=n.data.get(l.dataId).values,p=[u,r],d=ae(O(p),"int32");for(let e=0;e<u;++e){const t=e*c,n=new Float32Array(c-1);n[0]=h[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+h[t+e];const s=Ko.alea(i.toString()),a=e*r;for(let e=0;e<r;++e){const t=s();d[a+e]=n.length;for(let s=0;s<n.length;s++)if(t<n[s]){d[a+e]=s;break}}}return o||n.disposeIntermediateTensorInfo(l),n.makeTensorInfo(p,"int32",d)}};function yS(e,t,n){const s=js(-1,n);return dI([],t,s,e,n)}const bS={kernelName:ln,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;sk(s,"neg");const a=n.data.get(s.dataId).values,[r,i]=yS(a,s.shape,s.dtype);return n.makeTensorInfo(i,s.dtype,r)}},xS=eu,wS={kernelName:cn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s;sk(a,"NonMaxSuppression");const u=n.data.get(a.dataId).values,c=n.data.get(r.dataId).values,{selectedIndices:h}=xS(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},kS=tu,vS={kernelName:hn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s;sk(a,"NonMaxSuppressionPadded");const c=n.data.get(a.dataId).values,h=n.data.get(r.dataId).values,{selectedIndices:p,validOutputs:d}=kS(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},IS=nu,NS={kernelName:pn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s;sk(a,"NonMaxSuppressionWithScore");const c=n.data.get(a.dataId).values,h=n.data.get(r.dataId).values,p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=IS(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},SS=fk(((e,t)=>e!==t?1:0)),TS=_k(un,SS,null,"bool"),$S={kernelName:un,backendName:"cpu",kernelFunc:TS},CS={kernelName:fn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:a}=t,{depth:r,onValue:i,offValue:o}=s;sk(a,"oneHot");const l=O(a.shape),u=new Float32Array(l*r);u.fill(o);const c=n.data.get(a.dataId).values;for(let e=0;e<l;++e)c[e]>=0&&c[e]<r&&(u[e*r+c[e]]=i);return n.makeTensorInfo([...a.shape,r],"int32",u)}};function ES(e){const{inputs:t,backend:n}=e,{x:s}=t;if("string"===s.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===s.dtype){const e=Ak({inputs:{input:s},backend:n}),t=ES({inputs:{x:e},backend:n}),a=Bv({inputs:{input:s},backend:n}),r=ES({inputs:{x:a},backend:n}),i=$k({inputs:{real:t,imag:r},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(r),i}return ZI({backend:n,attrs:{shape:s.shape,value:0,dtype:s.dtype}})}const AS={kernelName:ms,backendName:"cpu",kernelFunc:ES},RS={kernelName:dn,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:a}=n;if("string"===a.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===a.dtype){const t=Ak({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s}),r=Bv({inputs:{input:a},backend:s}),i=ES({inputs:{x:r},backend:s}),o=$k({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(r),s.disposeIntermediateTensorInfo(i),o}return ZI({backend:s,attrs:{shape:a.shape,value:1,dtype:a.dtype}})}};function FS(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s;if(1===t.length)return OI({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const r=t[0].shape,i=t[0].dtype;t.forEach((e=>{F(r,e.shape,"All tensors passed to stack must have matching shapes"),R(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],l=Wv({inputs:t.map((e=>{const t=OI({inputs:{input:e},backend:n,attrs:{dim:a}});return o.push(t),t})),backend:n,attrs:{axis:a}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}const DS={kernelName:mn,backendName:"cpu",kernelFunc:FS},_S={kernelName:gn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:r,constantValue:i}=s;sk(a,"pad");const o=r.map(((e,t)=>e[0]+a.shape[t]+e[1])),l=r.map((e=>e[0])),u=n.data.get(a.dataId).values,c=O(a.shape),h=a.shape.length,p=ee(a.shape),d=O(o),f=o.length,m=ee(o),g=G(a.dtype,d);0!==i&&g.fill(i);for(let e=0;e<c;e++)g[oe(le(e,h,p).map(((e,t)=>e+l[t])),f,m)]=u[e];return{dataId:n.write(g,o,a.dtype),shape:o,dtype:a.dtype}}},OS=fk(((e,t)=>Math.pow(e,t))),MS=_k(yn,OS),LS={kernelName:yn,backendName:"cpu",kernelFunc:MS};function zS(e,t,n,s){const[a,r]=Fo(e,s),i=ba(t,"int32"),o=ae(O(a),i),l=O(r);for(let e=0;e<o.length;++e){const t=e*l;let s=1;for(let e=0;e<l;++e)s*=n[t+e];o[e]=s}return{outVals:o,outShape:a,outDtype:i}}const BS={kernelName:xn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s;sk(a,"prod");const o=a.shape.length,l=V(r,a.shape),u=Oo(l,o);let c=l,h=a;const p=[];null!=u&&(h=Qk({inputs:{x:a},backend:n,attrs:{perm:u}}),p.push(h),c=Lo(c.length,o));const d=n.data.get(h.dataId).values,{outVals:f,outShape:m,outDtype:g}=zS(h.shape,h.dtype,d,c);let y=m;return i&&(y=Do(m,l)),p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(y,g,f)}};function PS(e,t,n,s){if(e===t||e<t&&n<0||t<e&&n>1)return ae(0,s);const a=ae(Math.abs(Math.ceil((t-e)/n)),s);t<e&&1===n&&(n=-1),a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+n;return a}const WS={kernelName:wn,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:a,dtype:r,step:i}=n,o=PS(s,a,i,r);return t.makeTensorInfo([o.length],r,o)}},VS=ik(vn,(e=>1/e)),US={kernelName:vn,backendName:"cpu",kernelFunc:VS},GS={kernelName:$n,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:r,halfPixelCenters:i,size:o}=s;sk(a,"resizeBilinear");const l=ee(a.shape),[u,c]=o,[h,p,d,f]=a.shape,m=n.data.get(a.dataId).values,g=new Float32Array(O([h,u,c,f])),y=[r&&u>1?p-1:p,r&&c>1?d-1:d],b=[r&&u>1?u-1:u,r&&c>1?c-1:c];let x=0;const w=y[0]/b[0],k=y[1]/b[1];for(let e=0;e<h;e++)for(let t=0;t<u;t++){let n;n=i?w*(t+.5)-.5:w*t;const s=Math.max(0,Math.floor(n)),a=n-s,r=Math.min(p-1,Math.ceil(n)),o=e*l[0]+s*l[1],u=e*l[0]+r*l[1];for(let e=0;e<c;e++){let t;t=i?k*(e+.5)-.5:k*e;const n=Math.max(0,Math.floor(t)),s=t-n,r=Math.min(d-1,Math.ceil(t)),c=o+n*l[2],h=u+n*l[2],p=o+r*l[2],y=u+r*l[2];for(let e=0;e<f;e++){const t=m[c+e],n=m[h+e],r=t+(m[p+e]-t)*s,i=r+(n+(m[y+e]-n)*s-r)*a;g[x++]=i}}}return n.makeTensorInfo([h,u,c,f],"float32",g)}},HS={kernelName:Cn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:r}=t,{alignCorners:i}=s;sk([r,a],"resizeBilinearGrad");const o=ee(a.shape),[l,u,c,h]=a.shape,[,p,d]=r.shape,f=new Float32Array(l*u*c*h),m=[i&&p>1?u-1:u,i&&d>1?c-1:c],g=[i&&p>1?p-1:p,i&&d>1?d-1:d],y=m[0]/g[0],b=m[1]/g[1],x=n.data.get(r.dataId).values;let w=0;for(let e=0;e<l;e++){const t=e*o[0];for(let e=0;e<p;e++){const n=e*y,s=Math.floor(n),a=Math.min(Math.ceil(n),u-1),r=t+s*o[1],i=t+a*o[1],l=n-s,p=1-l;for(let e=0;e<d;e++){const t=e*b,n=Math.floor(t),s=Math.min(Math.ceil(t),c-1),a=t-n,u=1-a,d=r+n*o[2],m=r+s*o[2],g=i+n*o[2],y=i+s*o[2],k=p*u,v=p*a,I=l*u,N=l*a;for(let e=0;e<h;e++){const t=x[w++];f[d+e]+=t*k,f[m+e]+=t*v,f[g+e]+=t*I,f[y+e]+=t*N}}}}return n.makeTensorInfo([l,c,u,h],"float32",f)}},jS={kernelName:Sn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:r,halfPixelCenters:i,size:o}=s;sk(a,"resizeNearestNeighbor");const l=ee(a.shape),[u,c]=o,[h,p,d,f]=a.shape,m=n.data.get(a.dataId).values,g=new Float32Array(h*u*c*f),y=[r&&u>1?p-1:p,r&&c>1?d-1:d],b=[r&&u>1?u-1:u,r&&c>1?c-1:c],x=y[0]/b[0],w=y[1]/b[1];let k=0;for(let e=0;e<h;e++){const t=e*l[0];for(let e=0;e<u;e++){const n=i?x*(e+.5):x*e;let s=Math.min(p-1,r?Math.round(n):Math.floor(n));i&&(s=Math.max(0,s));const a=t+s*l[1];for(let e=0;e<c;e++){const t=i?w*(e+.5):w*e;let n=Math.min(d-1,r?Math.round(t):Math.floor(t));i&&(n=Math.max(0,n));const s=a+n*l[2];for(let e=0;e<f;e++){const t=m[s+e];g[k++]=t}}}}return n.makeTensorInfo([h,u,c,f],a.dtype,g)}},qS={kernelName:Tn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:r}=t,{alignCorners:i}=s;sk([r,a],"resizeNearestNeighborGrad");const o=ee(a.shape),l=ee(r.shape),[u,c,h,p]=a.shape,[,d,f]=r.shape,m=new Float32Array(u*c*h*p),g=n.data.get(r.dataId).values,y=[i&&d>1?c-1:c,i&&f>1?h-1:h],b=[i&&d>1?d-1:d,i&&f>1?f-1:f],x=y[0]/b[0],w=y[1]/b[1],k=1/x,v=1/w,I=2*Math.ceil(k)+2,N=2*Math.ceil(v)+2;for(let e=0;e<u;e++){const t=e*o[0];for(let e=0;e<c;e++){const n=t+e*o[1],s=Math.floor(e*k),a=Math.floor(s-I/2);for(let s=0;s<h;s++){const r=n+s*o[2],u=Math.floor(s*v),y=Math.floor(u-N/2);for(let n=0;n<p;n++){let o=0;for(let r=0;r<I;r++){const u=r+a;if(u<0||u>=d)continue;const p=t+u*l[1],m=u*x;if(e===Math.min(c-1,i?Math.round(m):Math.floor(m)))for(let e=0;e<N;e++){const t=e+y;if(t<0||t>=f)continue;const a=p+t*l[2],r=t*w;s===Math.min(h-1,i?Math.round(r):Math.floor(r))&&(o+=g[a+n])}}m[r+n]=o}}}}return n.makeTensorInfo(a.shape,a.dtype,m)}},KS={kernelName:An,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dims:r}=s;sk(a,"reverse");const i=a.shape.length,o=V(r,a.shape);if(0===i)return ck({inputs:{x:a},backend:n});const l=new ra(a.shape,a.dtype),u=n.bufferSync(a);for(let e=0;e<l.size;e++){const t=l.indexToLoc(e),n=t.slice();o.forEach((e=>n[e]=a.shape[e]-1-n[e])),l.set(u.get(...n),...t)}return n.makeTensorInfo(l.shape,l.dtype,l.values)}},XS={kernelName:bs,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:a,fillValue:r,center:i}=t,o=n,l=G(s.dtype,O(s.shape)),[u,c,h,p]=s.shape,[d,f]=tc(i,c,h),m=Math.sin(a),g=Math.cos(a),y=o.data.get(s.dataId).values;for(let e=0;e<u;e++){const t=e*h*c*p;for(let e=0;e<c;e++){const n=e*(h*p);for(let s=0;s<h;s++){const a=s*p;for(let i=0;i<p;i++){const o=[u,e,s,i],b=o[2],x=o[1];let w=(b-d)*g-(x-f)*m,k=(b-d)*m+(x-f)*g;w=Math.round(w+d),k=Math.round(k+f);let v=r;"number"!=typeof r&&(v=3===i?255:r[i]),w>=0&&w<h&&k>=0&&k<c&&(v=y[t+k*(h*p)+w*p+i]),l[t+n+a+i]=v}}}}return{dataId:o.write(l,s.shape,s.dtype),shape:s.shape,dtype:s.dtype}}},YS=ik(Rn,(e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1})),ZS={kernelName:Rn,backendName:"cpu",kernelFunc:YS},JS=vk((e=>1/Math.sqrt(e))),QS=ok(Fn,JS),eT={kernelName:Fn,backendName:"cpu",kernelFunc:QS};function tT(e,t,n,s,a,r,i,o,l,u){const c=[s/a,a],h=e.values,p=t.values;if(0===s)return Ir(n,t.dtype);const d=Ir(c,t.dtype);"string"==typeof l||"number"==typeof l?d.values.fill(l):"boolean"==typeof l&&d.values.fill(+l);for(let e=0;e<r;e++){const r=[];let l=0;for(let t=0;t<i;t++){const n=h[e*i+t];r.push(n),l+=n*o[t]}if(l<0||l>=s/a)throw new Error(`Invalid indices: ${r} does not index into ${n}`);for(let n=0;n<a;n++)u?d.values[l*a+n]+=p[e*a+n]:d.values[l*a+n]=0===t.rank?p[0]:p[e*a+n]}return d}const nT={kernelName:Dn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:a,updates:r}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=cc(0,a,i),p=tT(n.bufferSync(a),n.bufferSync(r),i,h,u,l,o,c,0,!0);return n.makeTensorInfo(i,p.dtype,p.values)}};function sT(e,t){let n=0,s=e.length,a=0;for(;n<s;)a=Math.floor((n+s)/2),e[a]<t?n=a+1:s=a;return s}function aT(e,t){let n=0,s=e.length,a=0;for(;n<s;)a=Math.floor((n+s)/2),e[a]<=t?n=a+1:s=a;return s}const rT={kernelName:_n,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:a,values:r}=t,{side:i}=s,o=function(e,t,n,s,a,r){const i=H("int32",n*a);for(let o=0;o<n;++o){const n=e.slice(o*s,(o+1)*s),l=o*a;for(let e=0;e<a;++e)i[l+e]="left"===r?sT(n,t[e+l]):aT(n,t[e+l])}return i}(n.data.get(a.dataId).values,n.data.get(r.dataId).values,a.shape[0],a.shape[1],r.shape[1],i);return n.makeTensorInfo(r.shape,"int32",o)}},iT={kernelName:On,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:a,e:r}=t;sk([s,a,r],"select");const i=s.shape.length,o=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,u=n.data.get(r.dataId).values,c=ba(a.dtype,r.dtype),h=ae(O(a.shape),c);let p=0;const d=0===i||i>1||1===a.shape.length?1:O(a.shape.slice(1));for(let e=0;e<o.length;e++)for(let t=0;t<d;t++)1===o[e]?h[p++]=l[e]:h[p++]=u[e];return n.makeTensorInfo(a.shape,c,h)}},oT=hc,lT=pc,uT=ik(Mn,(e=>e>=0?lT*e:oT*(Math.exp(e)-1))),cT={kernelName:Mn,backendName:"cpu",kernelFunc:uT},hT=ik(Pn,(e=>e<0?-1:e>0?1:0)),pT={kernelName:Pn,backendName:"cpu",kernelFunc:hT},dT=ik(zn,(e=>Math.sin(e))),fT={kernelName:zn,backendName:"cpu",kernelFunc:dT},mT=ik(Bn,(e=>Math.sinh(e))),gT={kernelName:Bn,backendName:"cpu",kernelFunc:mT},yT=Math.log(1.1920928955078125e-7)+2,bT=ik(Vn,(e=>{const t=e>-yT,n=e<yT,s=Math.exp(e);let a;return a=n?s:t?e:Math.log(1+s),a})),xT={kernelName:Vn,backendName:"cpu",kernelFunc:bT},wT={kernelName:Hn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:r,paddings:i}=s;sk([a],"spaceToBatchND");const o=O(r),l=[[0,0]];l.push(...i);for(let e=1+r.length;e<a.shape.length;++e)l.push([0,0]);const u=_S.kernelFunc({inputs:{x:a},backend:n,attrs:{paddings:l,constantValue:0}}),c=nc(u.shape,r,o,!1),h=sc(c.length,r.length,!1),p=ac(u.shape,r,o,!1),d=Pk({inputs:{x:u},backend:n,attrs:{shape:c}}),f=Qk({inputs:{x:d},backend:n,attrs:{perm:h}}),m=Pk({inputs:{x:f},backend:n,attrs:{shape:p}});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),m}};function kT(e,t,n,s,a,r,i){const o=t[0],l=r[0],u=new Array(l),c=new Array(o),h=t[1];if(0===l){if(0!==o)throw new Error(Oc(o));return[H(n,0),[0,h],H(a,0),u,c]}let p=!0,d=0;const f=new Array(l).fill(0);for(let t=0;t<o;++t){const n=e[t*h];if(n<0)throw new Error(Mc(t,n));if(n>=l)throw new Error(Lc(t,n,l));++f[n],p=p&&n>=d,d=n}let m=!0;for(let e=0;e<l;++e){const t=0===f[e];u[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&p){const t=e,n=s;for(let e=0;e<o;++e)c[e]=e;return[t,[o,h],n,u,c]}{const t=f[l-1],r=H(n,t*h),p=H(a,t),d=new Array(l).fill(0);for(let t=0;t<o;++t){const n=e[t*h],a=d[n],i=(0===n?0:f[n-1])+a;d[n]++;for(let n=0;n<h;++n)r[i*h+n]=e[t*h+n];p[i]=s[t],c[t]=i}for(let e=0;e<l;++e)if(0===d[e]){const t=0===e?0:f[e-1];r[t*h+0]=e;for(let e=1;e<h;++e)r[t*h+e]=0;p[t]=i}return[r,[t,h],p,u,c]}}const vT={kernelName:Kn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:a,denseShape:r,defaultValue:i}=t;if(1!==r.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${r.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${s.shape}`);if(1!==a.shape.length)throw new Error(`Values must be a vector, saw:\n        ${a.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.data.get(s.dataId).values,l=n.data.get(a.dataId).values,u=n.data.get(r.dataId).values,c=n.data.get(i.dataId).values[0],[h,p,d,f,m]=kT(o,s.shape,s.dtype,l,a.dtype,u,c);return[n.makeTensorInfo(p,s.dtype,h),n.makeTensorInfo([p[0]],a.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}};function IT(e,t,n,s,a){const r=O(s),i=t[0],o=a.length,l=[];let u=1,c=-1;for(let e=0;e<o;++e){const t=a[e];if(-1===t){if(-1!==c)throw new Error(zc(c,e));c=e,l.push(1)}else{if(t<0)throw new Error(Bc(e,t));u*=t,l.push(t)}}if(-1!==c){if(u<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const e=Math.trunc(r/u);if(u*e!==r)throw new Error(Wc(s,l));l[c]=e}if(O(l)!==r)throw new Error(Vc(s,l));const h=s.length,p=[];if(h>0){p[h-1]=1;for(let e=h-2;e>=0;--e)p[e]=p[e+1]*s[e+1]}const d=[];if(o>0){d[o-1]=1;for(let e=o-2;e>=0;--e)d[e]=d[e+1]*l[e+1]}const f=H(n,i*o);for(let t=0;t<i;++t){let n=0;for(let s=0;s<h;++s)n+=e[t*h+s]*p[s];for(let e=0;e<o;++e)f[t*o+e]=Math.trunc(n/d[e]),n%=d[e]}return[f,[i,o],l]}const NT={kernelName:Xn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:a,newShape:r}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${s.shape}`);if(1!==a.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${a.shape}`);if(1!==r.shape.length)throw new Error(`Target shape should be a vector but received shape ${r.shape}`);const i=Array.from(n.data.get(a.dataId).values),o=n.data.get(s.dataId).values,l=Array.from(n.data.get(r.dataId).values),[u,c,h]=IT(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],r.dtype,new Int32Array(h))]}};function ST(e,t,n,s,a,r=!1,i=0){const o=s.length,l=[t[0],e.length/t[0]],u=l[1],c=o>0?a[o-1]+1:0;if(c<0)throw new Error("segment ids must be >= 0");const h=t.slice();h[0]=c;const p=H(n,h.reduce(((e,t)=>e*t),1));if(0===o)return c>0&&p.fill(i),[p,h];if(c<=0)throw new Error("segment ids must be >= 0");let d=0,f=1,m=0,g=a[d];for(;;){let t=0;if(f<o){if(t=a[f],g===t){++f;continue}if(g>=t)throw new Error("segment ids are not increasing")}if(g<0||g>=c)throw new Error(Hc(g,c));g>m&&p.fill(i,m*u,g*u);for(let t=d;t<f;++t){const n=s[t];if(n<0||n>=l[0])throw new Error(jc(t,s[t],l[0]));for(let t=0;t<u;t++)p[g*u+t]+=e[n*u+t]}if(r)for(let e=0;e<u;e++)p[g*u+e]/=f-d;if(d=f,++f,m=g+1,g=t,f>o)break}return m<c&&p.fill(i,m*u,c*u),[p,h]}const TT={kernelName:Yn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:a,segmentIds:r}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${a.shape}`);if(1!==r.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${r.shape}`);if(a.shape[0]!==r.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(s.dataId).values,o=n.data.get(a.dataId).values,l=n.data.get(r.dataId).values,[u,c]=ST(i,s.shape,s.dtype,o,l,!0);return n.makeTensorInfo(c,s.dtype,u)}},$T={kernelName:Zn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:a,segmentIds:r}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${a.shape}`);if(1!==r.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${r.shape}`);if(a.shape[0]!==r.shape[0])throw new Error("segmentIds and indices should have same size.");const i=n.data.get(s.dataId).values,o=n.data.get(a.dataId).values,l=n.data.get(r.dataId).values,[u,c]=ST(i,s.shape,s.dtype,o,l);return n.makeTensorInfo(c,s.dtype,u)}},CT={kernelName:Jn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:a,sparseValues:r,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:p}=cc(0,a,o),d=!1,f=n.bufferSync(a);let m;switch(r.dtype){case"bool":m=tT(f,n.bufferSync(r),o,p,c,u,l,h,Boolean(n.data.get(i.dataId).values[0]),d);break;case"float32":case"int32":m=tT(f,n.bufferSync(r),o,p,c,u,l,h,n.data.get(i.dataId).values[0],d);break;case"string":m=tT(f,n.bufferSync(r),o,p,c,u,l,h,Ys(n.data.get(i.dataId).values[0]),d);break;default:throw new Error(`Unsupported type ${r.dtype}`)}return n.makeTensorInfo(o,m.dtype,m.values)}},ET={kernelName:jn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{numOrSizeSplits:r,axis:i}=s,o=V(i,a.shape)[0],l=_c(a,r,o),u=new Array(a.shape.length).fill(0),c=a.shape.slice();return l.map((e=>{const t=[...c];t[o]=e;const s=Sv({inputs:{x:a},backend:n,attrs:{begin:u,size:t}});return u[o]+=e,s}))}},AT=vk((e=>Math.sqrt(e))),RT=ik(Un,(e=>Math.sqrt(e))),FT={kernelName:Un,backendName:"cpu",kernelFunc:RT},DT={kernelName:es,backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,s=t;sk(n,"square");const a=s.data.get(n.dataId).values,r=new Float32Array(a.length);for(let e=0;e<a.length;++e){const t=a[e];r[e]=t*t}return{dataId:s.write(r,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},_T=fk(((e,t)=>{const n=e-t;return n*n})),OT=_k(Qn,_T),MT={kernelName:Qn,backendName:"cpu",kernelFunc:OT},LT=ik(gs,((e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha})),zT={kernelName:gs,backendName:"cpu",kernelFunc:LT};function BT(e,t,n,s){const a=Ir(e,t.dtype);for(let e=0;e<a.size;e++){const r=a.indexToLoc(e),i=new Array(r.length);for(let e=0;e<i.length;e++)i[e]=r[e]*n[e]+s[e];a.set(t.get(...i),...r)}return a}const PT={kernelName:ts,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:r,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=s;sk(a,"stridedSlice");const{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=ti(a.shape,r,i,o,l,u,c,h,p);let k;if(m)k=Pk({inputs:{x:a},backend:n,attrs:{shape:f}});else if(g||y){R(a.shape.length>=1,(()=>`Input must have rank at least 1, got: ${a.shape.length}`));const e=Vr(b,x,w),t=Sv({inputs:{x:a},backend:n,attrs:{begin:b,size:e}});k=Pk({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{const e=BT(d,n.bufferSync(a),w,b);k=n.makeTensorInfo(f,e.dtype,e.values)}return k}};class WT{constructor(e,t,n,s,a,r){this.separator=Xs(e),this.nGramWidths=t,this.leftPad=Xs(n),this.rightPad=Xs(s),this.padWidth=a,this.preserveShort=r}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,s,a,r){for(let i=0;i<a;++i){const o=this.getPadWidth(r),l=Math.max(0,o-i),u=Math.max(0,o-(a-(i+1))),c=r-(l+u),h=t+(l>0?0:i-o);let p=0;p+=l*this.leftPad.length;for(let t=0;t<c;++t)p+=e[h+t].length;p+=u*this.rightPad.length,p+=(l+u+c-1)*this.separator.length,n[s+i]=new Uint8Array(p);const d=n[s+i];let f=0;const m=e=>e.forEach((e=>d[f++]=e));for(let e=0;e<l;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[h+t]),m(this.separator);if(c>0){m(e[h+c-1]);for(let e=0;e<u;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<u-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,s=t.length;if(s>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let a=1;a<s;++a){let s=t[a]>=e;if(s=s&&t[a]<=n,!s)throw new Error(`Invalid split value ${t[a]}, must be in [${e}, ${n}]`);e=t[a]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const a=s-1,r=H("int32",s);if(0===n||0===s){const e=new Array(n);for(let e=0;e<=a;++e)r[e]=0;return[e,r]}r[0]=0;for(let e=1;e<=a;++e){const n=t[e]-t[e-1];let s=0;this.nGramWidths.forEach((e=>{s+=this.getNumNGrams(n,e)})),this.preserveShort&&n>0&&0===s&&(s=1),r[e]=r[e-1]+s}const i=new Array(r[a]);for(let n=0;n<a;++n){const s=t[n];let a=r[n];if(this.nGramWidths.forEach((r=>{const o=t[n+1]-t[n],l=this.getNumNGrams(o,r);this.createNGrams(e,s,i,a,l,r),a+=l})),this.preserveShort&&a===r[n]){const r=t[n+1]-t[n];if(0===r)continue;const o=r+2*this.padWidth,l=1;this.createNGrams(e,s,i,a,l,o)}}return[i,r]}}function VT(e,t,n,s,a,r,i,o){return new WT(n,s,a,r,i,o).compute(e,t)}const UT={kernelName:ns,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:a,nGramWidths:r,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,p=n.data.get(c.dataId).values,d=n.data.get(h.dataId).values,[f,m]=VT(p,d,a,r,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}};function GT(e,t,n,s){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)s.push(e.subarray(t,t+1));return}if(1===t.length){const a=t[0];let r=e.indexOf(a);for(;-1!==r;){const t=e.subarray(0,r);n&&0===t.length||s.push(t),r=(e=e.subarray(r+1)).indexOf(a)}return void(n&&0===e.length||s.push(e))}let a=0;for(let r=0;r<e.length+1;r++)if(r===e.length||-1!==t.indexOf(e[r])){const t=e.subarray(a,r);n&&0===t.length||s.push(t),a=r+1}}function HT(e,t,n){const s=e.length,a=[];let r=0,i=0;const o=new Array(s);for(let l=0;l<s;++l){const s=a.length;GT(e[l],t,n,a);const u=a.length-s;o[l]=u,r+=u,i=Math.max(i,u)}const l=H("int32",2*r),u=new Array(r),c=[s,i];let h=0;for(let e=0;e<s;++e)for(let t=0;t<o[e];++t)l[2*h]=e,l[2*h+1]=t,u[h]=a[h],++h;return[l,u,c]}const jT={kernelName:ss,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:a}=s,{input:r,delimiter:i}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(1!==r.shape.length)throw new Error(`Input must be a vector, got shape: ${r.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.data.get(r.dataId).values,l=n.data.get(i.dataId).values[0],[u,c,h]=HT(o,l,a),p=c.length;return[n.makeTensorInfo([p,2],"int32",u),n.makeTensorInfo([p],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}};function qT(e,t){const n=H("int32",e.length);for(let s=0;s<e.length;++s)n[s]=Hs(e[s]).modulo(t).getLowBitsUnsigned();return n}const KT={kernelName:as,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:a}=s,{input:r}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(a<=0)throw new Error("Number of buckets must be at least 1");const i=qT(n.data.get(r.dataId).values,a);return n.makeTensorInfo(r.shape,"int32",i)}},XT=ik(is,(e=>Math.tan(e))),YT={kernelName:is,backendName:"cpu",kernelFunc:XT},ZT=ik(os,(e=>Math.tanh(e)));function JT(e,t){const n=new Array(e.rank);for(let s=0;s<n.length;s++)n[s]=e.shape[s]*t[s];const s=Ir(n,e.dtype);for(let t=0;t<s.values.length;++t){const n=s.indexToLoc(t),a=new Array(e.rank);for(let t=0;t<a.length;t++)a[t]=n[t]%e.shape[t];const r=e.locToIndex(a);s.values[t]=e.values[r]}return s}const QT=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function e$(e,t,n=0,s=e.length-1){for(;s>n;){if(s-n>600){const a=s-n+1,r=t-n+1,i=Math.log(a),o=.5*Math.exp(2*i/3),l=.5*Math.sqrt(i*o*(a-o)/a)*Math.sign(r-a/2);e$(e,t,Math.max(n,Math.floor(t-r*o/a+l)),Math.min(s,Math.floor(t+(a-r)*o/a+l)))}const a=e[t];let r=n,i=s;for(A(e,n,t),QT(e[s],a)>0&&A(e,n,s);r<i;){for(A(e,r,i),r++,i--;QT(e[r],a)<0;)r+=1;for(;QT(e[i],a)>0;)i-=1}0===QT(e[n],a)?A(e,n,i):(i+=1,A(e,i,s)),i<=t&&(n=i+1),t<=i&&(s=i-1)}}function t$(e,t,n,s,a){const r=t[t.length-1],[i,o]=[e.length/r,r],l=G(n,i*s),u=G("int32",i*s);for(let t=0;t<i;t++){const n=t*o,r=e.subarray(n,n+o);let i=new Array(r.length);r.forEach(((e,t)=>i[t]={value:e,index:t})),s<i.length&&(e$(i,s),i=i.slice(0,s)),a&&i.sort(QT);const c=t*s,h=l.subarray(c,c+s),p=u.subarray(c,c+s);for(let e=0;e<s;e++)h[e]=i[e].value,p[e]=i[e].index}const c=t.slice();return c[c.length-1]=s,[Ir(c,n,l),Ir(c,"int32",u)]}const n$={kernelName:cs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{image:a,transforms:r}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=n,[c,h,p,d]=a.shape,[f,m]=null!=u?u:[h,p],g=[c,f,m,d],y=ee(a.shape),b=y[0],x=y[1],w=y[2],k=G(a.dtype,O(g));k.fill(l);const v=s.data.get(a.dataId).values,I=s.data.get(r.dataId).values;for(let e=0;e<c;++e){const t=1===r.shape[0]?I:I.subarray(8*e,8*e+8);for(let n=0;n<f;++n)for(let s=0;s<m;++s)for(let a=0;a<d;++a){let r;const u=t[6]*s+t[7]*n+1;if(0===u)continue;const c=(t[0]*s+t[1]*n+t[2])/u,d=(t[3]*s+t[4]*n+t[5])/u,f=s$(c,p,o),m=s$(d,h,o);switch(i){case"nearest":r=r$(v,h,p,b,x,w,e,m,f,a,l);break;case"bilinear":r=i$(v,h,p,b,x,w,e,m,f,a,l);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${i}`)}k[e*b+n*x+s*w+a]=r}return s.makeTensorInfo(g,a.dtype,k)}return{dataId:s.write(k,g,a.dtype),shape:a.shape,dtype:a.dtype}}};function s$(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return C(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return C(0,n,t-1)}(e,t);case"nearest":return function(e,t){return C(0,e,t-1)}(e,t);default:return function(e,t){return e}(e)}}function a$(e,t,n,s,a,r,i,o,l,u,c){return 0<=o&&o<t&&0<=l&&l<n?e[i*s+o*a+l*r+u]:c}function r$(e,t,n,s,a,r,i,o,l,u,c){return a$(e,t,n,s,a,r,i,Math.round(o),Math.round(l),u,c)}function i$(e,t,n,s,a,r,i,o,l,u,c){const h=Math.floor(o),p=Math.floor(l),d=h+1,f=p+1;return(d-o)*((f-l)*a$(e,t,n,s,a,r,i,h,p,u,c)+(l-p)*a$(e,t,n,s,a,r,i,h,f,u,c))+(o-h)*((f-l)*a$(e,t,n,s,a,r,i,d,p,u,c)+(l-p)*a$(e,t,n,s,a,r,i,d,f,u,c))}function o$(e,t,n,s){const a=V(t,n)[0],r=[1,n[0],1];for(let e=0;e<a;e++)r[0]*=n[e];r[1]=n[a];for(let e=a+1;e<n.length;e++)r[2]*=n[e];const i={},o=new Int32Array(n[a]),l=new ra(r,s,e),u=[],c=1===r[0]&&1===r[2];for(let t=0;t<n[a];t++){let n;if(c)n=e[t].toString();else{const e=[];for(let n=0;n<r[0];n++)for(let s=0;s<r[2];s++)e.push(l.get(n,t,s));n=e.join(",")}if(void 0!==i[n])o[t]=i[n];else{const e=Object.keys(i).length;i[n]=e,o[t]=e,u.push(t)}}const h=r.slice();h[1]=Object.keys(i).length;const p=new ra(h,s);u.forEach(((e,t)=>{for(let n=0;n<r[0];n++)for(let s=0;s<r[2];s++)p.set(l.get(n,e,s),n,t,s)}));const d=n.slice();return d[a]=h[1],{outputValues:p.values,outputShape:d,indices:o}}const l$={kernelName:fs,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,segmentIds:r}=t,{numSegments:i}=s;sk(a,"unsortedSegmentSum");const o=[],l=[],u=a.shape.length-r.shape.length;let c=r;for(let e=0;e<u;++e){const t=OI({inputs:{input:c},backend:n,attrs:{dim:e+1}});c=t,l.push(t)}for(let e=0;e<i;++e){const t=js(e,"int32"),s=n.makeTensorInfo([],"int32",t),r=vI({inputs:{a:s,b:c},backend:n}),i=Fk({inputs:{x:r},backend:n,attrs:{dtype:"float32"}}),u=mI({inputs:{a:i,b:a},backend:n}),h=yI({inputs:{x:u},backend:n,attrs:{axis:0,keepDims:!1}});o.push(h),l.push(s),l.push(r),l.push(i),l.push(u),l.push(h)}const h=FS({inputs:o,backend:n,attrs:{axis:0}});return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},u$=[Gk,jk,Kk,Yk,Bk,Zk,tv,nv,sv,av,iv,lv,cv,dv,mv,xv,wv,kv,vv,Uk,Iv,$v,Av,Rv,Dk,_v,Mv,Ck,Lv,Vv,Gv,Hv,jv,qv,Kv,Xv,Zv,Qv,eI,tI,nI,sI,aI,iI,oI,lI,uI,cI,hI,pI,xI,uk,wI,II,RI,_I,MI,BI,YI,JI,QI,nN,rN,iN,oN,uN,hN,fN,yN,hk,bN,Pv,wN,vN,NN,dk,$N,AN,FN,ON,LN,PN,VN,HN,jN,qN,YN,QN,eS,tS,nS,sS,aS,rS,iS,uS,cS,dS,gS,gI,bS,wS,vS,NS,$S,CS,RS,DS,_S,LS,yk,BS,WS,Rk,VI,US,xk,kk,Wk,GS,HS,jS,qS,KS,XS,ZS,eT,nT,rT,iT,cT,Sk,pT,fT,gT,Tv,mS,xT,wT,vT,NT,TT,$T,CT,ET,FT,DT,MT,zT,PT,UT,jT,KT,jI,bI,YT,{kernelName:os,backendName:"cpu",kernelFunc:ZT},{kernelName:ls,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reps:r}=s;sk(a,"tile");const i=JT(n.bufferSync(a),r);return n.makeTensorInfo(i.shape,i.dtype,i.values)}},{kernelName:us,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{k:r,sorted:i}=s;sk(a,"topk");const o=n.data.get(a.dataId).values,[l,u]=t$(o,a.shape,a.dtype,r,i);return[n.makeTensorInfo(l.shape,l.dtype,l.values),n.makeTensorInfo(u.shape,u.dtype,u.values)]}},n$,ev,{kernelName:ps,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:a}=n,{x:r}=t;sk(r,"unique");const i=s.data.get(r.dataId).values,{outputValues:o,outputShape:l,indices:u}=o$(i,a,r.shape,r.dtype);return[s.makeTensorInfo(l,r.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},{kernelName:ds,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:a}=t;let{axis:r}=s;r<0&&(r+=a.shape.length);const i=a.shape.length,o=a.shape[r],l=new Array(i-1);let u=0;for(let e=0;e<i;e++)e!==r&&(l[u++]=a.shape[e]);const c=new Array(i).fill(0),h=a.shape.slice();h[r]=1;const p=new Array(o);for(let e=0;e<p.length;e++){c[r]=e;const t=Sv({inputs:{x:a},backend:n,attrs:{begin:c,size:h}});p[e]=Pk({inputs:{x:t},backend:n,attrs:{shape:l}}),n.disposeIntermediateTensorInfo(t)}return p}},l$,AS];for(const e of u$)Es(e);const c$={},h$={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function p$(e,t){if(!(e in c$)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if("undefined"!=typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e):t;return n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete c$[e]}),!1),1===e?n.getContext("webgl",h$)||n.getContext("experimental-webgl",h$):n.getContext("webgl2",h$)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;c$[e]=n}const n=c$[e];return null==n||n.isContextLost()?(delete c$[e],p$(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),c$[e])}var d$,f$,m$;function g$(e,t){return[t,e]}function y$(e){const t=O(e);return z(Math.ceil(t/4))}function b$(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function x$(e,t){const n=e;let s,a,r,i,o,l,u,c,h,p;return 2===pe().getNumber("WEBGL_VERSION")?(s=n.R32F,a=n.R16F,r=n.RGBA16F,i=n.RGBA32F,o=n.RED,u=4,c=1,h=n.HALF_FLOAT,p=n.FLOAT,l=n.RGBA8):(s=e.RGBA,a=e.RGBA,r=e.RGBA,i=n.RGBA,o=e.RGBA,u=4,c=4,h=null!=t?t.HALF_FLOAT_OES:null,p=e.FLOAT,l=e.RGBA),{internalFormatFloat:s,internalFormatHalfFloat:a,internalFormatPackedHalfFloat:r,internalFormatPackedFloat:i,textureFormatFloat:o,downloadTextureFormat:l,downloadUnpackNumChannels:u,defaultNumChannels:c,textureTypeHalfFloat:h,textureTypeFloat:p}}function w$(e,t){const n=t();return pe().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}function k$(e){return!!(pe().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function v$(e,t){return R$(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(d$||(d$={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(f$||(f$={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(m$||(m$={}));const I$=/ERROR: [0-9]+:([0-9]+):/g;function N$(e,t){const n=I$.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const s=+n[1],a=e.split("\n"),r=a.length.toString().length+2,i=a.map(((e,t)=>B((t+1).toString(),r)+e));let o=0;for(let e=0;e<i.length;e++)o=Math.max(i[e].length,o);const l=i.slice(0,s-1),u=i.slice(s-1,s),c=i.slice(s);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${B(u[0],o)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(c.join("\n"))}function S$(e,t){if(w$(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function T$(e,t,n,s,a,r,i){const o=e.getAttribLocation(t,n);return-1!==o&&(w$(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,s))),w$(e,(()=>e.vertexAttribPointer(o,a,e.FLOAT,!1,r,i))),w$(e,(()=>e.enableVertexAttribArray(o))),!0)}function $$(e,t,n,s){w$(e,(()=>function(e,t,n){(function(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,s=t+e.TEXTURE0;if(s<e.TEXTURE0||s>n)throw new Error(`textureUnit must be in [gl.TEXTURE0, gl.TEXTURE${n}].`)})(e,n),w$(e,(()=>e.activeTexture(e.TEXTURE0+n))),w$(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,s))),w$(e,(()=>e.uniform1i(n,s)))}function C$(e,t,n){w$(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),w$(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function E$(e,t){w$(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),w$(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function A$(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function R$(e,t,n){const s=w$(e,(()=>t()));if(null==s)throw new Error(n);return s}function F$(e,t=2){return O(e.slice(0,e.length-t))}function D$(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function _$(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[F$(e),...D$(e)]),t}function O$(e){return e%2==0}function M$(e,t){if(M(e=e.slice(-2),t=t.slice(-2)))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],s=t.slice(-1)[0];if(n===s)return!0;if(O$(n)&&O$(s)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&O$(e[0])&&O$(t[0])}let L$,z$;function B$(e,t){return null!=e.getExtension(t)}function P$(e){try{if(null!=p$(e))return!0}catch(e){return console.log("Error when getting WebGL context: ",e),!1}return!1}function W$(e){const t=x$(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const s=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(s),a}function V$(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&R("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const U$=pe();function G$(){let e,t,n,s,a,r,i,o,l,u;return 2===pe().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",s="in",a="texture",r="outputColor",i="out vec4 outputColor;",o="\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",u="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",s="varying",a="texture2D",r="gl_FragColor",i="",o="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",u="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:s,texture2D:a,output:r,defineOutput:i,defineSpecialNaN:o,defineSpecialInf:l,defineRound:u}}function H$(e,t,n="index"){const s=ee(t);return s.map(((t,a)=>`int ${e[a]} = ${n} / ${t}; ${a===s.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * ${t}`:`index -= ${e[a]} * ${t}`};`)).join("")}function j$(e,t,n="index"){const s=ee(t);return s.map(((t,a)=>`int ${e[a]} = ${n} / outShapeStrides[${a}]; ${a===s.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * outShapeStrides[${a}]`:`index -= ${e[a]} * outShapeStrides[${a}]`};`)).join("")}function q$(e){const t=ee(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}U$.registerFlag("HAS_WEBGL",(()=>U$.getNumber("WEBGL_VERSION")>0)),U$.registerFlag("WEBGL_VERSION",(()=>P$(2)?2:P$(1)?1:0)),U$.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),U$.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===U$.get("WEBGL_VERSION"))),U$.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),U$.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),U$.registerFlag("WEBGL_PACK",(()=>U$.getBool("HAS_WEBGL"))),U$.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>U$.getBool("WEBGL_PACK"))),U$.registerFlag("WEBGL_PACK_CLIP",(()=>U$.getBool("WEBGL_PACK"))),U$.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>U$.getBool("WEBGL_PACK"))),U$.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>U$.getBool("WEBGL_PACK"))),U$.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>U$.getBool("WEBGL_PACK"))),U$.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>U$.getBool("WEBGL_PACK"))),U$.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>U$.getBool("WEBGL_PACK"))),U$.registerFlag("WEBGL_PACK_REDUCE",(()=>U$.getBool("WEBGL_PACK"))),U$.registerFlag("WEBGL_LAZILY_UNPACK",(()=>U$.getBool("WEBGL_PACK"))),U$.registerFlag("WEBGL_CONV_IM2COL",(()=>U$.getBool("WEBGL_PACK"))),U$.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==L$){const t=p$(e);L$=t.getParameter(t.MAX_TEXTURE_SIZE)}return L$}(U$.getNumber("WEBGL_VERSION")))),U$.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==z$){const t=p$(e);z$=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,z$)}(U$.getNumber("WEBGL_VERSION")))),U$.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=U$.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=p$(e);return t=B$(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:B$(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),U$.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>U$.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!Aa())),U$.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=p$(e);if(1===e){if(!B$(t,"OES_texture_float"))return!1}else if(!B$(t,"EXT_color_buffer_float"))return!1;return W$(t)}(U$.getNumber("WEBGL_VERSION")))),U$.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!U$.getBool("WEBGL_FORCE_F16_TEXTURES")&&U$.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),U$.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>function(e){if(0===e)return!1;const t=p$(e);if(1!==e){if(B$(t,"EXT_color_buffer_float"))return W$(t);const e="EXT_color_buffer_half_float";if(B$(t,e)){const n=t.getExtension(e);return function(e,t){const n=x$(e,t),s=e.createTexture();e.bindTexture(e.TEXTURE_2D,s),e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const a=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,a),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,s,0);const r=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(s),e.deleteFramebuffer(a),r}(t,n)}return!1}return!!B$(t,"OES_texture_float")&&!!B$(t,"WEBGL_color_buffer_float")&&W$(t)}(U$.getNumber("WEBGL_VERSION")))),U$.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=U$.getNumber("WEBGL_VERSION"))&&null!=p$(e).fenceSync;var e})),U$.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>U$.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),U$.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),U$.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>Aa()?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),U$.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),U$.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),U$.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),U$.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128));const K$="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:X$}=s;function Y$(e,t,n){const s=[];if(e.forEach((e=>{const t=O(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?s.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(s.push(`uniform sampler2D ${e.name};`),s.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=iC(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:s.push(`uniform int ${e.name}Shape;`);break;case 2:s.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:s.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:s.push(`uniform ivec4 ${e.name}Shape;`)}s.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:s.push("uniform int outShape;");break;case 2:s.push("uniform ivec2 outShape;"),s.push("uniform int outShapeStrides;");break;case 3:s.push("uniform ivec3 outShape;"),s.push("uniform ivec2 outShapeStrides;");break;case 4:s.push("uniform ivec4 outShape;"),s.push("uniform ivec3 outShapeStrides;")}s.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{s.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const a=s.join("\n"),r=e.map((e=>function(e,t,n=!1,s){let a="";a+=n?J$(e,s):Z$(e,s);const r=e.shapeInfo.logicalShape,i=t.logicalShape;return r.length<=i.length&&(a+=n?function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),a="get"+s+"AtOutCoords",r=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,o=X$(e.shapeInfo.logicalShape,t.logicalShape),l=rC(i),u=i-r;let c;const h=["x","y","z","w","u","v"];c=0===r?"":i<2&&o.length>=1?"coords = 0;":o.map((e=>`coords.${h[e+u]} = 0;`)).join("\n");let p="";p=i<2&&r>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${h[t+u]}`)).join(", ");let d="return outputValue;";const f=1===O(e.shapeInfo.logicalShape),m=1===O(t.logicalShape);if(1!==r||f||m){if(f&&!m)d=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(o.length){const e=r-2,t=r-1;o.indexOf(e)>-1&&o.indexOf(t)>-1?d="return vec4(outputValue.x);":o.indexOf(e)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":o.indexOf(t)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${a}() {\n      ${l} coords = getOutputCoords();\n      ${c}\n      vec4 outputValue = get${s}(${p});\n      ${d}\n    }\n  `}(e,t):function(e,t){const n=e.name,s=n.charAt(0).toUpperCase()+n.slice(1),a="get"+s+"AtOutCoords",r=t.texShape,i=e.shapeInfo.texShape,o=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&o===l&&null==e.shapeInfo.flatOffset&&M(i,r))return`\n      float ${a}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const u=rC(l),c=X$(e.shapeInfo.logicalShape,t.logicalShape),h=l-o;let p;const d=["x","y","z","w","u","v"];p=0===o?"":l<2&&c.length>=1?"coords = 0;":c.map((e=>`coords.${d[e+h]} = 0;`)).join("\n");let f="";return f=l<2&&o>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${d[t+h]}`)).join(", "),`\n    float ${a}() {\n      ${u} coords = getOutputCoords();\n      ${p}\n      return get${s}(${f});\n    }\n  `}(e,t)),a}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),i=t.texShape,o=G$(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(o);let u,c,h=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${Q$}\n    ${eC}\n    ${tC}\n  `}(o);return t.isPacked?(u=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];return 1===s[0]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${s[1]}.0);\n      }\n    `:1===s[1]?n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${s[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      return 2 * (resTexRC.x * ${s[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(M(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${s[0]}, ${s[1]}));\n      }\n    `;const a=Math.ceil(e[1]/2);return n?"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[2]/2),r=a*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const s=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[e.length-1]/2),r=a*Math.ceil(e[e.length-2]/2);let i=r,o="",l="b, r, c";for(let t=2;t<e.length-1;t++)i*=e[e.length-t-1],o=`\n      int b${t} = index / ${i};\n      index -= b${t} * ${i};\n    `+o,l=`b${t}, `+l;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${s[0]}, ${s[1]}));\n      int index = resTexRC.x * ${s[1]} + resTexRC.y;\n\n      ${o}\n\n      int b = index / ${r};\n      index -= b * ${r};\n\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec${e.length}(${l});\n    }\n  `}(e,t,n)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(o)):(u=function(e,t,n){switch(e.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(e,t,n){return 1===t[0]?n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `:1===t[1]?n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `:n?"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ":`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){return M(e,t)?n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `:1===e[1]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `:1===e[0]?n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `:n?"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ":`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${j$(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`;const s=H$(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n)return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${j$(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `;const s=H$(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${s}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=H$(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=H$(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,i,n.enableShapeUniforms),c=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(o)),n.packedInputs&&(h+=nC),[h,l,c,a,u,r,n.userCode].join("\n")}function Z$(e,t=!1){const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${s}() {return ${n};}`;const[a,r]=e.shapeInfo.texShape;if(1===a&&1===r)return`\n      float ${s}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=sC(n);if(t)return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[o,l]=e.shapeInfo.texShape;return`\n    float ${s}() {\n      vec2 uv = uvFromFlat(${o}, ${l}, ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${s}(int index) {\n        ${aC(e)}\n      }\n    `;const a=e.shapeInfo.texShape,r=a[0],i=a[1];if(1===i&&1===r)return`\n      float ${s}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=sC(n);return 1===i?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${o}) + 0.5) / ${r}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:1===r?t?`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${s}(int index) {\n        vec2 uv = vec2((float(index + ${o}) + 0.5) / ${i}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:t?`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${s}(int index) {\n      vec2 uv = uvFromFlat(${r}, ${i}, index + ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),r=e.shapeInfo.texShape;if(null!=r&&M(n,r)){if(t)return`\n      float ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `;const e=r[0];return`\n    float ${a}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${r[1]}.0, ${e}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `}const{newShape:i,keptDims:o}=U(n),l=i;if(l.length<n.length){const n=["row","col"];return`\n      ${Z$(oC(e,l),t)}\n      float ${a}(int row, int col) {\n        return ${a}(${lC(n,o)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${aC(e)}\n      }\n    `;const u=r[0],c=r[1],h=sC(s);return 1===c?t?`\n      float ${a}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${s}TexShape[0]));\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${a}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `:1===u?t?`\n      float ${a}(int row, int col) {\n        float index = dot(vec3(row, col, ${h}), vec3(${s}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${s}TexShape[1]), 0.5);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${a}(int row, int col) {\n      float index = dot(vec3(row, col, ${h}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);\n      return sampleTexture(${s}, uv);\n    }\n  `:t?`\n      float ${a}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${s}Shape[1] + col + ${h};\n        vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n  float ${a}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${h};\n    vec2 uv = uvFromFlat(${u}, ${c}, index);\n    return sampleTexture(${s}, uv);\n  }\n`}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),r=n[1]*n[2],i=n[2],{newShape:o,keptDims:l}=U(n),u=o;if(u.length<n.length){const n=["row","col","depth"];return`\n        ${Z$(oC(e,u),t)}\n        float ${a}(int row, int col, int depth) {\n          return ${a}(${lC(n,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${r}, ${i}, 1)));\n        ${aC(e)}\n      }\n    `;const c=e.shapeInfo.texShape,h=c[0],p=c[1],d=e.shapeInfo.flatOffset;if(p===r&&null==d)return t?`\n      float ${a}(int row, int col, int depth) {\n        int stride1 = ${s}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n        float ${a}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${p}.0, ${h}.0);\n          return sampleTexture(${s}, uv);\n        }\n      `;if(p===i&&null==d)return t?`\n      float ${a}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${s}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n    float ${a}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${p}.0, ${h}.0);\n      return sampleTexture(${s}, uv);\n    }\n  `;const f=sC(s);return t?`\n    float ${a}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${s}Shape[1] * ${s}Shape[2];\n      int stride1 = ${s}Shape[2];\n      int index = row * ${r} + col * ${i} + depth + ${f};\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index);\n      return sampleTexture(${s}, uv);\n    }\n    `:`\n      float ${a}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r} + col * ${i} + depth + ${f};\n        vec2 uv = uvFromFlat(${h}, ${p}, index);\n        return sampleTexture(${s}, uv);\n      }\n  `}(e,t);case 4:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),r=n[3],i=n[2]*r,o=n[1]*i,{newShape:l,keptDims:u}=U(n);if(l.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${Z$(oC(e,l),t)}\n      float ${a}(int row, int col, int depth, int depth2) {\n        return ${a}(${lC(n,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${a}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${o}, ${i}, ${r}, 1)));\n        ${aC(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1],f=`int stride2 = ${s}Shape[3];`,m=`int stride1 = ${s}Shape[2] * stride2;`,g=`int stride0 = ${s}Shape[1] * stride1;`;if(d===o&&null==c)return t?`\n      float ${a}(int row, int col, int depth, int depth2) {\n        ${f}\n        ${m}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${r}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;if(d===r&&null==c)return t?`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${s}Shape[1] * ${s}Shape[2], ${s}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${s}TexShape[1], ${s}TexShape[0]);\n        return sampleTexture(${s}, uv);\n      }\n    `:`\n      float ${a}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${s}, uv);\n      }\n    `;const y=sC(s);return t?`\n    float ${a}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${f}\n      ${m}\n      ${g}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${s}TexShape[0], ${s}TexShape[1], index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `:`\n    float ${a}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} +\n          depth * ${r} + depth2;\n      vec2 uv = uvFromFlat(${p}, ${d}, index + ${y});\n      return sampleTexture(${s}, uv);\n    }\n  `}(e,t);case 5:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=t[4],r=t[3]*a,i=t[2]*r,o=t[1]*i,{newShape:l,keptDims:u}=U(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${Z$(oC(e,l))}\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        return ${s}(${lC(t,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${o}, ${i}, ${r}, ${a})) +\n          depth3;\n        ${aC(e)}\n      }\n    `;const c=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,p=h[0],d=h[1];if(d===o&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${r}, ${a}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(d===a&&null==c)return`\n      float ${s}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${d}.0, ${p}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${o} + col * ${i} + depth * ${r} +\n          depth2 * ${a} + depth3 + ${sC(n)};\n      vec2 uv = uvFromFlat(${p}, ${d}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);case 6:return function(e){const t=e.shapeInfo.logicalShape,n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:a,keptDims:r}=U(t);if(a.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${Z$(oC(e,a))}\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${s}(${lC(t,r)});\n      }\n    `}const i=t[5],o=t[4]*i,l=t[3]*o,u=t[2]*l,c=t[1]*u;if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${c}, ${u}, ${l}, ${o})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${aC(e)}\n      }\n    `;const h=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,d=p[0],f=p[1];if(f===c&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${u}, ${l}, ${o}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===i&&null==h)return`\n      float ${s}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${d}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${s}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${c} + col * ${u} + depth * ${l} +\n          depth2 * ${o} + depth3 * ${i} + depth4 + ${sC(n)};\n      vec2 uv = uvFromFlat(${d}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function J$(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name;return`\n    vec4 ${"get"+t.charAt(0).toUpperCase()+t.slice(1)}() {\n      return ${G$().texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape,r=G$();if(t)return`\n    vec4 ${s}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${r.texture2D}(${n}, uv);\n    }\n  `;const i=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`\n    vec4 ${s}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${i[0]}, ${i[1]}, index);\n      return ${r.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),r=e.shapeInfo.texShape,i=r[0],o=r[1],l=G$();if(null!=r&&M(n,r))return t?`\n      vec4 ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${s}TexShape[1], ${s}TexShape[0]);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `:`\n      vec4 ${a}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}.0, ${i}.0);\n\n        return ${l.texture2D}(${s}, uv);\n      }\n    `;if(t)return`\n    vec4 ${a}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `;const u=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];return`\n    vec4 ${a}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${Math.ceil(n[1]/2)}, ${u[0]}, ${u[1]}, row, col);\n      return ${l.texture2D}(${s}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,s=e.name,a="get"+s.charAt(0).toUpperCase()+s.slice(1),r=e.shapeInfo.texShape,i=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];if(1===n[0]){const s=[1,2],r=["b","row","col"];return`\n        ${J$(oC(e,n.slice(1)),t)}\n        vec4 ${a}(int b, int row, int col) {\n          return ${a}(${lC(r,s)});\n        }\n      `}const o=G$();if(t)return`\n    vec4 ${a}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${s}TexShape[0]) / 2.0), ceil(float(${s}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${s}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${s}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `;const l=i[0],u=i[1],c=Math.ceil(n[2]/2);return`\n    vec4 ${a}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${l}, ${u}, ${c*Math.ceil(n[1]/2)}, ${c}, b, row, col);\n      return ${o.texture2D}(${s}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,s="get"+n.charAt(0).toUpperCase()+n.slice(1),a=G$();if(t)return`\n    vec4 ${s}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${a.texture2D}(${n}, uv);\n    }\n  `;const r=e.shapeInfo.logicalShape,i=r.length,o=e.shapeInfo.texShape,l=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],u=l[0],c=l[1],h=Math.ceil(r[i-1]/2);let p=h*Math.ceil(r[i-2]/2),d="int b, int row, int col",f=`b * ${p} + (row / 2) * ${h} + (col / 2)`;for(let e=2;e<i-1;e++)d=`int b${e}, `+d,p*=r[i-e-1],f=`b${e} * ${p} + `+f;return`\n    vec4 ${s}(${d}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const Q$="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",eC="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",tC="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",nC="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function sC(e){return`offset${e}`}function aC(e){const t=e.name,n=O(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function rC(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function iC(e,t,n){const{newShape:s,keptDims:a}=U(t),r=t.length,i=e&&3===r&&1===t[0],o=i?t.slice(1):s,l=!e&&r>1&&!M(t,n)&&s.length<r||i;return{useSqueezeShape:l,uniformShape:l?o:t,keptDims:a}}function oC(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function lC(e,t){return t.map((t=>e[t])).join(", ")}function uC(e,t,n){const s={},a={},r={},i=[];let o,l,u,c=null,h=null;h=e.getUniformLocation(n,"NAN",!1),1===pe().getNumber("WEBGL_VERSION")&&(c=e.getUniformLocation(n,"INFINITY",!1));const p=!1;for(let i=0;i<t.variableNames.length;i++){const o=t.variableNames[i];s[o]=e.getUniformLocation(n,o,p),s[`offset${o}`]=e.getUniformLocation(n,`offset${o}`,p),t.enableShapeUniforms&&(a[`${o}Shape`]=e.getUniformLocation(n,`${o}Shape`,p),r[`${o}TexShape`]=e.getUniformLocation(n,`${o}TexShape`,p))}return t.enableShapeUniforms&&(o=e.getUniformLocation(n,"outShape",p),u=e.getUniformLocation(n,"outShapeStrides",p),l=e.getUniformLocation(n,"outTexShape",p)),t.customUniforms&&t.customUniforms.forEach(((t,s)=>{i[s]=e.getUniformLocation(n,t.name,p)})),{uniformLocations:s,customUniformLocations:i,infLoc:c,nanLoc:h,inShapesLocations:a,inTexShapesLocations:r,outShapeLocation:o,outShapeStridesLocation:u,outTexShapeLocation:l}}function cC(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const s=e.logicalShape,a=t[n],r=a.shape;if(!M(s,r))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${s} and ${r} must match`);if(e.isUniform&&a.isUniform)return;const i=e.texShape,o=a.isUniform?null:a.texData.texShape;if(!M(i,o))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${o} must match`)}))}function hC(e){return pe().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class pC{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=d$.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=G$();this.outputShape=e,this.enableShapeUniforms=hC(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?j$(["r","c","d"],e):H$(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class dC{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=d$.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=G$();this.outputShape=e,this.enableShapeUniforms=hC(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?j$(["r","c","d"],e):H$(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class fC{constructor(e){this.variableNames=["A"],this.outTexUsage=f$.DOWNLOAD;const t=G$();this.outputShape=e,this.userCode=`\n      ${K$}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class mC{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=f$.DOWNLOAD;const t=G$();this.outputShape=e,this.userCode=`\n      ${K$}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class gC{constructor(e,t=!1){this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=G$();this.outputShape=e,this.enableShapeUniforms=hC(this.outputShape.length);let s="result";t&&(s="floor(result * 255. + 0.5)"),this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":q$(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${n.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${n.output} = vec4(${s}, 0., 0., 0.);\n      }\n    `}}class yC{constructor(e,t=!1){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=G$();this.outputShape=e,this.enableShapeUniforms=hC(this.outputShape.length);let s="",a="result";t&&(a="floor(result * 255. + 0.5)");for(let t=0;t<=1;t++)for(let a=0;a<=1;a++){const r=2*t+a;s+=`\n          localCoords = coords;\n          if(localCoords[2] + ${a} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${a};\n          if (localCoords[1] + ${t} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${t};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${r}] = values[0];\n            } else if (offset == 1) {\n              result[${r}] = values[1];\n            } else if (offset == 2) {\n              result[${r}] = values[2];\n            } else {\n              result[${r}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":q$(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${s}\n\n          ${n.output} = ${a};\n        }\n    `}}function bC(e,t,n,s,a,r){!function(e,t){const n=pe().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const i=function(e){return R$(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),o=e.TEXTURE_2D;return w$(e,(()=>e.bindTexture(o,i))),w$(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),w$(e,(()=>e.texParameteri(o,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),w$(e,(()=>e.texParameteri(o,e.TEXTURE_MIN_FILTER,e.NEAREST))),w$(e,(()=>e.texParameteri(o,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===pe().getNumber("WEBGL_VERSION")?w$(e,(()=>e.texImage2D(o,0,s,t,n,0,a,r,null))):w$(e,(()=>e.texStorage2D(o,1,s,t,n))),w$(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:i,texShape:[n,t]}}function xC(e){return e.internalFormatFloat}function wC(e){return e.internalFormatHalfFloat}function kC(e){return e.downloadTextureFormat}function vC(e){return e.internalFormatPackedFloat}function IC(e){return e.internalFormatPackedHalfFloat}class NC{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=pe().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){c$[e]=t}(t,e)):this.gl=p$(t);let n="WEBGL_color_buffer_float";const s="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===pe().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=v$(this.gl,e),B$(this.gl,t))this.textureHalfFloatExtension=v$(this.gl,t);else if(pe().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),B$(this.gl,s))this.colorBufferHalfFloatExtension=v$(this.gl,s);else if(pe().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",B$(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!B$(this.gl,s))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(s)}this.vertexBuffer=function(e){return function(e,t){const n=R$(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return w$(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),w$(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}(this.gl),this.indexBuffer=function(e){return function(e,t){const n=R$(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return w$(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),w$(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}(this.gl),this.framebuffer=function(e){return R$(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=x$(this.gl,this.textureHalfFloatExtension)}get debug(){return pe().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;w$(e,(()=>e.finish())),w$(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),w$(e,(()=>e.deleteFramebuffer(this.framebuffer))),w$(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),w$(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),w$(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=g$(t,n);return bC(e,a,r,xC(s),s.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=g$(t,n);return bC(e,a,r,wC(s),s.textureFormatFloat,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=g$(t,n);return bC(e,a,r,kC(s),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){w$(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===pe().getNumber("WEBGL_VERSION")?w$(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):w$(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===pe().getNumber("WEBGL_VERSION")?w$(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):w$(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),w$(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,s){this.throwIfDisposed(),function(e,t,n,s,a,r){let i,o,l;w$(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),a instanceof Uint8Array?(i=new Uint8Array(n*s*4),o=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(n*s*4),o=e.FLOAT,l=r.internalFormatPackedFloat),i.set(a),2===pe().getNumber("WEBGL_VERSION")?w$(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,s,e.RGBA,o,i))):w$(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,s,0,e.RGBA,o,i))),w$(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,s,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=b$(t,n);return bC(e,a,r,IC(s),e.RGBA,s.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,s){const[a,r]=b$(t,n);return bC(e,a,r,vC(s),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(E$(this.gl,this.framebuffer),this.outputTexture=null),w$(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,s){const[a,r]=g$(t,n),i=new Uint8Array(t*n*4);return w$(e,(()=>e.readPixels(0,0,a,r,s.downloadTextureFormat,e.UNSIGNED_BYTE,i))),new Float32Array(i.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,s,a,r){return function(e,t,n,s,a,r,i,o){const l=e,u=new Float32Array(function(e,t){const[n,s]=b$(e,t);return n*s*4}(r,i));return l.bindBuffer(l.PIXEL_PACK_BUFFER,t),l.getBufferSubData(l.PIXEL_PACK_BUFFER,0,u),l.bindBuffer(l.PIXEL_PACK_BUFFER,null),u}(this.gl,e,0,0,0,a,r,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const s=e,a=new Float32Array(n);return s.bindBuffer(s.PIXEL_PACK_BUFFER,t),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,a),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),a}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const s=function(e,t,n,s){const a=e.createBuffer();w$(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,a)));const r=16*t*n;return w$(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,r,e.STREAM_READ))),w$(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),w$(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),a}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),s}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if(pe().getBool("WEBGL_FENCE_API_ENABLED")){const s=e,a=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=s.clientWaitSync(a,0,0);return e===s.ALREADY_SIGNALED||e===s.CONDITION_SATISFIED},t=a}else pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const s=new Float32Array(t*n*4);return w$(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,s))),s}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=function(e){const t=G$();return function(e,t){const n=R$(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(w$(e,(()=>e.shaderSource(n,t))),w$(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}(t));const n=function(e){return R$(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return w$(t,(()=>t.attachShader(n,this.vertexShader))),w$(t,(()=>t.attachShader(n,e))),function(e,t){if(w$(e,(()=>e.linkProgram(t))),!pe().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,n),this.debug&&S$(t,n),this.vertexAttrsAreBound||(this.setProgram(n),this.vertexAttrsAreBound=function(e,t,n){return w$(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),T$(e,t,"clipSpacePos",n,3,20,0)&&T$(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),n}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&w$(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&S$(this.gl,this.program),w$(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t,n=!0){return this.throwIfDisposed(),n?function(e,t,n){return R$(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),w$(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),$$(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[s,a]=b$(t,n);this.setOutputMatrixTextureDriver(e,s,a)}setOutputMatrixWriteRegion(e,t,n,s){this.setOutputMatrixWriteRegionDriver(n,e,s,t)}setOutputPackedMatrixWriteRegion(e,t,n,s){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&S$(this.gl,this.program),A$(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),w$(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),w$(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=v$(this.gl,2===pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await P((()=>this.disposed||this.isQueryAvailable(e,pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),s=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),s&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length&&e[t]();++t);return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||P((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),C$(this.gl,e,this.framebuffer),this.debug&&A$(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(C$(this.gl,this.outputTexture,this.framebuffer),this.debug&&A$(this.gl)):E$(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const s=this.gl;C$(s,e,this.framebuffer),this.debug&&A$(s),this.outputTexture=e,w$(s,(()=>s.viewport(0,0,t,n))),w$(s,(()=>s.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,s){this.throwIfDisposed(),w$(this.gl,(()=>this.gl.scissor(e,t,n,s)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}const{addImpl:SC,bincountImpl:TC,bincountReduceImpl:$C,ceilImpl:CC,concatImpl:EC,equalImpl:AC,expImpl:RC,expm1Impl:FC,floorImpl:DC,gatherNdImpl:_C,gatherV2Impl:OC,greaterImpl:MC,greaterEqualImpl:LC,lessImpl:zC,lessEqualImpl:BC,linSpaceImpl:PC,logImpl:WC,maxImpl:VC,maximumImpl:UC,minimumImpl:GC,multiplyImpl:HC,negImpl:jC,notEqualImpl:qC,prodImpl:KC,rangeImpl:XC,rsqrtImpl:YC,scatterImpl:ZC,sigmoidImpl:JC,simpleAbsImpl:QC,sliceImpl:eE,sparseFillEmptyRowsImpl:tE,sparseReshapeImpl:nE,sparseSegmentReductionImpl:sE,sqrtImpl:aE,stridedSliceImpl:rE,stringNGramsImpl:iE,stringSplitImpl:oE,stringToHashBucketFastImpl:lE,subImpl:uE,tileImpl:cE,topKImpl:hE,transposeImpl:pE,uniqueImpl:dE}=I;function fE(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function mE(e,t){return 1===t?[e]:fE(e,t)}class gE{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=hC(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=mE("rc",this.rank),t=rC(this.rank),n=this.getOutOfBoundsCondition(e),s=this.getSetup(e),a=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${s}\n\n            setOutput(vec4(${a}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let s=0;s<=1;s++){let a=`${0===n?"r":"rp1"}, ${0===s?"c":"cp1"}`;for(let t=2;t<this.rank;t++)a=`${e[e.length-1-t]},`+a;t.push(a)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],s=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${s};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);return 1===this.rank?`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`:`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class yE{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=hC(this.outputShape.length);let n="";for(let e=0;e<4;e++){let t="thisRC = rc;";e%2==1&&(t+="thisRC.z += 1;"),e>1&&(t+="thisRC.y += 1;"),n+=`\n        ${t}\n        ${e>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${e}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${e>0?"}":""}\n      `}var s,a;this.userCode=`\n      ${s=t,a=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${a?function(e,t,n="index"){const s=function(e,t){const n=e.length,s=e.map((e=>`${t}[${e}]`)),a=new Array(n-1);a[n-2]=s[n-1];for(let e=n-3;e>=0;--e)a[e]=`(${a[e+1]} * ${s[e+1]})`;return a}(e.map(((e,t)=>t)),t);return s.map(((t,a)=>`int ${e[a]} = ${n} / ${s[a]}; ${a===s.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * ${s[a]}`:`index -= ${e[a]} * ${s[a]}`};`)).join("")}(["r","c","d"],"inputShape"):H$(["r","c","d"],s)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":q$(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class bE{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const s=wE(t,n),a=kE(e,s,n);a in this.freeTextures||(this.freeTextures[a]=[]),a in this.usedTextures||(this.usedTextures[a]=[]);const r=xE(e,s,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[a].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=r,this.log();const e=this.freeTextures[a].shift();return this.usedTextures[a].push(e),e}let i;return s===m$.PACKED_2X2_FLOAT32?i=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):s===m$.PACKED_2X2_FLOAT16?i=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):s===m$.UNPACKED_FLOAT32?i=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):s===m$.UNPACKED_FLOAT16?i=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):s===m$.PACKED_4X1_UNSIGNED_BYTE&&(i=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[a].push(i),this.numUsedTextures++,this._numBytesAllocated+=r,this.log(),i}releaseTexture(e,t,n,s){if(null==this.freeTextures)return;const a=wE(n,s),r=kE(t,a,s);r in this.freeTextures||(this.freeTextures[r]=[]);const i=xE(t,a,this.gpgpu.gl,this.gpgpu.textureConfig,s),o=pe().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==o&&this._numBytesAllocated>o?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=i):(this.freeTextures[r].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[r],u=l.indexOf(e);if(u<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(u,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function xE(e,t,n,s,a){const r=function(e,t){switch(e){case m$.PACKED_2X2_FLOAT32:return vC(t);case m$.PACKED_2X2_FLOAT16:return IC(t);case m$.UNPACKED_FLOAT32:return xC(t);case m$.UNPACKED_FLOAT16:return wC(t);case m$.PACKED_4X1_UNSIGNED_BYTE:return kC(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,s);let i;if(a){const[t,n]=b$(e[0],e[1]);i=t*n}else{const[t,n]=g$(e[0],e[1]);i=t*n}const o=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,r);return i*o}function wE(e,t){if(e===f$.UPLOAD)return m$.PACKED_2X2_FLOAT32;if(e===f$.RENDER||null==e)return function(e){return pe().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?m$.PACKED_2X2_FLOAT32:m$.UNPACKED_FLOAT32:e?m$.PACKED_2X2_FLOAT16:m$.UNPACKED_FLOAT16}(t);if(e===f$.DOWNLOAD||e===f$.PIXELS)return m$.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function kE(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class vE{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=hC(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const IE="return abs(x);",NE="return x;";class SE{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=hC(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class TE{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=hC(this.outputShape.length);const t=e.length,n=mE("rc",t),s=rC(t),a=function(e,t){if(1===e)return"rc";let n="";for(let s=0;s<e;s++)n+=t[s],s<e-1&&(n+=",");return n}(t,n),r=n.slice(-2),i=t<=1?"rc":`vec2(${r.join(",")})`;this.userCode=`\n      void main() {\n        ${s} rc = getOutputCoords();\n        vec4 packedInput = getA(${a});\n\n        setOutput(getChannel(packedInput, ${i}));\n      }\n    `}}const $E=Jc,CE={},EE=pe().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class AE extends S{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!pe().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof NC)t=e;else{const n=p$(pe().getNumber("WEBGL_VERSION"),e);t=new NC(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=p$(pe().getNumber("WEBGL_VERSION"));t=new NC(e),this.binaryCache=((n=pe().getNumber("WEBGL_VERSION"))in CE||(CE[n]={}),CE[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new bE(this.gpgpu),this.numMBBeforeWarning=null==pe().global.screen?1024:pe().global.screen.height*pe().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new N(this,ii())}nextDataId(){return AE.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,n){if((pe().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||pe().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const s={id:this.nextDataId()};return this.texData.set(s,{shape:t,dtype:n,values:e,usage:f$.UPLOAD,refCount:1}),s}refCount(e){return this.texData.has(e)?this.texData.get(e).refCount:0}incRef(e){this.texData.get(e).refCount++}decRef(e){this.texData.has(e)&&this.texData.get(e).refCount--}move(e,t,n,s,a){if(pe().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===s)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:s,values:t,usage:f$.UPLOAD,refCount:a})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:s,complexTensorInfos:a,slice:r,shape:i,isPacked:o}=t;if(null!=r){let t;t=o?new SE(i,NE):new vE(i,NE);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:s}],s),a=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===s)return n;const l=null!=this.activeTimers;let u,c;return l&&(u=Ks()),c="complex64"===s?xc(this.readSync(a.real.dataId),this.readSync(a.imag.dataId)):this.getValuesFromTexture(e),l&&(this.downloadWaitMs+=Ks()-u),this.convertAndCacheOnCPU(e,c)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:s,slice:a,dtype:r,complexTensorInfos:i,isPacked:o}=t;if(null!=a){let t;t=o?new SE(s,NE):new vE(s,NE);const n=this.runWebGLProgram(t,[{dataId:e,shape:s,dtype:r}],r),a=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if(pe().getBool("DEBUG")&&!pe().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===pe().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,u,c=null;if("complex64"!==r&&pe().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);c=this.gpgpu.createBufferFromTexture(t.texture.texture,...y$(s))}if(this.pendingRead.set(e,[]),"complex64"!==r&&await this.gpgpu.createAndWaitForFence(),"complex64"===r){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]);u=xc(e[0],e[1])}else if(null==c)u=this.getValuesFromTexture(e);else{const e=O(s);u=this.gpgpu.downloadFloat32MatrixFromBuffer(c,e)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=c){const e=this.gpgpu.gl;w$(e,(()=>e.deleteBuffer(c)))}const h=this.convertAndCacheOnCPU(e,u),p=this.pendingRead.get(e);return this.pendingRead.delete(e),p.forEach((e=>e(h))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&ii().removeDataId(e,this),this.pendingDeletes--),h}readToGPU(e,t={}){const n=this.texData.get(e),{values:s,shape:a,slice:r,dtype:i,isPacked:o,texture:l}=n;if("complex64"===i)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=r){let n;n=o?new SE(a,NE):new vE(a,NE);const s=this.runWebGLProgram(n,[{dataId:e,shape:a,dtype:i}],i),r=this.readToGPU(s,t);return this.disposeIntermediateTensorInfo(s),r}if(null==l)throw null!=s?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const u=this.decode(e,t.customTexShape),c=ii().makeTensorFromTensorInfo(u),h=this.texData.get(u.dataId);return Object.assign({tensorRef:c},h.texture)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>Ys(e)));return Ir(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return Ir(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!k$(n)){if(pe().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:s}=this.texData.get(e),a=O(t);if(pe().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),s=this.texData.get(n.dataId),r=this.gpgpu.downloadMatrixFromPackedTexture(s.texture.texture,...y$(t)).subarray(0,a);return this.disposeIntermediateTensorInfo(n),r}const r=pe().getBool("WEBGL_PACK")&&!0===s,i=r?_$(t):t,o=r?new mC(i):new fC(i),l=this.runWebGLProgram(o,[{shape:i,dtype:n,dataId:e}],"float32"),u=this.texData.get(l.dataId),c=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(u.texture.texture,u.texShape[0],u.texShape[1]).subarray(0,a);return this.disposeIntermediateTensorInfo(l),c}timerAvailable(){return pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let s=!1;null==this.programTimersStack?(this.programTimersStack=n,s=!0):this.activeTimers.push(n),this.activeTimers=n,e();const a=_(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),r=_(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,s&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if(pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(a);i.kernelMs=function(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}(e),i.getExtraProfileInfo=()=>e.map(((e,t)=>({name:r[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:Ks(),endMs:null}}endTimer(e){return pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=Ks(),e)}async getQueryTime(e){if(pe().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e,t=!1){if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:s,usage:a,isPacked:r,slice:i}=this.texData.get(e),o=i&&i.origDataId||e,l=this.dataRefCount.get(o);l>1?this.dataRefCount.set(o,l-1):(this.dataRefCount.delete(o),null!=t&&(this.numBytesInGPU-=this.computeBytes(s,n),this.textureManager.releaseTexture(t,s,a,r)));const u=this.texData.get(e);u.texture=null,u.texShape=null,u.isPacked=!1,u.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e,t=EE){return pe().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&O(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){vs("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return $E(e.shape,t)}packedUnaryOp(e,t,n){const s=new SE(e.shape,t),a=this.compileAndRun(s,[e],n);return ii().makeTensorFromTensorInfo(a)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=QC(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if(pe().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,IE,e.dtype);const t=new vE(e.shape,IE),n=this.compileAndRun(t,[e]);return ii().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let s;if("string"===t&&null!=n&&n.length>0&&X(n[0])){const a=n.map((e=>Xs(e)));s=this.write(a,e,t)}else s=this.write(n,e,t);return this.texData.get(s).usage=null,{dataId:s,shape:e,dtype:t}}makeOutput(e,t,n){return ii().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){const t=new TE(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new gE(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[F$(e.shape),...D$(e.shape)],s={dtype:e.dtype,shape:n,dataId:e.dataId},a=[F$(t),...D$(t)],r=new yE(a,n),i=[n],o=this.runWebGLProgram(r,[s],e.dtype,i,!0);return{dataId:o.dataId,shape:t,dtype:o.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:s,shape:a,dtype:r}=n;null!=t&&R(O(a)<=t[0]*t[1]*4,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."));const i=_$(a);let o;o=s?new dC(i):new pC(i);const l=[null!=t?t:y$(i)];return{dtype:r,shape:a,dataId:this.runWebGLProgram(o,[{shape:i,dtype:r,dataId:e}],r,l,!0,t).dataId}}runWebGLProgram(e,t,n,s,a=!1,r){const i=this.makeTensorInfo(e.outputShape,n),o=this.texData.get(i.dataId);if(e.packedOutput&&(o.isPacked=!0),e.outPackingScheme===d$.DENSE){const t=null!=r?r:y$(e.outputShape);o.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(o.usage=e.outTexUsage),0===O(i.shape))return o.values=G(i.dtype,0),i;const l=[],u=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&O(t.shape)<=pe().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!=!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),l.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!M$(n.shape,t.shape)){const e=t,s=t.shape;t.shape=n.shape,t=this.packedReshape(t,s),l.push(t),n=this.texData.get(t.dataId),e.shape=s}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(i.dataId);const c={shape:i.shape,texData:o,isUniform:!1},h=function(e,t,n){let s="";t.concat(n).forEach((t=>{const a=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const r=t.texData.texShape,{useSqueezeShape:i,uniformShape:o,keptDims:l}=iC(e.packedInputs,t.shape,r);let u="",c="",h="";if(1===o.length&&e.packedInputs){const e=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)];u=`${e[0]>1}_${e[1]>1}`}else if(2!==o.length||e.packedInputs){if(o.length>2&&!e.packedInputs){const e=ee(o);h=`${e[0]===r[1]}_${e[e.length-1]===r[1]}`}}else c=`${o[0]>1}_${o[1]>1}`;const p=t.shape.length,d=2===o.length&&M(t.shape,r),f=1===O(t.shape),m=Or(t.shape,n.shape),g=!e.packedInputs&&p===n.shape.length&&M(r,n.texData.texShape),y=e.packedInputs||o.length>2?"":`${r[0]>1}_${r[1]>1}`;s+=`${p}_${g}_${i?l:""}_${o.length}_${f}_${m}_${d}_${u}_${c}_${h}_${y}_${a}`}else{const e=t.isUniform?"uniform":t.texData.texShape;s+=`${t.shape}_${e}_${a}`}}));const a=e.userCode;let r=e.constructor.name;return r+="_"+s+"_"+a+`${pe().getNumber("WEBGL_VERSION")}`,r}(e,u,c),p=this.getAndSaveBinary(h,(()=>function(e,t,n,s){const a=n.map(((e,n)=>{const s={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(s.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:s}})),r=a.map((e=>e.shapeInfo)),i={logicalShape:s.shape,texShape:s.texData.texShape,isUniform:!1,isPacked:s.texData.isPacked,flatOffset:null},o=Y$(a,i,t),l=function(e,t){const n=R$(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(w$(e,(()=>e.shaderSource(n,t))),w$(e,(()=>e.compileShader(n))),pe().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw N$(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(e.gl,o),u=e.createProgram(l);return pe().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:o,webGLProgram:u,inShapeInfos:r,outShapeInfo:i,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:t,fragmentShader:l,source:o,webGLProgram:u,inShapeInfos:r,outShapeInfo:i},uC(e,t,u))}(this.gpgpu,e,u,c))),d=null!=this.activeTimers;let f;d&&(f=this.startTimer()),pe().get("ENGINE_COMPILE_ONLY")||function(e,t,n,s,a){t.program.enableShapeUniforms||(cC(t.inShapeInfos,n),cC([t.outShapeInfo],[s]));const r=s.texData.texture,i=s.texData.texShape;s.texData.isPacked?e.setOutputPackedMatrixTexture(r.texture,i[0],i[1]):e.setOutputMatrixTexture(r.texture,i[0],i[1]),e.setProgram(t.webGLProgram),1===pe().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,s)=>{const a=t.program.variableNames[s],r=t.uniformLocations[a],i=t.uniformLocations[`offset${a}`],o=t.inShapesLocations[`${a}Shape`],l=t.inTexShapesLocations[`${a}TexShape`];if(o){const{uniformShape:s}=iC(t.program.packedInputs,n.shape,n.texData.texShape);switch(s.length){case 1:e.gl.uniform1iv(o,new Int32Array(s));break;case 2:e.gl.uniform2iv(o,new Int32Array(s));break;case 3:e.gl.uniform3iv(o,new Int32Array(s));break;case 4:e.gl.uniform4iv(o,new Int32Array(s))}}if(l&&e.gl.uniform2i(l,n.texData.texShape[0],n.texData.texShape[1]),null!=r)if(n.isUniform)if(O(n.shape)<2)e.gl.uniform1f(r,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(r,t)}else null!=n.texData.slice&&null!=i&&e.gl.uniform1i(i,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture.texture,r,s)}));const o=t.outShapeLocation;if(o)switch(s.shape.length){case 1:e.gl.uniform1iv(o,new Int32Array(s.shape));break;case 2:e.gl.uniform2iv(o,new Int32Array(s.shape));break;case 3:e.gl.uniform3iv(o,new Int32Array(s.shape));break;case 4:e.gl.uniform4iv(o,new Int32Array(s.shape))}if(t.outShapeStridesLocation){const n=ee(s.shape);switch(s.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,s.texData.texShape[0],s.texData.texShape[1]),t.program.customUniforms&&a&&t.program.customUniforms.forEach(((n,s)=>{const r=t.customUniformLocations[s],i=a[s];if("float"===n.type)e.gl.uniform1fv(r,i);else if("vec2"===n.type)e.gl.uniform2fv(r,i);else if("vec3"===n.type)e.gl.uniform3fv(r,i);else if("vec4"===n.type)e.gl.uniform4fv(r,i);else if("int"===n.type)e.gl.uniform1iv(r,i);else if("ivec2"===n.type)e.gl.uniform2iv(r,i);else if("ivec3"===n.type)e.gl.uniform3iv(r,i);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(r,i)}})),e.executeProgram()}(this.gpgpu,p,u,c,s),l.forEach((e=>this.disposeIntermediateTensorInfo(e))),d&&(f=this.endTimer(f),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(f)}));const m=pe().get("WEBGL_FLUSH_THRESHOLD");if(m>0){const e=Ks();e-this.lastGlFlushTime>m&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!pe().getBool("WEBGL_LAZILY_UNPACK")&&o.isPacked&&!1===a){const e=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),e}return i}compileAndRun(e,t,n,s,a=!1){return n=n||t[0].dtype,this.runWebGLProgram(e,t,n,s,a)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){this.disposed||(pe().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=li((()=>{if(!pe().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=pe().getBool("DEBUG");pe().set("DEBUG",!1);const t=this.abs(di(1e-8)).dataSync()[0];if(pe().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:s,values:a,texture:r,usage:i,isPacked:o}=t;if(null!=r)return;const l=null!=this.activeTimers;let u;l&&(u=Ks());let c=t.texShape;if(null==c&&(c=function(e,t=!1){let n=pe().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map(((t,n)=>n>=e.length-2?E(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=U(e);e=t.newShape}let s=O(e);if(e.length<=1&&s<=n)return[1,s];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=F$(e);let n=2,a=2;return e.length&&([n,a]=D$(e)),s=t*(n/2)*(a/2),z(s).map((e=>2*e))}return z(s)}(n,o),t.texShape=c),null!=a){const e=_$(n);let r,i=c[1],h=c[0];const p=a instanceof Uint8Array||a instanceof Uint8ClampedArray;!o&&p||([i,h]=b$(c[0],c[1])),r=o?new yC(e,p):new gC(e,p);const d=p?[h,i]:c,f=this.makeTensorInfo(d,s),m=this.texData.get(f.dataId);m.usage=p?f$.PIXELS:f$.UPLOAD,m.texShape=d,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(f.dataId),i,h,a);const g=[[h,i]],y=!0,b=this.runWebGLProgram(r,[f],s,g,y),x=this.texData.get(b.dataId);t.texShape=x.texShape,t.isPacked=x.isPacked,t.usage=x.usage,pe().get("ENGINE_COMPILE_ONLY")?this.disposeData(b.dataId):(t.texture=x.texture,t.values=null,this.texData.delete(b.dataId)),this.disposeIntermediateTensorInfo(f),l&&(this.uploadWaitMs+=Ks()-u)}else{const e=this.acquireTexture(c,i,s,o);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:s}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,s)),n.values}acquireTexture(e,t,n,s){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,s)}computeBytes(e,t){return e[0]*e[1]*K(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const n=new Promise((e=>{try{this.checkCompletion_(t),e(!0)}catch(e){throw e}}));e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await Yu(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw N$(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const[,e]of Object.entries(this.binaryCache)){const{uniformLocations:t,customUniformLocations:n,infLoc:s,nanLoc:a,inShapesLocations:r,inTexShapesLocations:i,outShapeLocation:o,outShapeStridesLocation:l,outTexShapeLocation:u}=uC(this.gpgpu,e.program,e.webGLProgram);e.uniformLocations=t,e.customUniformLocations=n,e.infLoc=s,e.nanLoc=a,e.inShapesLocations=r,e.inTexShapesLocations=i,e.outShapeLocation=o,e.outShapeStridesLocation=l,e.outTexShapeLocation=u}}}AE.nextDataId=0,Ra()&&hi("webgl",(()=>new AE),2);class RE{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=Lr(t,n),this.enableShapeUniforms=hC(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class FE{constructor(e,t,n,s=!1){this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Lr(t,n);const a=this.outputShape.length;this.enableShapeUniforms=hC(a);let r="";if(s)if(0===a||1===O(this.outputShape))r="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(r=`\n          ${rC(a)} coords = getOutputCoords();\n        `,1===a)this.enableShapeUniforms?r+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":r+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=mE("coords",a);this.enableShapeUniforms?r+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= outShape[${a} - 2];\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= outShape[${a} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:r+=`\n            bool nextRowOutOfBounds =\n              (${e[a-2]} + 1) >= ${this.outputShape[a-2]};\n            bool nextColOutOfBounds =\n              (${e[a-1]} + 1) >= ${this.outputShape[a-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${r}\n\n        setOutput(result);\n      }\n    `}}function DE(e){const{inputs:t,backend:n}=e,{x:s}=t;return n.incRef(s.dataId),{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}const _E={kernelName:At,backendName:"webgl",kernelFunc:DE};function OE(e){const{inputs:t,backend:n}=e,{real:s,imag:a}=t,r=n.makeTensorInfo(s.shape,"complex64"),i=n.texData.get(r.dataId),o=DE({inputs:{x:s},backend:n}),l=DE({inputs:{x:a},backend:n});return i.complexTensorInfos={real:o,imag:l},r}const ME={kernelName:Ve,backendName:"webgl",kernelFunc:OE},LE="return (a < 0.) ? b * a : a;",zE="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",BE={kernelName:Mt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{alpha:r}=s,i=n.makeTensorInfo([],"float32",js(r,"float32")),o=pe().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new FE(zE,a.shape,i.shape):new RE(LE,a.shape,i.shape),l=n.runWebGLProgram(o,[a,i],"float32");return n.disposeIntermediateTensorInfo(i),l}},PE="return (a < 0.) ? b * a : a;",WE="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",VE={kernelName:bn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s,alpha:a}=t,r=pe().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new FE(WE,s.shape,a.shape):new RE(PE,s.shape,a.shape);return n.runWebGLProgram(r,[s,a],"float32")}};function UE({opSnippet:e,packedOpSnippet:t,cpuKernelImpl:n,dtype:s}){return({inputs:a,backend:r})=>{const{x:i}=a,o=r,l=s||i.dtype;if(o.shouldExecuteOnCPU([i])&&null!=n){const e=o.texData.get(i.dataId),t=n(e.values,l);return o.makeTensorInfo(i.shape,l,t)}let u;return u=pe().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=t?new SE(i.shape,t):new vE(i.shape,e),o.runWebGLProgram(u,[i],l)}}function GE({opSnippet:e,packedOpSnippet:t,checkOutOfBounds:n=!1,supportsComplex:s=!1,cpuKernelImpl:a,dtype:r}){return({inputs:i,backend:o})=>{const{a:l,b:u}=i,c=o;if(s&&"complex64"===l.dtype){const t=c.texData.get(l.dataId),n=c.texData.get(u.dataId),[s,a]=[[t.complexTensorInfos.real,n.complexTensorInfos.real],[t.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((t=>{const[n,s]=t,a={dataId:n.dataId,dtype:n.dtype,shape:l.shape},r={dataId:s.dataId,dtype:s.dtype,shape:u.shape},i=new RE(e,l.shape,u.shape);return c.runWebGLProgram(i,[a,r],ba(n.dtype,s.dtype))})),r=OE({inputs:{real:s,imag:a},backend:c});return c.disposeIntermediateTensorInfo(s),c.disposeIntermediateTensorInfo(a),r}const h=r||ba(l.dtype,u.dtype);if(("string"===l.dtype||"string"===u.dtype||c.shouldExecuteOnCPU([l,u]))&&null!=a){const e=c.texData.get(l.dataId).values,t=c.texData.get(u.dataId).values,n="string"===l.dtype?Yc(e):e,s="string"===l.dtype?Yc(t):t,[r,i]=a(l.shape,u.shape,n,s,h),o=c.makeTensorInfo(i,h);return c.texData.get(o.dataId).values=r,o}let p;return p=pe().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=t?new FE(t,l.shape,u.shape,n):new RE(e,l.shape,u.shape),c.runWebGLProgram(p,[l,u],h)}}function HE(e,t=!1){if("linear"===e)return"return x;";if("relu"===e)return t?"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n";if("elu"===e)return t?"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n":"return (x >= 0.0) ? x : (exp(x) - 1.0);";if("relu6"===e)return t?"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n":"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n";if("prelu"===e)return t?WE:PE;if("leakyrelu"===e)return t?zE:LE;if("sigmoid"===e)return"return 1.0 / (1.0 + exp(-1.0 * x));";throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class jE{constructor(e,t,n,s=!1,a=!1,r=!1,i=null,o=!1,l=!1){this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=hC(this.outputShape.length);const u=s?e[1]:e[2],c=Math.ceil(u/2),h=s?"i * 2, rc.y":"rc.y, i * 2",p=a?"rc.z, i * 2":"i * 2, rc.z",d=s?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=a?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";i&&(m=o?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${i}\n        }`:l?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${i}\n        }`:`vec4 activation(vec4 x) {\n          ${i}\n        }`,g="result = activation(result);");const y=r?"result += getBiasAtOutCoords();":"";r&&this.variableNames.push("bias"),o&&this.variableNames.push("preluActivationWeights"),l&&this.variableNames.push("leakyreluAlpha");let b="rc.x",x="rc.x";e[0]<t[0]?b=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(x=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${b};\n          int batchB = ${x};\n          vec4 a = getMatrixA(batchA, ${h});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${d[0]} * ${f[0]});\n          result += (${d[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}class qE{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Lr(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const KE="return a * b;";function XE(e){const{inputs:t,backend:n}=e,{a:s,b:a}=t,r=ba(s.dtype,a.dtype);if("complex64"===s.dtype){const e=n.texData.get(s.dataId),t=n.texData.get(a.dataId),r=new qE("return areal * breal - aimag * bimag;",s.shape,a.shape),i=new qE("return areal * bimag + aimag * breal;",s.shape,a.shape),o=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:s.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:s.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:a.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:a.shape}],l=n.runWebGLProgram(r,o,"float32"),u=n.runWebGLProgram(i,o,"float32"),c=OE({inputs:{real:l,imag:u},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(u),c}if(n.shouldExecuteOnCPU([s,a])){const e=n.texData.get(s.dataId),t=n.texData.get(a.dataId),[i,o]=HC(s.shape,a.shape,e.values,t.values,r),l=n.makeTensorInfo(o,r);return n.texData.get(l.dataId).values=i,l}let i;return i=pe().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new FE(KE,s.shape,a.shape):new RE(KE,s.shape,a.shape),n.runWebGLProgram(i,[s,a],r)}const YE={kernelName:on,backendName:"webgl",kernelFunc:XE};function ZE(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{shape:r}=s,i=n,o=O(a.shape),l=W(r,o),u=O(l);R(o===u,(()=>`The new shape (${l}) has ${u} elements and the old shape (${a.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`));const c=i.texData.get(a.dataId);return!c.isPacked||M$(a.shape,l)||null!==c.texture&&M$(c.shape,l)?(i.incRef(a.dataId),{dataId:a.dataId,shape:l,dtype:a.dtype}):function(e,t,n){const s=[F$(e.shape),...D$(e.shape)],a={dtype:e.dtype,shape:s,dataId:e.dataId},r=[F$(t),...D$(t)],i=new yE(r,s),o=[s],l=n.runWebGLProgram(i,[a],e.dtype,o,!0);return{dataId:l.dataId,shape:t,dtype:l.dtype}}(a,l,i)}const JE={kernelName:Nn,backendName:"webgl",kernelFunc:ZE};class QE{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:a,outSize:r}=e;this.outputShape=[s,r];const i=4*Math.floor(n/4),o=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${L(e)?e.toPrecision(2):e}, ones);`}let u="";a%n>0&&(u=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${u}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===o}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===o}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class eA{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:s,inSize:a,outSize:r}=e;this.outputShape=[s,r];let i="0.0",o="";"prod"===t?i="1.0":"min"===t?(i="1.0 / 1e-20",o="min"):"max"===t&&(i="-1.0 / 1e-20",o="max");let l=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?l="sumValue":"prod"===t?l="prodValue":"all"===t?l="allValue":"any"===t&&(l="anyValue");const u=4*Math.floor(n/4),c=n%4;let h=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${o}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${o}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,p="vec4";"all"===t?(i="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(i="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let d="";a%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${i};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${d}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${i});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${u}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${h}\n        }\n\n        int inIdx = inOffset + ${u};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${h}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${h}\n        }\n        setOutput(${l});\n      }\n    `}}function tA(e,t,n,s){const a=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],s=ec(n);t.push({inSize:n,windowSize:s,outSize:Math.ceil(n/s)})}return t}(e.shape);let r=e;for(let i=0;i<a.length;i++){const{inSize:o,windowSize:l,outSize:u}=a[i];let c,h;c="mean"===n?0===i?new QE({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},o):new QE({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u}):new eA({windowSize:l,inSize:o,batchSize:e.shape[0],outSize:u},n),h=r,r=s.runWebGLProgram(c,[r],t),h.dataId!==e.dataId&&s.disposeIntermediateTensorInfo(h)}return r}class nA{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];this.outputShape=n,this.rank=n.length;const s=rC(this.rank),a=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],s=new Array(t);for(let t=0;t<e.length;t++)s[e[t]]=n[t];return s.join()}(t);this.userCode=`\n    void main() {\n      ${s} resRC = getOutputCoords();\n      setOutput(getA(${a}));\n    }\n    `}}class sA{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const s=rC(this.rank),a=fE("rc",this.rank),r=new Array(this.rank);for(let e=0;e<t.length;e++)r[t[e]]=a[e];const i=`vec2(${r.slice(-2).join()})`,o=`++${a[this.rank-1]} < ${n[this.rank-1]}`,l=`getChannel(getA(${r.join()}), ${i})`;this.userCode=`\n    void main() {\n      ${s} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${l};\n      if(${o}) {\n        result[1] = ${l};\n      }\n      --${a[this.rank-1]};\n      if(++${a[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${l};\n        if(${o}) {\n          result[3] = ${l};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function aA(e,t,n){const s=pe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new sA(e.shape,t):new nA(e.shape,t);return n.runWebGLProgram(s,[e],e.dtype)}function rA(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s;return function(e,t,n,s){const a=t,r=e.shape.length,i=V(a,e.shape);let o=i;const l=Oo(o,r),u=null!=l;let c=e;u&&(c=aA(e,l,s),o=Lo(o.length,r)),_o("sum",o,r);const[h,p]=Fo(c.shape,o);let d=h;n&&(d=Do(h,i));const f=O(p),m=ZE({inputs:{x:c},attrs:{shape:[O(e.shape)/f,f]},backend:s}),g=tA(m,xa(e.dtype),"sum",s),y=ZE({inputs:{x:g},attrs:{shape:d},backend:s});return s.disposeIntermediateTensorInfo(m),s.disposeIntermediateTensorInfo(g),u&&s.disposeIntermediateTensorInfo(c),y}(a,r,i,n)}const iA={kernelName:Gn,backendName:"webgl",kernelFunc:rA};function oA(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{perm:r}=s,i=n,o=a.shape.length,l=new Array(o);for(let e=0;e<l.length;e++)l[e]=a.shape[r[e]];let u;if(i.shouldExecuteOnCPU([a])){const e=i.texData.get(a.dataId).values,t=pE(e,a.shape,a.dtype,r,l);u=i.makeTensorInfo(l,a.dtype),i.texData.get(u.dataId).values=t}else u=aA(a,r,i);return u}const lA={kernelName:hs,backendName:"webgl",kernelFunc:oA};function uA({a:e,b:t,transposeA:n,transposeB:s,backend:a,bias:r=null,preluActivationWeights:i=null,leakyreluAlpha:o=0,activation:l=null}){const u=e.shape.length,c=t.shape.length,h=n?e.shape[u-2]:e.shape[u-1],p=s?t.shape[c-1]:t.shape[c-2],d=n?e.shape[u-1]:e.shape[u-2],f=s?t.shape[c-2]:t.shape[c-1],m=e.shape.slice(0,-2),g=t.shape.slice(0,-2),y=O(m),b=O(g),x=Lr(e.shape.slice(0,-2),t.shape.slice(0,-2)).concat([d,f]);R(h===p,(()=>`Error in matMul: inner shapes (${h}) and (${p}) of Tensors with shapes ${e.shape} and ${t.shape} and transposeA=${n} and transposeB=${s} must match.`));const w=n?[y,h,d]:[y,d,h],k=s?[b,f,p]:[b,p,f],v=ZE({inputs:{x:e},backend:a,attrs:{shape:w}}),I=ZE({inputs:{x:t},backend:a,attrs:{shape:k}}),N=[v,I],S=Math.max(y,b),T=n?v.shape[1]:v.shape[2],$=null!=r,C=null!=i,E="leakyrelu"===l,A=null!=l?HE(l,!0):null;let F;if((1===d||1===f)&&T>1e3&&!1===($||C||E||null!=A)){let e=v,t=I;n&&(e=oA({inputs:{x:v},backend:a,attrs:{perm:[0,2,1]}}),N.push(e)),s&&(t=oA({inputs:{x:I},backend:a,attrs:{perm:[0,2,1]}}),N.push(t));const r=1===f;let i=e;1!==f&&(i=ZE({inputs:{x:e},backend:a,attrs:{shape:[S,T,1]}}),N.push(i));const o=1===f?2:1;let l=t;r&&(l=ZE({inputs:{x:t},backend:a,attrs:{shape:[S,1,T]}}),N.push(l));const u=XE({inputs:{a:i,b:l},backend:a});F=rA({inputs:{x:u},backend:a,attrs:{axis:o,keepDims:!0}}),N.push(u)}else{const l=ba(e.dtype,t.dtype),u=new jE(w,k,[S,d,f],n,s,$,A,C,E),c=[v,I];if(null!=r&&c.push(r),C&&c.push(i),E){const e=a.makeTensorInfo([],"float32",js(o,"float32"));c.push(e),N.push(e)}F=a.runWebGLProgram(u,c,l)}const D=ZE({inputs:{x:F},backend:a,attrs:{shape:x}});N.push(F);for(const e of N)a.disposeIntermediateTensorInfo(e);return D}const cA={kernelName:xs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a,b:r,bias:i,preluActivationWeights:o}=t,{transposeA:l,transposeB:u,activation:c,leakyreluAlpha:h}=s;return uA({a,b:r,transposeA:l,transposeB:u,backend:n,bias:i,preluActivationWeights:o,leakyreluAlpha:h,activation:c})}},hA="return abs(x);",pA={kernelName:ye,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])&&"complex64"!==s.dtype){const e=n.texData.get(s.dataId),t=QC(e.values);return n.makeTensorInfo(s.shape,s.dtype,t)}let a;return a=pe().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new SE(s.shape,hA):new vE(s.shape,hA),n.runWebGLProgram(a,[s],s.dtype)}},dA=UE({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),fA={kernelName:be,backendName:"webgl",kernelFunc:dA},mA=UE({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),gA={kernelName:xe,backendName:"webgl",kernelFunc:mA},yA="return a + b;",bA=GE({opSnippet:yA,packedOpSnippet:yA,supportsComplex:!0,cpuKernelImpl:SC}),xA={kernelName:we,backendName:"webgl",kernelFunc:bA};class wA{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${s};\n        setOutput(result);\n      }\n    `}}class kA{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const s=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${s};\n        setOutput(result);\n      }\n    `}}const vA={kernelName:ke,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,a=n;if(1===a.length)return DE({inputs:{x:a[0]},backend:s});if(a.length>pe().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(a.length/2),n=e({inputs:a.slice(0,t),backend:s}),r=e({inputs:a.slice(t),backend:s});return e({inputs:[n,r],backend:s})}const r=a.map((e=>e.dtype)).reduce(((e,t)=>ba(e,t))),i=a.map((e=>e.shape)),o=pe().getBool("WEBGL_PACK")?new kA(a[0].shape,i):new wA(a[0].shape,i);return s.runWebGLProgram(o,a,r)}},IA={kernelName:ve,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s,o=a.shape.length,l=V(r,a.shape);let u=l;const c=Oo(u,o);let h=a;null!=c&&(h=oA({inputs:{x:a},backend:n,attrs:{perm:c}}),u=Lo(u.length,o)),_o("all",u,o);const[p,d]=Fo(h.shape,u),f=ZE({inputs:{x:h},backend:n,attrs:{shape:[-1,O(d)]}}),m=tA(f,f.dtype,"all",n);let g;return g=ZE(i?{inputs:{x:m},backend:n,attrs:{shape:Do(p,l)}}:{inputs:{x:m},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},NA={kernelName:Ie,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s,o=a.shape.length,l=V(r,a.shape);let u=l;const c=Oo(u,o);let h=a;null!=c&&(h=oA({inputs:{x:a},backend:n,attrs:{perm:c}}),u=Lo(u.length,o)),_o("any",u,o);const[p,d]=Fo(h.shape,u),f=ZE({inputs:{x:h},backend:n,attrs:{shape:[-1,O(d)]}}),m=tA(f,f.dtype,"any",n);let g;return g=ZE(i?{inputs:{x:m},backend:n,attrs:{shape:Do(p,l)}}:{inputs:{x:m},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}};class SA{constructor(e,t,n){this.variableNames=["A"];const{windowSize:s,batchSize:a,outSize:r}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[a,r];const i="max"===t?">":"<",o=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${s};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${s}; i++) {\n          int inIdx = ${o};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${i} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class TA{constructor(e,t,n,s){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,R(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const a=e[e.length-1],r=Math.ceil(a/t);this.outputShape=e.slice(0,-1),r>1&&this.outputShape.push(r),s||this.variableNames.push("bestIndicesA");const i=this.outputShape,o=i.length,l=rC(o),u=mE("coords",o);let c,h;if(1===r){h=o+1;const e=rC(h);c=`\n        ${e} sourceLocR = ${e}(${u.join()}, 0);\n        ++${u[o-1]};\n        ${e} sourceLocG = ${e}(${u.join()}, 0);\n        ++${u[o-2]};\n        ${e} sourceLocA = ${e}(${u.join()}, 0);\n        --${u[o-1]};\n        ${e} sourceLocB = ${e}(${u.join()}, 0);\n        --${u[o-2]};`}else h=o,c=`\n        ${l} sourceLocR = coords;\n        ++${u[o-1]};\n        ${l} sourceLocG = coords;\n        ++${u[o-2]};\n        ${l} sourceLocA = coords;\n        --${u[o-1]};\n        ${l} sourceLocB = coords;\n        --${u[o-2]};`;const p=["x","y","z","w","u","v"].slice(0,h),d="."+p[h-1],f=p.map((e=>"int "+e)),m=mE("sourceLocR",h-1).concat("inIdx.r"),g=mE("sourceLocG",h-1).concat("inIdx.g"),y=mE("sourceLocB",h-1).concat("inIdx.b"),b=mE("sourceLocA",h-1).concat("inIdx.a"),x="max"===n?"greaterThan":"lessThan",w=s?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${m.join()}),\n                             getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,k=`vec4(\n            getAChannel(${m.join()}),\n            hasNextCol ? getAChannel(${g.join()}) : 0.,\n            hasNextRow ? getAChannel(${y.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,v=s?"":`\n      float getBestIndicesAChannel(${f.join()}) {\n        return getChannel(getBestIndicesA(${p.join()}),\n                                          vec2(${p.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${f.join()}) {\n        return getChannel(getA(${p.join()}),\n                               vec2(${p.slice(-2).join()}));\n      }\n      ${v}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${u[o-1]} < ${i[o-1]-1};\n        bool hasNextRow = ${u[o-2]} < ${i[o-2]-1};\n        ${c}\n        ivec4 srcIdx = ivec4(sourceLocR${d}, sourceLocG${d},\n          sourceLocB${d}, sourceLocA${d}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${x}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function $A(e,t,n,s=null){let a=t.shape[0],r=t.shape[1];null!=s&&(a=s.shape[0],r=s.shape[1]);const i=ec(r),o={windowSize:i,inSize:r,batchSize:a,outSize:Math.ceil(r/i)},l=new SA(o,n,null==s),u=[t];null!=s&&u.push(s);const c=e.runWebGLProgram(l,u,"int32");if(1===c.shape[1])return c;const h=$A(e,t,n,c);return e.disposeIntermediateTensorInfo(c),h}function CA(e,t,n,s=null){const a=null!=s?s.shape:t.shape,r=ec(a[a.length-1]),i=new TA(a,r,n,null==s),o=null==s?[t]:[t,s],l=e.runWebGLProgram(i,o,"int32");if(l.shape.length===t.shape.length){const s=CA(e,t,n,l);return e.disposeIntermediateTensorInfo(l),s}return l}function EA(e,t,n,s){const a=[n];if(_o("arg"+s.charAt(0).toUpperCase()+s.slice(1),a,t.shape.length),!pe().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],r=e.texData.get(t.dataId);let i=t;null!==r&&r.isPacked&&(i=e.unpackTensor(t),n.push(i));const[o,l]=Fo(i.shape,a),u=O(l),c=ZE({inputs:{x:i},backend:e,attrs:{shape:[-1,u]}});n.push(c);const h=$A(e,c,s);n.push(h);const p=ZE({inputs:{x:h},backend:e,attrs:{shape:o}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),p}return CA(e,t,s)}const AA={kernelName:Ne,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r}=s;let i=V(r,a.shape);const o=Oo(i,a.shape.length);let l=a;const u=[];null!=o&&(l=oA({inputs:{x:a},backend:n,attrs:{perm:o}}),u.push(l),i=Lo(i.length,l.shape.length)),_o("argMax",[i[0]],l.shape.length);const c=EA(n,l,i[0],"max");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},RA={kernelName:Se,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r}=s;let i=V(r,a.shape);const o=Oo(i,a.shape.length);let l=a;const u=[];null!=o&&(l=oA({inputs:{x:a},backend:n,attrs:{perm:o}}),u.push(l),i=Lo(i.length,l.shape.length)),_o("argMin",[i[0]],l.shape.length);const c=EA(n,l,i[0],"min");return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}},FA=UE({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),DA={kernelName:Te,backendName:"webgl",kernelFunc:FA},_A=UE({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),OA={kernelName:$e,backendName:"webgl",kernelFunc:_A},MA=UE({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),LA={kernelName:Ce,backendName:"webgl",kernelFunc:MA},zA=GE({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),BA={kernelName:Ae,backendName:"webgl",kernelFunc:zA},PA=UE({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),WA={kernelName:Ee,backendName:"webgl",kernelFunc:PA};class VA{constructor(e,t,n,s=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const r=e.filterWidth,i=e.strideHeight,o=e.strideWidth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterHeight,h=e.effectiveFilterWidth,p=e.padInfo.top,d=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${i}, ${o});\n        const ivec2 pads = ivec2(${p}, ${d});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${l}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${h};\n                wC += ${u}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${s?a?m:g:`wR * ${h} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let b=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(b="avgValue / count");const x=4*Math.floor(r/4),w=r%4,k=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${i}, ${o});\n      const ivec2 pads = ivec2(${p}, ${d});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${l}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${x}; wC += 4) {\n            int xC = xCCorner + wC * ${u};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              getValue(batch, xR, xC + 3 * ${u}, d)\n            );\n\n            ${k}\n          }\n\n          int xC = xCCorner + ${x};\n          if (${1===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${2===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${k}\n          } else if (${3===w}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${u}, d),\n              getValue(batch, xR, xC + 2 * ${u}, d),\n              initializationValue\n            );\n\n            ${k}\n          }\n        }\n        setOutput(${b});\n      }\n    `}}class UA{constructor(e,t,n,s=!1,a=!1){if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const r=e.filterWidth,i=e.strideDepth,o=e.strideHeight,l=e.strideWidth,u=e.dilationDepth,c=e.dilationHeight,h=e.dilationWidth,p=e.effectiveFilterDepth,d=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const b="avg"===t;let x="0.0";if(b||(x="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${i}, ${o}, ${l});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${u}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${d};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${h}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${s?a?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${d} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let w=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(w="avgValue / count");const k=4*Math.floor(r/4),v=r%4,I=`\n      if (${b}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${i}, ${o}, ${l});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${x};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${x});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${u}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${k}; wC += 4) {\n              int xC = xCCorner + wC * ${h};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${h}, ch)\n              );\n\n              ${I}\n            }\n\n            int xC = xCCorner + ${k};\n            if (${1===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${2===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${I}\n            } else if (${3===v}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${h}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${h}, ch),\n                initializationValue\n              );\n\n              ${I}\n            }\n          }\n          setOutput(${w});\n        }\n      }\n    `}}const GA={kernelName:Re,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;V$(a,"avgPool");const{filterSize:r,strides:i,pad:o,dimRoundingMode:l}=s;R(Ri(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=ki(a.shape,r,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&M(u.inShape,u.outShape))return DE({inputs:{x:a},backend:n});const c=new VA(u,"avg",!1);return n.runWebGLProgram(c,[a],"float32")}},HA={kernelName:De,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:r,strides:i,pad:o,dimRoundingMode:l,dataFormat:u}=s,c=vi(a.shape,r,i,[1,1,1],o,l,u),h=new UA(c,"avg",!1);return n.runWebGLProgram(h,[a],"float32")}};class jA{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,a=e.strideWidth,r=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterHeight,l=e.effectiveFilterWidth,u=o-1-e.padInfo.top,c=l-1-e.padInfo.left,h=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${u}, ${c});\n      const float avgMultiplier = float(${h});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${o};\n            wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${l};\n            wC+= ${i}) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class qA{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,a=e.strideDepth,r=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,h=e.effectiveFilterHeight,p=e.effectiveFilterWidth,d=c-1-e.padInfo.front,f=h-1-e.padInfo.top,m=p-1-e.padInfo.left,g=1/(t*n*s);this.userCode=`\n      const ivec3 pads = ivec3(${d}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${o}) {\n          float dyD = float(dyDCorner + wD) / ${a}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${h};\n              wR += ${l}) {\n            float dyR = float(dyRCorner + wR) / ${r}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${u}) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const KA={kernelName:_e,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,i=r,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=vi(i.shape,o,l,[1,1,1],u,c),p=new qA(h);return n.runWebGLProgram(p,[a],i.dtype)}},XA={kernelName:Fe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,i=r;V$([a,r],"avgPoolGrad");const{filterSize:o,strides:l,pad:u}=s,c=ki(i.shape,o,l,1,u),h=new jA(c);return n.runWebGLProgram(h,[a],i.dtype)}},YA={kernelName:Oe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{a,b:r}=t,{transposeA:i,transposeB:o}=s;return uA({a,b:r,transposeA:i,transposeB:o,backend:n})}};class ZA{constructor(e,t,n,s,a,r){this.outputShape=[],this.variableNames=["x","mean","variance"],Lr(e,t),Lr(e,n);let i="0.0";null!=s&&(Lr(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="1.0";null!=a&&(Lr(e,a),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${o};\n        float inv = scale * inversesqrt(variance + float(${r}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class JA{constructor(e,t,n,s,a,r){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Lr(e,t),Lr(e,n);let i="vec4(0.0)";null!=s&&(Lr(e,s),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let o="vec4(1.0)";null!=a&&(Lr(e,a),this.variableNames.push("scale"),o="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${o};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${r}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const QA={kernelName:St,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s,mean:a,variance:r,offset:i,scale:o}=e;R(a.shape.length===r.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),R(null==i||a.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),R(null==o||a.shape.length===o.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:l}=n;null==l&&(l=.001);const u=[s,a,r];let c=null;null!=i&&(c=i.shape,u.push(i));let h=null;null!=o&&(h=o.shape,u.push(o));const p=pe().getBool("WEBGL_PACK_NORMALIZATION")?new JA(s.shape,a.shape,r.shape,c,h,l):new ZA(s.shape,a.shape,r.shape,c,h,l);return t.runWebGLProgram(p,u,u[0].dtype)}};class eR{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=rC(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return tR.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let s;s=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${tR[t]} = start[${t}] + coords.${tR[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${s}\n        setOutput(getSource(${n}));\n      }\n    `}}const tR=["x","y","z","w","u","v"];class nR{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=rC(this.rank),n=mE("coords",this.rank),s=mE("sourceLoc",this.rank),a=1===this.rank?"sourceLoc":`vec2(${s.slice(-2).join()})`,r=`getChannel(getSource(${s.join()}), ${a})`,i=`\n      result.x = ${r};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${s[this.rank-1]};\n        result.y = ${r};\n        --${s[this.rank-1]};\n      }\n    `,o=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${s[this.rank-2]};\n        result.z = ${r};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${s[this.rank-1]};\n          result.w = ${r};\n        }\n      }\n    `,l=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${s[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${l}\n        vec4 result = vec4(0.);\n        ${i}\n        ${o}\n        setOutput(result);\n      }\n    `}}function sR(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:r,size:i}=s,[o,l]=ei(a,r,i);if(Pr(a,o,l),0===O(l))return n.makeTensorInfo(l,a.dtype,[]);if(n.shouldExecuteOnCPU([a])||"string"===a.dtype){const e=n.texData.get(a.dataId),t=eE(e.values,o,l,a.shape,a.dtype);return n.makeTensorInfo(l,a.dtype,t)}const{isPacked:u}=n.texData.get(a.dataId),c=Jr(a.shape,o,l);if(u||!c){const e=pe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new nR(l):new eR(l),t=[o];return n.runWebGLProgram(e,[a],a.dtype,t)}return n.uploadToGPU(a.dataId),function(e,t,n,s){const a=s.texData.get(e.dataId),r=s.makeTensorInfo(n,e.dtype),i=s.texData.get(r.dataId);Object.assign(i,a),i.refCount=1,i.shape=n,i.dtype=e.dtype;let o=Qr(t,ee(e.shape));a.slice&&(o+=a.slice.flatOffset),i.slice={flatOffset:o,origDataId:a.slice&&a.slice.origDataId||e.dataId};const l=s.dataRefCount.get(i.slice.origDataId)||1;return s.dataRefCount.set(i.slice.origDataId,l+1),r}(a,o,l,n)}const aR={kernelName:Ln,backendName:"webgl",kernelFunc:sR},rR={kernelName:Me,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:r,crops:i}=s;R(a.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const o=r.reduce(((e,t)=>e*t)),l=nc(a.shape,r,o),u=sc(l.length,r.length),c=ac(a.shape,r,o),h=rc(i,r.length),p=ic(c,i,r.length),d=[],f=ZE({inputs:{x:a},backend:n,attrs:{shape:l}}),m=oA({inputs:{x:f},backend:n,attrs:{perm:u}}),g=ZE({inputs:{x:m},backend:n,attrs:{shape:c}}),y=sR({inputs:{x:g},backend:n,attrs:{begin:h,size:p}});return d.push(f),d.push(m),d.push(g),d.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}},iR={kernelName:Le,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:i}=s,o=n.readSync(a.dataId),l=n.readSync(r.dataId),u=TC(o,l,r.dtype,r.shape,i);return n.makeTensorInfo([i],r.dtype,u)}},oR={kernelName:ze,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:s,s1:a}=t,r=n.readSync(s.dataId),i=n.readSync(a.dataId),o=Lr(Array.from(r),Array.from(i));return n.makeTensorInfo([o.length],"int32",Int32Array.from(o))}},lR=GE({opSnippet:"return float(a != b);",cpuKernelImpl:qC,dtype:"bool"}),uR={kernelName:un,backendName:"webgl",kernelFunc:lR};function cR(e){const{inputs:t,backend:n}=e,{input:s}=t;return DE({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.real},backend:n})}const hR={kernelName:kn,backendName:"webgl",kernelFunc:cR},pR={kernelName:Be,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s,attrs:a}=t,{x:r}=n,{dtype:i}=a;if("complex64"===i){if("complex64"===r.dtype)return DE({inputs:{x:r},backend:s});const t=Uo(r.shape),n=e({inputs:{x:r},backend:s,attrs:{dtype:"float32"}}),a=OE({inputs:{real:n,imag:t},backend:s});return t.dispose(),s.disposeIntermediateTensorInfo(n),a}if("complex64"===r.dtype){const t=cR({inputs:{input:r},backend:s}),n=e({inputs:{x:t},backend:s,attrs:{dtype:i}});return s.disposeIntermediateTensorInfo(t),n}if(!j(r.dtype,i)){const e=DE({inputs:{x:r},backend:s});return{dataId:e.dataId,shape:e.shape,dtype:i}}if("int32"===i)return function(e,t){const n=new vE(e.shape,"return float(int(x));"),s=t.runWebGLProgram(n,[e],"int32");return{dataId:s.dataId,shape:s.shape,dtype:s.dtype}}(r,s);if("bool"===i){const e=s.makeTensorInfo([],"bool",G("bool",1)),t=lR({inputs:{a:r,b:e},backend:s});return s.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${r.dtype} to ${i}`)}},dR="return ceil(x);",fR=UE({opSnippet:dR,packedOpSnippet:dR,cpuKernelImpl:CC}),mR={kernelName:Pe,backendName:"webgl",kernelFunc:fR};class gR{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class yR{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const bR={kernelName:We,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{clipValueMin:r,clipValueMax:i}=s;let o;o=pe().getBool("WEBGL_PACK_CLIP")?new yR(a.shape):new gR(a.shape);const l=[[r],[i]];return n.runWebGLProgram(o,[a],a.dtype,l)}};class xR{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function wR(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const kR={kernelName:Ue,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=n.texData.get(s.dataId),r=new xR(s.shape),i=[wR(s,a.complexTensorInfos.real),wR(s,a.complexTensorInfos.imag)];return n.runWebGLProgram(r,i,i[0].dtype)}};class vR{constructor(e){this.outputShape=[],this.outputShape=Ju(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let n=1;n<t.length;n++)t[n]=t[n-1]+e[n][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let e=1;e<t.length;e++){const s=t[e-1];n.push(`else if (yC < ${t[e]}) setOutput(getT${e}(yR, yC-${s}));`)}const s=t.length,a=t[t.length-1];n.push(`else setOutput(getT${s}(yR, yC-${a}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class IR{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Ju(e,t);const n=this.outputShape,s=n.length,a=rC(s),r=mE("coords",s),i=["x","y","z","w","u","v"].slice(0,s);this.variableNames=e.map(((e,t)=>`T${t}`));const o=new Array(e.length-1);o[0]=e[0][t];for(let n=1;n<o.length;n++)o[n]=o[n-1]+e[n][t];const l=i[t],u=i.slice(-2),c=i.join();let h=`if (${l} < ${o[0]}) {\n        return getChannel(\n            getT0(${c}), vec2(${u.join()}));\n        }`;for(let e=1;e<o.length;e++){const t=o[e-1];h+=`\n        if (${l} < ${o[e]}  && ${l} >= ${o[e-1]}) {\n          return getChannel(\n            getT${e}(${NR(i,l,t)}),\n            vec2(${NR(u,l,t)}));\n        }`}const p=o.length,d=o[o.length-1];h+=`\n        return getChannel(\n          getT${p}(${NR(i,l,d)}),\n          vec2(${NR(u,l,d)}));`,this.userCode=`\n      float getValue(${i.map((e=>"int "+e))}) {\n        ${h}\n      }\n\n      void main() {\n        ${a} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${r}), 0., 0., 0.);\n\n        ${r[s-1]} = ${r[s-1]} + 1;\n        if (${r[s-1]} < ${n[s-1]}) {\n          result.g = getValue(${r});\n        }\n\n        ${r[s-2]} = ${r[s-2]} + 1;\n        if (${r[s-2]} < ${n[s-2]}) {\n          result.a = getValue(${r});\n        }\n\n        ${r[s-1]} = ${r[s-1]} - 1;\n        if (${r[s-2]} < ${n[s-2]} &&\n            ${r[s-1]} < ${n[s-1]}) {\n          result.b = getValue(${r});\n        }\n        setOutput(result);\n      }\n    `}}function NR(e,t,n){const s=e.indexOf(t);return e.map(((e,t)=>t===s?`${e} - ${n}`:e)).join()}function SR(e){const{inputs:t,backend:n}=e,{input:s}=t;return DE({inputs:{x:n.texData.get(s.dataId).complexTensorInfos.imag},backend:n})}const TR={kernelName:Ft,backendName:"webgl",kernelFunc:SR};function $R(e,t,n){const s=e[0].dtype;if("complex64"===s){const s=e.map((e=>cR({inputs:{input:e},backend:n}))),a=e.map((e=>SR({inputs:{input:e},backend:n}))),r=$R(s,t,n),i=$R(a,t,n),o=OE({inputs:{real:r,imag:i},backend:n});return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),a.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(i),o}let a=n.shouldExecuteOnCPU(e);if("string"===s&&(a=!0),a){const a=e.map((e=>{const s=O(e.shape.slice(t));return ZE({inputs:{x:e},backend:n,attrs:{shape:[-1,s]}})})),r=a.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),i=Ju(a.map((e=>e.shape)),1),o=1===a[0].shape[0],l=EC(r,i,s,o),u=Ju(e.map((e=>e.shape)),t),c=n.makeTensorInfo(u,s,l);return a.forEach((e=>n.disposeIntermediateTensorInfo(e))),c}if(e.length>pe().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){const s=Math.floor(e.length/2),a=$R(e.slice(0,s),t,n),r=$R(e.slice(s),t,n),i=$R([a,r],t,n);return n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(r),i}if(pe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const a=new IR(e.map((e=>e.shape)),t);return n.runWebGLProgram(a,e,s)}const{tensors2D:r,outShape:i}=function(e,t,n){const s=Ju(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>ZE({inputs:{x:e},attrs:{shape:[-1,O(e.shape.slice(t))]},backend:n}))),outShape:s}}(e,t,n),o=new vR(r.map((e=>e.shape))),l=n.runWebGLProgram(o,r,s);r.forEach((e=>n.disposeIntermediateTensorInfo(e)));const u=ZE({inputs:{x:l},attrs:{shape:i},backend:n});return n.disposeIntermediateTensorInfo(l),u}function CR(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s,r=V(a,t[0].shape)[0],i=Ju(t.map((e=>e.shape)),r);if(0===O(i))return n.makeTensorInfo(i,t[0].dtype,[]);const o=t.filter((e=>O(e.shape)>0));return 1===o.length?DE({inputs:{x:o[0]},backend:n}):(Zu(o.map((e=>e.shape)),r),$R(o,r,n))}const ER={kernelName:Ge,backendName:"webgl",kernelFunc:CR};class AR{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.outputShape=e.outShape;const r=e.padInfo.top,i=e.padInfo.left,o=e.strideHeight,l=e.strideWidth,u=e.dilationHeight,c=e.dilationWidth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,b=m?3:1;let x="",w="";n&&(x=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,w="result = activation(result);");const k=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${x}\n\n      const ivec2 strides = ivec2(${o}, ${l});\n      const ivec2 pads = ivec2(${r}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${b}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${h}; wR++) {\n          int xR = xRCorner + wR * ${u};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${d}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${d}) *\n                    getW(wR, wC, ${d}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${d}, xR, xC) *\n                    getW(wR, wC, ${d}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${d}, d2),\n                getW(wR, wC, ${d} + 1, d2),\n                getW(wR, wC, ${d} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${d}),\n                  getX(batch, xR, xC, ${d} + 1),\n                  getX(batch, xR, xC, ${d} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${d}, xR, xC),\n                  getX(batch, ${d} + 1, xR, xC),\n                  getX(batch, ${d} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${k}\n        ${w}\n        setOutput(result);\n      }\n    `}}class RR{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,s=e.padInfo.left,a=e.strideDepth,r=e.strideHeight,i=e.strideWidth,o=e.dilationDepth,l=e.dilationHeight,u=e.dilationWidth,c=e.filterDepth,h=e.filterHeight,p=e.filterWidth,d=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${a}, ${r}, ${i});\n      const ivec3 pads = ivec3(${t}, ${n}, ${s});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${o};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h}; wR++) {\n            int xR = xRCorner + wR * ${l};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${u};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${d}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${d}) *\n                  getW(wF, wR, wC, ${d}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${d}),\n                  getX(batch, xF, xR, xC, ${d} + 1),\n                  getX(batch, xF, xR, xC, ${d} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${d}, d2),\n                  getW(wF, wR, wC, ${d} + 1, d2),\n                  getW(wF, wR, wC, ${d} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class FR{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=hC(this.outputShape.length);const{dataFormat:n}=t,s=G$(),a="channelsLast"===n,r=a?0:1,i=a?1:2,o=this.enableShapeUniforms?"if(blockIndex < outShape[1] && pos < outShape[0]) {":`if(blockIndex < ${e[1]} && pos < ${e[0]}) {`;let l="";for(let e=0;e<=1;e++)for(let t=0;t<=1;t++)l+=`\n          blockIndex = rc.y + ${t};\n          pos = rc.x + ${e};\n\n          ${o}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${r}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${i}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${a}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*e+t}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*e+t}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${l}\n\n        ${s.output} = result;\n      }\n    `}}function DR({x:e,filter:t,convInfo:n,backend:s,bias:a=null,preluActivationWeights:r=null,leakyreluAlpha:i=0,activation:o=null}){const l=e.shape,u=s.texData.get(e.dataId),c=n.inChannels,h=l[0]*l[1]*l[2],p=n.outChannels,d="channelsLast"===n.dataFormat;let f;const m=[];if(null!=r&&!d&&3===r.shape.length){const e=oA({inputs:{x:r},backend:s,attrs:{perm:[1,2,0]}});m.push(e),r=e}if((1!==h&&1!==p||!(c>1e3))&&u.isPacked&&d&&null!=u.texture&&l[2]%2!=0&&M(u.shape.slice(-3),l.slice(-3))){const c=l[0]*l[1]*(l[2]+1),h={dataId:e.dataId,shape:[1,c,n.inChannels],dtype:e.dtype},p=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,R(M$(u.shape,h.shape),(()=>`packed reshape ${u.shape} to ${h.shape} isn't free`));const d=ZE({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}});m.push(d);const g=uA({a:h,b:d,backend:s,transposeA:!1,transposeB:!1,bias:a,activation:o,preluActivationWeights:r,leakyreluAlpha:i}),y=s.texData.get(g.dataId);R(y.isPacked,(()=>"batchMatMul result is expected to be packed")),u.shape=p,y.shape=n.outShape,f=DE({inputs:{x:g},backend:s}),f.shape=n.outShape,m.push(g)}else{const l=d?e:oA({inputs:{x:e},backend:s,attrs:{perm:[0,2,3,1]}}),u=l.shape,c=ZE({inputs:{x:l},backend:s,attrs:{shape:[1,u[0]*u[1]*u[2],n.inChannels]}}),h=ZE({inputs:{x:t},backend:s,attrs:{shape:[1,n.inChannels,n.outChannels]}}),p=uA({a:c,b:h,transposeA:!1,transposeB:!1,backend:s,bias:a,activation:o,preluActivationWeights:r,leakyreluAlpha:i}),g=ZE({inputs:{x:p},backend:s,attrs:{shape:[n.batchSize,n.outHeight,n.outWidth,n.outChannels]}});f=d?g:oA({inputs:{x:g},backend:s,attrs:{perm:[0,3,1,2]}}),d||(m.push(l),m.push(g)),m.push(c),m.push(h),m.push(p)}for(const e of m)s.disposeIntermediateTensorInfo(e);return f}function _R({x:e,filter:t,convInfo:n,backend:s,bias:a=null,preluActivationWeights:r=null,leakyreluAlpha:i=0,activation:o=null}){const{filterWidth:l,filterHeight:u,inChannels:c,outWidth:h,outHeight:p,dataFormat:d}=n,f="channelsLast"===d,m=l*u*c,g=p*h,y=[m,g],b=[];if(null!=r&&!f&&3===r.shape.length){const e=oA({inputs:{x:r},backend:s,attrs:{perm:[1,2,0]}});b.push(e),r=e}const x=ZE({inputs:{x:e},backend:s,attrs:{shape:e.shape.slice(1)}}),w=ZE({inputs:{x:t},backend:s,attrs:{shape:[1,m,O(t.shape)/m]}});b.push(x),b.push(w);const k=new FR(y,n),v=[x.shape,[n.padInfo.top,n.padInfo.left],[n.strideHeight,n.strideWidth],[n.dilationHeight,n.dilationWidth],[n.inChannels],[n.filterWidth*n.inChannels],[n.outWidth]],I=s.runWebGLProgram(k,[x],"float32",v),N=ZE({inputs:{x:I},backend:s,attrs:{shape:[1,y[0],y[1]]}});b.push(I),b.push(N);const S=null!=a,T=null!=r,$="leakyrelu"===o,C=o?HE(o,!0):null,E=new jE(N.shape,w.shape,[1,g,n.outChannels],!0,!1,S,C,T,$),A=[N,w];if(a&&A.push(a),T&&A.push(r),$){const e=s.makeTensorInfo([],"float32",js(i,"float32"));A.push(e),b.push(e)}const R=s.runWebGLProgram(E,A,"float32"),F=ZE({inputs:{x:R},backend:s,attrs:{shape:[1,p,h,n.outChannels]}}),D=f?F:oA({inputs:{x:F},backend:s,attrs:{perm:[0,3,1,2]}});f||b.push(F),b.push(R);for(const e of b)s.disposeIntermediateTensorInfo(e);return D}const OR={kernelName:He,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:i,pad:o,dataFormat:l,dilations:u,dimRoundingMode:c}=s,h=Fi(l),p=Ii(a.shape,r.shape,i,u,o,c,!1,h);let d;if(1!==p.filterHeight||1!==p.filterWidth||1!==p.dilationHeight||1!==p.dilationWidth||1!==p.strideHeight||1!==p.strideWidth||"SAME"!==p.padInfo.type&&"VALID"!==p.padInfo.type)if(pe().getBool("WEBGL_CONV_IM2COL")&&1===a.shape[0])d=_R({x:a,filter:r,convInfo:p,backend:n});else{const e=new AR(p);d=n.runWebGLProgram(e,[a,r],"float32")}else d=DR({x:a,filter:r,convInfo:p,backend:n});const f=ZE({inputs:{x:d},backend:n,attrs:{shape:p.outShape}});return n.disposeIntermediateTensorInfo(d),f}};class MR{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,a=e.padInfo.left,r="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${r}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class LR{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,a=e.strideWidth,r="channelsLast"===e.dataFormat,i=t-1-e.padInfo.top,o=n-1-e.padInfo.left,l=r?1:2,u=r?2:3,c=r?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${l}], coords[${u}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${r}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class zR{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,a=e.padInfo.front,r=e.padInfo.top,i=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${a};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${r};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${s} - ${i};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class BR{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,s=e.filterWidth,a=e.strideDepth,r=e.strideHeight,i=e.strideWidth,o=t-1-e.padInfo.front,l=n-1-e.padInfo.top,u=s-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${o}, ${l}, ${u});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${a}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${r}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${s}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${i}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${s} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const PR={kernelName:je,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:i,pad:o,dataFormat:l,dimRoundingMode:u,filterShape:c}=s,h=Fi(l),p=Ii(a.shape,c,i,1,o,u,!1,h),d=new MR(p);return n.runWebGLProgram(d,[a,r],"float32")}},WR={kernelName:qe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{inputShape:i,strides:o,pad:l,dataFormat:u,dimRoundingMode:c}=s,h=Fi(u),p=Ii(i,r.shape,o,1,l,c,!1,h),d=new LR(p);return n.runWebGLProgram(d,[a,r],"float32")}},VR={kernelName:Ke,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:i,pad:o,dilations:l}=s,u=Ni(a.shape,r.shape,i,l,o),c=new RR(u);return n.runWebGLProgram(c,[a,r],"float32")}},UR={kernelName:Xe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:i,pad:o,filterShape:l}=s,u=Ni(a.shape,l,i,1,o),c=new zR(u);return n.runWebGLProgram(c,[a,r],"float32")}},GR={kernelName:Ye,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{pad:i,strides:o,inputShape:l}=s,u=Ni(l,r.shape,o,1,i),c=new BR(u);return n.runWebGLProgram(c,[a,r],"float32")}},HR=UE({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),jR={kernelName:Ze,backendName:"webgl",kernelFunc:HR},qR=UE({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),KR={kernelName:Je,backendName:"webgl",kernelFunc:qR};class XR{constructor(e,t,n,s,a){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[r,i,o,l]=e,[u]=t,[c,h]=n;this.outputShape=[u,c,h,l];const p="bilinear"===s?1:0,[d,f]=[i-1+".0",o-1+".0"],[m,g,y]=c>1?[""+(i-1)/(c-1),"(y2-y1) * height_ratio",`y1*${d} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${d}`],[b,x,w]=h>1?[""+(o-1)/(h-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${b});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${r}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${x};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${d} ) {\n          setOutput(float(${a}));\n          return;\n        }\n        float in_x = ${w};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${a}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const YR={kernelName:tt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{image:a,boxes:r,boxInd:i}=t,{cropSize:o,method:l,extrapolationValue:u}=s,c=new XR(a.shape,r.shape,o,l,u);return n.runWebGLProgram(c,[a,r,i],"float32")}};var ZR;!function(e){e.Prod="*",e.Sum="+"}(ZR||(ZR={}));class JR{constructor(e,t,n,s){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const a=this.outputShape.length,r=this.op===ZR.Prod?"1.0":"0.0",i=n?r:`getX(${QR(a,"coords",this.op)})`,o=this.outputShape[this.outputShape.length-1];let l="",u="";n?(l=s?"end != "+(o-1):"end != 0",u=s?"end + 1":"end - 1"):(l=s?`end + pow2 < ${o}`:"end >= pow2",u=s?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${rC(a)} coords = getOutputCoords();\n        int end = ${eF(a,"coords",this.op)};\n        float val = ${i};\n        int pow2 = int(pow(2.0, index));\n        if (${l}) {\n          int idx = ${u};\n          ${eF(a,"coords",this.op)} = idx;\n          val ${this.op}= getX(${QR(a,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function QR(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function eF(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function tF(e,t,n,s,a,r){const i=t.shape.length,o=Oo([s],i);let l=t;null!=o&&(l=oA({inputs:{x:t},backend:n,attrs:{perm:o}}));const u=Lo(1,i)[0];if(u!==i-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${s}`);const c=l.shape[u];let h=DE({inputs:{x:l},backend:n});for(let t=0;t<=Math.ceil(Math.log2(c))-1;t++){const s=new JR(e,l.shape,!1,r),a=[[t]],i=h;h=n.runWebGLProgram(s,[h],h.dtype,a),n.disposeIntermediateTensorInfo(i)}if(a){const t=new JR(e,l.shape,a,r),s=h;h=n.runWebGLProgram(t,[h],h.dtype),n.disposeIntermediateTensorInfo(s)}if(null!=o){const e=oA({inputs:{x:h},backend:n,attrs:{perm:Mo(o)}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(l),e}return h}const nF={kernelName:Qe,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,exclusive:i,reverse:o}=s;return tF(ZR.Prod,a,n,r,i,o)}},sF={kernelName:et,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,exclusive:i,reverse:o}=s;return tF(ZR.Sum,a,n,r,i,o)}},aF={kernelName:nt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,weights:r}=t,{size:i,binaryOutput:o}=s;if(1===a.shape.length){const e=n.readSync(a.dataId),t=n.readSync(r.dataId),s=TC(e,t,r.dtype,r.shape,i);return n.makeTensorInfo([i],r.dtype,s)}if(2===a.shape.length){const e=n.bufferSync(a),t=n.bufferSync(r),s=$C(e,t,i,o);return n.makeTensorInfo(s.shape,r.dtype,s.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}};class rF{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const iF={kernelName:st,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockSize:r,dataFormat:i}=s,o=a.shape[0],l=("NHWC"===i?a.shape[1]:a.shape[2])*r,u=("NHWC"===i?a.shape[2]:a.shape[3])*r,c=("NHWC"===i?a.shape[3]:a.shape[1])/(r*r),h=new rF("NHWC"===i?[o,l,u,c]:[o,c,l,u],r,i);return n.runWebGLProgram(h,[a],a.dtype)}};class oF{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=hC(this.outputShape.length);const r=e.filterHeight,i=e.filterWidth,o=e.outChannels/e.inChannels;let l="",u="";n&&(l=s?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,u="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${l}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${o};\n        int q = d2 - d1 * ${o};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${r}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${i}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${u}\n        setOutput(result);\n      }\n    `}}class lF{constructor(e,t=!1,n=null,s=!1,a=!1){this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=hC(this.outputShape.length);const r=e.outChannels/e.inChannels,i=e.padInfo.left,o=e.strideWidth,l=e.dilationWidth,u=e.filterHeight,c=e.filterWidth,h=c;let p="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let e=0;e<c;e++)p+=`\n          vec4 xTexelC${2*e};\n          int xTexelC${2*e}Ready;\n          vec4 xTexelC${2*e+1};\n          int xTexelC${2*e+1}Ready;\n          vec4 xC${e};`;p+=`\n    for (int r = 0; r < ${u}; r++) {\n      `;for(let e=0;e<c;e++)p+=`\n          xTexelC${2*e} = vec4(0.0);\n          xTexelC${2*e}Ready = 0;\n          xTexelC${2*e+1} = vec4(0.0);\n          xTexelC${2*e+1}Ready = 0;\n          xC${e} = vec4(0.0);`;p+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let e=0;e<(h+1)/2;e++){const t=2*e;if(p+=`\n          xC = xCCorner + ${t*l};\n          `,1===o){if(t<c&&(i%2==1?(p+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n              `,p+=1===l&&t>0?`\n                xC${t} = vec4(xTexelC${t-2}.zw, xTexelC${t}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${t} = vec4(previous.zw, xTexelC${t}.xy);\n                  } else {\n                    xC${t} = vec4(0.0, 0.0, xTexelC${t}.xy);\n                  }\n                  `):p+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xC${t} = xTexelC${t};\n                `,t+1<c)){const e=i%2==0?E(l):l;l%2==0&&i%2==1||l%2!=0&&i%2!=1?(p+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${e};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                    xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${t+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${t+1}Ready = 1;\n                  }\n                  `,l>1&&(p+=`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                      xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${t}Ready = 1;\n                    }\n                    `),p+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.xy);\n                  `):p+=1===e?`\n                    xC${t+1} = xTexelC${t};\n                    `:`\n                    xCOffset = xC + ${e};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                      xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${t+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${t+1}Ready = 1;\n                    }\n\n                    xC${t+1} = xTexelC${t+1};\n                    `}}else t<c&&(i%2==1?(p+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n              `,t+1<c&&(p+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${t+1} = vec4(xTexelC${t+1}.xy, final.xy);\n                `)):(p+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${t}Ready == 0) {\n                  xTexelC${t} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${t}.zw = vec2(0.0);\n                  }\n                  xTexelC${t}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${t+1}Ready == 0) {\n                  xTexelC${t+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${t+1}.zw = vec2(0.);\n                  }\n                  xTexelC${t+1}Ready = 1;\n                }\n\n                xC${t} = vec4(\n                  xTexelC${t}.xy, xTexelC${t+1}.xy);\n              `,t+1<c&&(p+=`\n                  xC${t+1} = vec4(xTexelC${t}.zw, xTexelC${t+1}.zw);\n                `)));t<c&&(p+=`\n            wTexel = getW(r, ${t}, d1, q);\n            dotProd += xC${t} * vec4(wTexel.xz, wTexel.xz);\n          `,t+1<c&&(p+=`\n              wTexel = getW(r, ${t+1}, d1, q);\n              dotProd += xC${t+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}p+="\n    }\n  ",p+="\n      }\n    ";let d="",f="";n&&(d=s?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,f="result = activation(result);");const m=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),s&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${d}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${r};\n        int q = d2 - d1 * ${r};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${p}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${m}\n        ${f}\n        setOutput(result);\n      }\n    `}}const uF={kernelName:at,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:i,pad:o,dilations:l,dimRoundingMode:u}=s;let c=l;null==c&&(c=[1,1]),R(Ri(i,c),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${c}'`));const h=Ii(a.shape,r.shape,i,c,o,u,!0);let p;p=pe().getBool("WEBGL_PACK_DEPTHWISECONV")&&h.strideWidth<=2&&h.outChannels/h.inChannels==1?new lF(h):new oF(h);const d=[[h.padInfo.top,h.padInfo.left],[h.strideHeight,h.strideWidth],[h.dilationHeight,h.dilationWidth],[h.inHeight,h.inWidth]];return n.runWebGLProgram(p,[a,r],"float32",d)}};class cF{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,s=e.padInfo.top,a=e.padInfo.left,r=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${r} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${s};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class hF{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,s=e.strideHeight,a=e.strideWidth,r=t-1-e.padInfo.top,i=n-1-e.padInfo.left,o=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${r}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${s}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${o}; dm++) {\n              int d2 = d1 * ${o} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const pF={kernelName:rt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,dy:r}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,filterShape:c}=s,h=Ii(a.shape,c,i,o,l,u,!0),p=new cF(h);return n.runWebGLProgram(p,[a,r],"float32")}},dF={kernelName:it,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,filter:r}=t,{strides:i,dilations:o,pad:l,dimRoundingMode:u,inputShape:c}=s,h=Ii(c,r.shape,i,o,l,u,!0),p=new hF(h);return n.runWebGLProgram(p,[a,r],"float32")}};class fF{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const mF={kernelName:ot,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t,a=[...s.shape,...s.shape],r=O(s.shape),i=ZE({inputs:{x:s},backend:n,attrs:{shape:[r]}}),o=new fF(r),l=n.runWebGLProgram(o,[i],i.dtype),u=ZE({inputs:{x:l},backend:n,attrs:{shape:a}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),u}};class gF{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:s,strideHeight:a,strideWidth:r,filterHeight:i,filterWidth:o,dilationHeight:l,dilationWidth:u}=e,{top:c,left:h}=s;this.userCode=`\n      const ivec2 strides = ivec2(${a}, ${r});\n      const ivec2 pads = ivec2(${c}, ${h});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${i}; h++) {\n          int hIn = hBeg + h * ${l};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${o}; w++) {\n              int wIn = wBeg + w * ${u};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const yF={kernelName:lt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r}=t,{strides:i,pad:o,dilations:l}=s,u=wi(a.shape,r.shape,i,o,"NHWC",l);let c;const h=new gF(u);c=n.runWebGLProgram(h,[a,r],"float32");const p=ZE({inputs:{x:c},backend:n,attrs:{shape:u.outShape}});return n.disposeIntermediateTensorInfo(c),p}},bF={kernelName:pt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{equation:a}=s,r=t,{allDims:i,summedDims:o,idDims:l}=Cc(a,r.length);Ac(i.length,l,r);const{path:u,steps:c}=Rc(o,l),h=c.length;let p=null,d=i.length;const f=[];for(let e=0;e<h;++e){for(const t of c[e]){const{permutationIndices:e,expandDims:s}=Ec(d,l[t]);let a;Fc(e)?a=r[t]:(a=oA({inputs:{x:r[t]},backend:n,attrs:{perm:e}}),f.push(a));const i=a.shape.slice();for(let e=0;e<s.length;++e)i.splice(s[e],0,1);M(a.shape,i)||(a=ZE({inputs:{x:a},backend:n,attrs:{shape:i}}),f.push(a)),null===p?p=a:(p=XE({inputs:{a,b:p},backend:n}),f.push(p))}e<h-1&&(u[e]>=0&&(p=rA({inputs:{x:p},backend:n,attrs:{axis:u[e]-(i.length-d),keepDims:!1}}),f.push(p)),d--)}for(const e of f)e!==p&&n.disposeIntermediateTensorInfo(e);return p}},xF=UE({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),wF={kernelName:dt,backendName:"webgl",kernelFunc:xF},kF={kernelName:ft,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:s,y:a}=t,r=pe().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new FE("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",s.shape,a.shape):new RE("return (b >= 1.0) ? a : a * (b + 1.0);",s.shape,a.shape);return n.runWebGLProgram(r,[s,a],s.dtype)}},vF=GE({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:AC}),IF={kernelName:gt,backendName:"webgl",kernelFunc:vF},NF=UE({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${dc};\n  float a1 = ${fc};\n  float a2 = ${mc};\n  float a3 = ${gc};\n  float a4 = ${yc};\n  float a5 = ${bc};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),SF={kernelName:mt,backendName:"webgl",kernelFunc:NF},TF=UE({opSnippet:"if (isnan(x)) return x;\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:RC,dtype:"float32"}),$F={kernelName:yt,backendName:"webgl",kernelFunc:TF};function CF(e){const{inputs:t,attrs:n,backend:s}=e,{dim:a}=n,{input:r}=t,i=r.shape.length,o=r.shape.slice();let l=a;return a<0&&(R(-(i+1)<=a,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+a+1),o.splice(l,0,1),ZE({inputs:{x:r},backend:s,attrs:{shape:o}})}const EF={kernelName:bt,backendName:"webgl",kernelFunc:CF},AF="return exp(x) - 1.0;",RF=UE({opSnippet:AF,packedOpSnippet:AF,cpuKernelImpl:FC}),FF={kernelName:xt,backendName:"webgl",kernelFunc:RF};class DF{constructor(e,t,n){this.variableNames=["real","imag"];const s=t[1];this.outputShape=t;const a=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,r=n?`${s}.0`:"1.0";let i;if("real"===e)i="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);i="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${a};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${i}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${s});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${s}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${r};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function _F(e,t,n){const s=n.texData.get(e.dataId),a=O(e.shape),r=e.shape[e.shape.length-1],i=ZE({inputs:{x:e},backend:n,attrs:{shape:[a/r,r]}}),o=i.shape,l=new DF("real",o,t),u=new DF("imag",o,t),c=[{dataId:s.complexTensorInfos.real.dataId,dtype:s.complexTensorInfos.real.dtype,shape:o},{dataId:s.complexTensorInfos.imag.dataId,dtype:s.complexTensorInfos.imag.dtype,shape:o}],h=n.runWebGLProgram(l,c,"float32"),p=n.runWebGLProgram(u,c,"float32"),d=OE({inputs:{real:h,imag:p},backend:n});n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p);const f=ZE({inputs:{x:d},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(d),f}const OF={kernelName:wt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return _F(s,!1,n)}};class MF{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function LF(e){const{backend:t,attrs:n}=e,{shape:s,value:a}=n;let{dtype:r}=n;if(r=r||Z(a),"string"===r){const e=H(r,O(s));return e.fill(a),t.makeTensorInfo(s,r,e)}{const e=new MF(s,a),n=[[a]];return t.runWebGLProgram(e,[],r,n)}}const zF={kernelName:kt,backendName:"webgl",kernelFunc:LF};class BF{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const PF={kernelName:vt,backendName:"webgl",kernelFunc:({inputs:e,backend:t})=>{const{image:n}=e,s=t,a=new BF(n.shape);return s.runWebGLProgram(a,[n],n.dtype)}},WF="return floor(x);",VF=UE({opSnippet:WF,packedOpSnippet:WF,cpuKernelImpl:DC}),UF={kernelName:It,backendName:"webgl",kernelFunc:VF},GF=GE({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),HF={kernelName:Nt,backendName:"webgl",kernelFunc:GF};class jF{constructor(e){this.variableNames=["A"];const t=G$(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${s}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class qF{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=G$(),[n,s]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${s}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const KF={kernelName:ys,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e;let{pixels:a}=t;const{numChannels:r}=s,i="undefined"!=typeof HTMLVideoElement&&a instanceof HTMLVideoElement,o="undefined"!=typeof HTMLImageElement&&a instanceof HTMLImageElement,[l,u]=i?[a.videoWidth,a.videoHeight]:[a.width,a.height],c=[u,l],h=[u,l,r];(o||i)&&(null==XF&&(XF=document.createElement("canvas").getContext("2d")),XF.canvas.width=l,XF.canvas.height=u,XF.drawImage(a,0,0,l,u),a=XF.canvas);const p=n.makeTensorInfo(c,"int32");n.texData.get(p.dataId).usage=f$.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(p.dataId),a);const d=pe().getBool("WEBGL_PACK")?new qF(h):new jF(h),f=n.runWebGLProgram(d,[p],"int32");return n.disposeData(p.dataId),f}};let XF;const YF={kernelName:ws,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dataFormat:c,dilations:h,dimRoundingMode:p,activation:d,leakyreluAlpha:f}=s,m=Fi(c),g=Ii(a.shape,r.shape,l,h,u,p,!1,m);let y;const b=[];if(1!==g.filterHeight||1!==g.filterWidth||1!==g.dilationHeight||1!==g.dilationWidth||1!==g.strideHeight||1!==g.strideWidth||"SAME"!==g.padInfo.type&&"VALID"!==g.padInfo.type)if(pe().getBool("WEBGL_CONV_IM2COL")&&1===a.shape[0])y=_R({x:a,filter:r,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});else{const e=null!=i,t=null!=o,s="leakyrelu"===d,l=d?HE(d,!1):null,u=new AR(g,e,l,t,s),h=[a,r],p=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=ZE({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return b.push(t),t}return e};if(e&&h.push(p(i,c)),t&&h.push(p(o,c)),s){const e=n.makeTensorInfo([],"float32",js(f,"float32"));h.push(e),b.push(e)}y=n.runWebGLProgram(u,h,"float32")}else y=DR({x:a,filter:r,convInfo:g,backend:n,bias:i,activation:d,preluActivationWeights:o,leakyreluAlpha:f});const x=ZE({inputs:{x:y},backend:n,attrs:{shape:g.outShape}});return b.push(y),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}},ZF={kernelName:ks,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,filter:r,bias:i,preluActivationWeights:o}=t,{strides:l,pad:u,dilations:c,dimRoundingMode:h,activation:p,leakyreluAlpha:d}=s,f=[];let m=c;null==m&&(m=[1,1]),R(Ri(l,m),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${m}'`));const g=Ii(a.shape,r.shape,l,m,u,h,!0),y=pe().getBool("WEBGL_PACK_DEPTHWISECONV")&&g.strideWidth<=2&&g.outChannels/g.inChannels==1,b=p?HE(p,y):null,x=[a,r],w=null!=i,k=null!=o,v="leakyrelu"===p;if(w&&x.push(i),k&&x.push(o),v){const e=n.makeTensorInfo([],"float32",js(d,"float32"));x.push(e),f.push(e)}let I;I=y?new lF(g,w,b,k,v):new oF(g,w,b,k,v);const N=[[g.padInfo.top,g.padInfo.left],[g.strideHeight,g.strideWidth],[g.dilationHeight,g.dilationWidth],[g.inHeight,g.inWidth]],S=n.runWebGLProgram(I,x,"float32",N);return f.forEach((e=>n.disposeIntermediateTensorInfo(e))),S}};class JF{constructor(e,t,n){this.sliceDim=e,this.strides=t,this.variableNames=["x","indices"],this.outputShape=n;const s=rC(t.length),a=rC(n.length),r=this.sliceDim>1?"strides[j]":"strides";this.userCode=`\n        ${s} strides = ${s}(${this.strides});\n         void main() {\n          ${a} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${r};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `}}const QF={kernelName:$t,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:s,indices:a}=t,r=a.shape,i=r[r.length-1],o=O(s.shape),[l,u,c,h]=oc(s,a),p=ZE({inputs:{x:a},backend:n,attrs:{shape:[u,i]}}),d=ZE({inputs:{x:s},backend:n,attrs:{shape:[O(s.shape)/c,c]}});if(n.shouldExecuteOnCPU([s,a])||"string"===s.dtype){const e=n.readSync(a.dataId),t=n.bufferSync(s),r=_C(e,t,s.dtype,u,i,c,h,s.shape,o);return n.makeTensorInfo(l,s.dtype,r.values)}const f=new JF(i,h,[u,c]),m=n.runWebGLProgram(f,[d,p],d.dtype),g=ZE({inputs:{x:m},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(m),g}};class eD{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=rC(this.rank),s=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[];for(let t=0;t<e.length;t++)2===t?s.push("index"):s.push(`${n[t]}`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${s}));\n      }\n    `}}function tD(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,indices:r}=t,{axis:i,batchDims:o}=s,l=V(i,a.shape)[0];if(pe().get("DEBUG")){const e=n.readSync(r.dataId),t=a.shape[l];for(let n=0;n<e.length;++n){const s=e[n];R(s<=t-1&&s>=0,(()=>`GatherV2: the index value ${s} is not in [0, ${t-1}]`))}}const u=Xc(a,r,l,o),c=O(r.shape),h=[],p=ZE({inputs:{x:a},backend:n,attrs:{shape:[u.batchSize,u.outerSize,u.dimSize,u.sliceSize]}}),d=ZE({inputs:{x:r},backend:n,attrs:{shape:[u.batchSize,c/u.batchSize]}});h.push(p),h.push(d);const f=[u.batchSize,u.outerSize,c/u.batchSize,u.sliceSize];if(n.shouldExecuteOnCPU([a,r])||"string"===a.dtype){const e=n.bufferSync(d),t=n.bufferSync(p),s=OC(t,e,f);return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(u.outputShape,s.dtype,s.values)}const m=new eD(p.shape,f),g=n.runWebGLProgram(m,[p,d],p.dtype);h.push(g);const y=ZE({inputs:{x:g},backend:n,attrs:{shape:u.outputShape}});return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}const nD={kernelName:Tt,backendName:"webgl",kernelFunc:tD},sD=GE({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:MC,dtype:"bool"}),aD={kernelName:Ct,backendName:"webgl",kernelFunc:sD},rD=GE({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:LC}),iD={kernelName:Et,backendName:"webgl",kernelFunc:rD},oD={kernelName:Rt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:s}=t;return _F(s,!0,n)}},lD=UE({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),uD={kernelName:Dt,backendName:"webgl",kernelFunc:lD},cD=UE({opSnippet:"return float(isinf(x));",dtype:"bool"}),hD={kernelName:_t,backendName:"webgl",kernelFunc:cD},pD=UE({opSnippet:"return float(isnan(x));",dtype:"bool"}),dD={kernelName:Ot,backendName:"webgl",kernelFunc:pD},fD=GE({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:zC,dtype:"bool"}),mD={kernelName:Lt,backendName:"webgl",kernelFunc:fD},gD=GE({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:BC,dtype:"bool"}),yD={kernelName:zt,backendName:"webgl",kernelFunc:gD},bD={kernelName:Bt,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:s,stop:a,num:r}=n,i=PC(s,a,r);return t.makeTensorInfo([i.length],"float32",i)}},xD=UE({opSnippet:"if (isnan(x)) return x;\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:WC}),wD={kernelName:Pt,backendName:"webgl",kernelFunc:xD},kD=UE({opSnippet:"if (isnan(x)) return x;\n  return log(1.0 + x);\n"}),vD={kernelName:Wt,backendName:"webgl",kernelFunc:kD},ID=GE({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),ND={kernelName:Vt,backendName:"webgl",kernelFunc:ID},SD=UE({opSnippet:"return float(!(x >= 1.0));"}),TD={kernelName:Ut,backendName:"webgl",kernelFunc:SD},$D=GE({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),CD={kernelName:Gt,backendName:"webgl",kernelFunc:$D};class ED{constructor(e,t,n,s,a){this.variableNames=["x"],this.outputShape=[];const r=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===a?`inversesqrt(${l})`:1===a?`1.0/(${l})`:`exp(log(${l}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${r}; j <= ${r}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${i}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${o};\n        setOutput(val);\n      }\n    `}}class AD{constructor(e,t,n,s,a){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const r=t,i=e[3]-1;let o;this.outputShape=e;const l=`float(${n}) + float(${s}) * sum`;o=.5===a?`inversesqrt(${l})`:1===a?`1.0/(${l})`:`exp(log(${l}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${r};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${r}; j <= ${r}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${o};\n        setOutput(result);\n      }\n    `}}const RD={kernelName:Ht,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{depthRadius:r,bias:i,alpha:o,beta:l}=s,u=pe().getBool("WEBGL_PACK_NORMALIZATION")?new AD(a.shape,r,i,o,l):new ED(a.shape,r,i,o,l);return n.runWebGLProgram(u,[a],a.dtype)}};class FD{constructor(e,t,n,s,a){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=s,this.beta=a,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${s}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${s})\n                * float(${a})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${a});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const DD={kernelName:jt,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a,y:r,dy:i}=t,{depthRadius:o,bias:l,alpha:u,beta:c}=s,h=new FD(a.shape,o,l,u,c);return n.runWebGLProgram(h,[a,r,i],a.dtype)}};function _D(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reductionIndices:r,keepDims:i}=s,o=a.shape.length,l=V(r,a.shape);let u=l;const c=Oo(u,o),h=null!=c,p=n.shouldExecuteOnCPU([a]);let d=a;if(h){if(p){const e=n.texData.get(d.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=a.shape[c[e]];const s=pE(e,a.shape,a.dtype,c,t);d=n.makeTensorInfo(t,a.dtype),n.texData.get(d.dataId).values=s}else d=aA(a,c,n);u=Lo(u.length,o)}_o("max",u,o);const[f,m]=Fo(d.shape,u);let g,y=f;if(i&&(y=Do(f,l)),p){const e=n.texData.get(d.dataId).values,t=VC(e,O(m),y,a.dtype);g=n.makeTensorInfo(y,a.dtype),n.texData.get(g.dataId).values=t}else g=function(e,t,n,s){const a=O(t),r=ZE({inputs:{x:e},attrs:{shape:[O(e.shape)/a,a]},backend:s}),i=tA(r,e.dtype,"max",s),o=ZE({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(r),s.disposeIntermediateTensorInfo(i),o}(d,m,y,n);return h&&n.disposeIntermediateTensorInfo(d),g}const OD={kernelName:qt,backendName:"webgl",kernelFunc:_D},MD=GE({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:UC}),LD={kernelName:Kt,backendName:"webgl",kernelFunc:MD},zD={kernelName:Xt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t;V$(a,"maxPool");const{filterSize:r,strides:i,pad:o,dimRoundingMode:l}=s;R(Ri(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const u=ki(a.shape,r,i,1,o,l);if(1===u.filterWidth&&1===u.filterHeight&&M(u.inShape,u.outShape))return DE({inputs:{x:a},backend:n});const c=new VA(u,"max",!1);return n.runWebGLProgram(c,[a],a.dtype)}},BD={kernelName:Zt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{filterSize:r,strides:i,pad:o,dataFormat:l,dimRoundingMode:u}=s,c=vi(a.shape,r,i,[1,1,1],o,u,l),h=new UA(c,"max",!1);return n.runWebGLProgram(h,[a],a.dtype)}};class PD{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,s=e.dilationHeight,a=e.effectiveFilterHeight,r=e.effectiveFilterWidth,i=a-1-e.padInfo.top,o=r-1-e.padInfo.left,l=a*r-1;this.userCode=`\n      const ivec2 pads = ivec2(${i}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${a};\n          wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${r}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${l} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${r} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class WD{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,s=e.strideWidth,a=e.dilationDepth,r=e.dilationHeight,i=e.dilationWidth,o=e.effectiveFilterDepth,l=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=o-1-e.padInfo.front,h=l-1-e.padInfo.top,p=u-1-e.padInfo.left,d=o*l*u-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${h}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${o};\n           wD += ${a}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${l};\n              wR += ${r}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${u};\n                wC += ${i}) {\n              float dyC = float(dyCCorner + wC) / ${s}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${d} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${l} * ${u} +\n                  wR * ${u} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const VD={kernelName:Jt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r}=t,i=r,{filterSize:o,strides:l,pad:u,dimRoundingMode:c}=s,h=vi(i.shape,o,l,[1,1,1],u,c),p=new UA(h,"max",!0),d=n.runWebGLProgram(p,[i],i.dtype),f=new WD(h),m=n.runWebGLProgram(f,[a,d],i.dtype);return n.disposeIntermediateTensorInfo(d),m}},UD={kernelName:Yt,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{dy:a,input:r,output:i}=t,o=r;V$([r,i],"maxPoolGrad");const{filterSize:l,strides:u,pad:c,dimRoundingMode:h}=s,p=ki(o.shape,l,u,1,c,h),d=new VA(p,"max",!0),f=n.runWebGLProgram(d,[o],o.dtype),m=new PD(p),g=n.runWebGLProgram(m,[a,f],o.dtype);return n.disposeIntermediateTensorInfo(f),g}},GD={kernelName:Qt,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{filterSize:a,strides:r,pad:i,includeBatchInIndex:o}=t,l=n;R(4===s.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`));const u=[1,1];R(Ri(r,u),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${r} and dilations '${u}'`));const c=ki(s.shape,a,r,u,i),[h,p]=function(e,t,n,s){let a=new VA(n,"max",!1);const r=s.runWebGLProgram(a,[e],"float32");return a=new VA(n,"max",!0,!0,t),[r,s.runWebGLProgram(a,[e],"float32")]}(s,o,c,l);return[h,p]}},HD={kernelName:en,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:s}=e,{keepDims:a,axis:r}=t,i=n,o=s.shape.length,l=V(r,s.shape);let u=l;const c=Oo(u,o),h=null!=c,p=i.shouldExecuteOnCPU([s]),d=[];let f=s;if(h){if(p){const e=i.texData.get(f.dataId).values,t=new Array(o);for(let e=0;e<t.length;e++)t[e]=s.shape[c[e]];const n=pE(e,s.shape,s.dtype,c,t);f=i.makeTensorInfo(t,s.dtype),i.texData.get(f.dataId).values=n}else f=aA(s,c,i);d.push(f),u=Lo(u.length,o)}_o("sum",u,o);const[m,g]=Fo(f.shape,u);let y=m;a&&(y=Do(m,l));const b=function(e,t,n,s){const a=O(t),r=ZE({inputs:{x:e},attrs:{shape:[O(e.shape)/a,a]},backend:s}),i=tA(r,"float32","mean",s),o=ZE({inputs:{x:i},attrs:{shape:n},backend:s});return s.disposeIntermediateTensorInfo(r),s.disposeIntermediateTensorInfo(i),o}(f,g,y,i);for(const e of d)i.disposeIntermediateTensorInfo(e);return b}},jD={kernelName:tn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s,o=a.shape.length,l=V(r,a.shape);let u=l;const c=Oo(u,o);let h=a;null!=c&&(h=oA({inputs:{x:a},backend:n,attrs:{perm:c}}),u=Lo(u.length,a.shape.length)),_o("min",u,o);const[p,d]=Fo(h.shape,u),f=ZE({inputs:{x:h},backend:n,attrs:{shape:[-1,O(d)]}}),m=tA(f,f.dtype,"min",n);let g;return g=ZE(i?{inputs:{x:m},backend:n,attrs:{shape:Do(p,l)}}:{inputs:{x:m},backend:n,attrs:{shape:p}}),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),null!=c&&n.disposeIntermediateTensorInfo(h),g}},qD=GE({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:GC}),KD={kernelName:nn,backendName:"webgl",kernelFunc:qD};class XD{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,a=rC(s),r=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s),l="reflect"===n?0:1;this.userCode=1!==s?`\n      ${a} start = ${a}(${r});\n      ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        for (int i = 0; i < ${s}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${l};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${l};\n          }\n        }\n        ${a} coords = outC - start;\n        setOutput(getX(${o}));\n      }\n    `:`\n        int start = ${r};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${l};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${l};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class YD{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,a=rC(s),r=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=mE("rc",s),l=mE("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h="reflect"===n?0:1;let p="";if(1===s){const e=`\n        ${a} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${h};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${h};\n        }\n        source -= start;\n      `;p=`\n        ${a} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n      `}else{const e=`\n        ${a} source = rc;\n        ${a} lt = ${a}(lessThan(source, start));\n        ${a} gte = ${a}(greaterThanEqual(source, end));\n        ${a} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${h}) +\n                gte * ((end - 1) * 2 - source + ${h});\n        source -= start;\n      `;p=`\n        ${a} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${l.join()}), ${c});\n        ${o[s-1]} += 1;\n        if(${u}) {\n          ${e}\n          result[1] = getChannel(getX(${l.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${o[s-2]} += 1;\n        if(${o[s-2]} < ${this.outputShape[s-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${l.join()}), ${c});\n          ${o[s-1]} += 1;\n          if(${u}) {\n            ${e}\n            result[3] = getChannel(getX(${l.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${a} start = ${a}(${r});\n      const ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const ZD={kernelName:sn,backendName:"webgl",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:s}=e,{paddings:a,mode:r}=n,i=pe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new YD(s.shape,a,r):new XD(s.shape,a,r);return t.runWebGLProgram(i,[s],s.dtype)}},JD=GE({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),QD={kernelName:an,backendName:"webgl",kernelFunc:JD};class e_{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const t_=GE({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),n_={kernelName:ht,backendName:"webgl",kernelFunc:t_},s_="return a - b;",a_=GE({opSnippet:s_,packedOpSnippet:s_,supportsComplex:!0,cpuKernelImpl:uE}),r_={kernelName:rs,backendName:"webgl",kernelFunc:a_};function i_(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{dim:r}=s,i=V([r],a.shape),o=_D({inputs:{x:a},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),l=Do(o.shape,i),u=ZE({inputs:{x:o},backend:n,attrs:{shape:l}}),c=a_({inputs:{a,b:u},backend:n}),h=TF({inputs:{x:c},backend:n}),p=rA({inputs:{x:h},backend:n,attrs:{axis:i,keepDims:!1}}),d=ZE({inputs:{x:p},backend:n,attrs:{shape:l}}),f=t_({inputs:{a:h,b:d},backend:n});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(d),f}const o_={kernelName:qn,backendName:"webgl",kernelFunc:i_},l_={kernelName:rn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{logits:a}=t,{numSamples:r,seed:i,normalized:o}=s,l=o?a:i_({inputs:{logits:a},backend:n,attrs:{dim:a.shape.length-1}}),u=l.shape[0],c=l.shape[1],h=new e_(u,c,r),p=[[i]],d=n.runWebGLProgram(h,[l],"int32",p);return o||n.disposeIntermediateTensorInfo(l),d}},u_={kernelName:ln,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:s}=t;if(n.shouldExecuteOnCPU([s])){const e=n.texData.get(s.dataId),[t,a]=jC(e.values,s.shape,s.dtype);return n.makeTensorInfo(a,s.dtype,t)}let a;return a=pe().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new SE(s.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new vE(s.shape,"if (isnan(x)) return x;\n  return -x;\n"),n.runWebGLProgram(a,[s],s.dtype)}},c_=eu,h_={kernelName:cn,backendName:"webgl",kernelFunc:function(e){vs("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l}=s,u=n.readSync(a.dataId),c=n.readSync(r.dataId),{selectedIndices:h}=c_(u,c,i,o,l);return n.makeTensorInfo([h.length],"int32",new Int32Array(h))}},p_=tu,d_={kernelName:hn,backendName:"webgl",kernelFunc:function(e){vs("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,padToMaxOutputSize:u}=s,c=n.readSync(a.dataId),h=n.readSync(r.dataId),{selectedIndices:p,validOutputs:d}=p_(c,h,i,o,l,u);return[n.makeTensorInfo([p.length],"int32",new Int32Array(p)),n.makeTensorInfo([],"int32",new Int32Array([d]))]}},f_=nu,m_={kernelName:pn,backendName:"webgl",kernelFunc:function(e){vs("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:s}=e,{boxes:a,scores:r}=t,{maxOutputSize:i,iouThreshold:o,scoreThreshold:l,softNmsSigma:u}=s,c=n.readSync(a.dataId),h=n.readSync(r.dataId),p=i,d=o,f=l,m=u,{selectedIndices:g,selectedScores:y}=f_(c,h,p,d,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}};class g_{constructor(e,t,n,s){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${s}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const y_={kernelName:fn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{indices:a}=t,{depth:r,onValue:i,offValue:o}=s,l=O(a.shape),u=new g_(l,r,i,o),c=ZE({inputs:{x:a},backend:n,attrs:{shape:[l]}}),h=n.runWebGLProgram(u,[c],a.dtype);n.disposeIntermediateTensorInfo(c);const p=ZE({inputs:{x:h},backend:n,attrs:{shape:[...a.shape,r]}});return n.disposeIntermediateTensorInfo(h),p}};function b_(e){const{inputs:t,backend:n}=e,{x:s}=t;if("complex64"===s.dtype){const e=cR({inputs:{input:s},backend:n}),t=b_({inputs:{x:e},backend:n}),a=SR({inputs:{input:s},backend:n}),r=b_({inputs:{x:a},backend:n}),i=OE({inputs:{real:t,imag:r},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(r),i}return LF({attrs:{shape:s.shape,dtype:s.dtype,value:"string"===s.dtype?"":0},backend:n})}const x_={kernelName:ms,backendName:"webgl",kernelFunc:b_},w_={kernelName:dn,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:s}=t,{x:a}=n;if("string"===a.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===a.dtype){const t=cR({inputs:{input:a},backend:s}),n=e({inputs:{x:t},backend:s}),r=SR({inputs:{input:a},backend:s}),i=b_({inputs:{x:r},backend:s}),o=OE({inputs:{real:n,imag:i},backend:s});return s.disposeIntermediateTensorInfo(t),s.disposeIntermediateTensorInfo(n),s.disposeIntermediateTensorInfo(r),s.disposeIntermediateTensorInfo(i),o}return LF({attrs:{shape:a.shape,dtype:a.dtype,value:1},backend:s})}},k_={kernelName:mn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{axis:a}=s;if(1===t.length)return CF({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const r=t[0].shape,i=t[0].dtype;t.forEach((e=>{F(r,e.shape,"All tensors passed to stack must have matching shapes"),R(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const o=[],l=CR({inputs:t.map((e=>{const t=CF({inputs:{input:e},backend:n,attrs:{dim:a}});return o.push(t),t})),backend:n,attrs:{axis:a}});return o.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}};class v_{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,a=rC(s),r=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,s);this.userCode=1!==s?`\n      ${a} start = ${a}(${r});\n      ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${a} coords = outC - start;\n          setOutput(getX(${o}));\n        }\n      }\n    `:`\n        int start = ${r};\n        int end = ${i};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class I_{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const s=e.length,a=rC(s),r=t.map((e=>e[0])).join(","),i=t.map(((t,n)=>t[0]+e[n])).join(","),o=mE("rc",s),l=mE("source",s),u=`${o[s-1]} < ${this.outputShape[s-1]}`,c=1===s?"source":`vec2(${l.slice(-2).join()})`,h=[`${a} rc = outputLoc;`,`${o[s-1]} += 1;\n       if(${u}) {\n      `,1===s?"":`}\n       rc = outputLoc;\n       ${o[s-2]} += 1;\n       if(${o[s-2]} < ${this.outputShape[s-2]}) {`,1===s?"":`  ${o[s-1]} += 1;\n         if(${u}) {`],p=1===s?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let d="";for(let e=0,t=1===s?2:4;e<t;e++)d+=`\n        ${h[e]}\n        if (${p}) {\n          result[${e}] = float(value);\n        } else {\n          ${a} source = rc - start;\n          result[${e}] = getChannel(getX(${l.join()}), ${c});\n        }\n      `;d+=1===s?"} ":"}}",this.userCode=`\n      const ${a} start = ${a}(${r});\n      const ${a} end = ${a}(${i});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${d}\n        setOutput(result);\n      }\n    `}}const N_=e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{paddings:r,constantValue:i}=s;if(0===O(a.shape)){const e=r.map(((e,t)=>e[0]+a.shape[t]+e[1]));return LF({backend:n,attrs:{shape:e,value:i,dtype:a.dtype}})}const o=pe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new I_(a.shape,r,i):new v_(a.shape,r,i),l=[[i]];return n.runWebGLProgram(o,[a],a.dtype,l)},S_={kernelName:gn,backendName:"webgl",kernelFunc:N_},T_=GE({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),$_={kernelName:yn,backendName:"webgl",kernelFunc:T_},C_={kernelName:xn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{axis:r,keepDims:i}=s,o=a.shape.length,l=[],u=V(r,a.shape);let c=u;const h=Oo(c,o);let p,d=a;if(null!=h&&(d=oA({inputs:{x:a},backend:n,attrs:{perm:h}}),c=Lo(c.length,o),l.push(d)),_o("prod",c,o),n.shouldExecuteOnCPU([d])){const e=n.texData.get(d.dataId).values,{outVals:t,outShape:s,outDtype:a}=KC(d.shape,d.dtype,e,c);p=n.makeTensorInfo(s,a,t)}else{const[e,t]=Fo(d.shape,c),s=O(t),r=ZE({inputs:{x:d},backend:n,attrs:{shape:[-1,s]}}),i=tA(r,xa(a.dtype),"prod",n);p=ZE({inputs:{x:i},backend:n,attrs:{shape:e}}),l.push(r),l.push(i)}if(i){l.push(p);const e=Do(p.shape,u);p=ZE({inputs:{x:p},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),p}},E_=e=>{const{backend:t,attrs:n}=e,{start:s,stop:a,step:r,dtype:i}=n,o=XC(s,a,r,i);return t.makeTensorInfo([o.length],i,o)},A_={kernelName:wn,backendName:"webgl",kernelFunc:E_},R_=UE({opSnippet:"return 1.0 / x;"}),F_={kernelName:vn,backendName:"webgl",kernelFunc:R_},D_=UE({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),__={kernelName:In,backendName:"webgl",kernelFunc:D_},O_=UE({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),M_={kernelName:En,backendName:"webgl",kernelFunc:O_};class L_{constructor(e,t,n,s,a){this.variableNames=["A"],this.outputShape=[];const[r,i,o,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=a?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class z_{constructor(e,t,n,s,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[r,i,o,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n];let h;h=a?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${h};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const B_={kernelName:$n,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:r,halfPixelCenters:i,size:o}=s,[l,u]=o,c=pe().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new z_(a.shape,l,u,r,i):new L_(a.shape,l,u,r,i);return n.runWebGLProgram(c,[a],"float32")}};class P_{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,a]=t,[,r,i]=e,o=[n&&r>1?s-1:s,n&&i>1?a-1:a],l=[n&&r>1?r-1:r,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${r}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${s-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${a-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const W_={kernelName:Cn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:r}=t,{alignCorners:i}=s,o=new P_(r.shape,a.shape,i);return n.runWebGLProgram(o,[r],r.dtype)}};class V_{constructor(e,t,n,s,a){this.variableNames=["A"],this.outputShape=[];const[r,i,o,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let p;p=a?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${i}.0, ${o}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class U_{constructor(e,t,n,s,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[r,i,o,l]=e;this.outputShape=[r,t,n,l];const u=[s&&t>1?i-1:i,s&&n>1?o-1:o],c=[s&&t>1?t-1:t,s&&n>1?n-1:n],h=s?"0.5":"0.0";let p;p=a?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${u[0]/c[0]},\n          ${u[1]/c[1]},\n          ${u[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${i}.0, ${o}.0,\n                                     ${o}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${h})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${l-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const G_={kernelName:Sn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a}=t,{alignCorners:r,halfPixelCenters:i,size:o}=s,[l,u]=o,c=pe().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new U_(a.shape,l,u,r,i):new V_(a.shape,l,u,r,i);return n.runWebGLProgram(c,[a],a.dtype)}};class H_{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,s,a]=t,[,r,i]=e,o=[n&&r>1?s-1:s,n&&i>1?a-1:a],l=[n&&r>1?r-1:r,n&&i>1?i-1:i],u=o[0]/l[0],c=o[1]/l[1],h=1/u,p=1/c,d=2*Math.ceil(h)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${u});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${h});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${d});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${r}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${i}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${o[0]}) *\n                (float(dyR) / float(${l[0]}));\n\n            float sourceFracCol =\n                float(${o[1]}) *\n                  (float(dyC) / float(${l[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${s}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${a}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const j_={kernelName:Tn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{images:a,dy:r}=t,{alignCorners:i}=s,o=new H_(r.shape,a.shape,i);return n.runWebGLProgram(o,[r],r.dtype)}};class q_{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const s=e.map(((n,s)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(s))).join(","),a=rC(n);this.userCode=`\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${s}));\n      }\n    `}}class K_{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const s=mE("rc",n),a=`${s[n-1]} + 1 < ${this.outputShape[n-1]}`,r=`${s[n-2]} + 1 < ${this.outputShape[n-2]}`,i=rC(n);function o(n){const s=e.map(((s,a)=>function(n,s){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${s[n]} - 1`:`${s[n]}`}(a,n)));return`getChannel(getX(${s.join(",")}), vec2(${s.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${a}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${i} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return o(e)}(s.slice())};\n          if(${a}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",o(e)}(s.slice())};\n          }\n          if(${r}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            if(${a}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",o(e)}(s.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const X_={kernelName:An,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{dims:r}=s,i=a.shape.length,o=V(r,a.shape);if(0===i)return DE({inputs:{x:a},backend:n});const l=pe().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new K_(a.shape,o):new q_(a.shape,o);return n.runWebGLProgram(l,[a],a.dtype)}};class Y_{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],s=e[2];this.outputShape=e;let a="";a="number"==typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${a}\n          if(coordX >= 0 && coordX < ${s} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const Z_={kernelName:bs,backendName:"webgl",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:s}=e,{radians:a,fillValue:r,center:i}=t,o=n,l=new Y_(s.shape,r),[u,c]=tc(i,s.shape[1],s.shape[2]),h=[[u,c,Math.sin(a),Math.cos(a)]];return o.runWebGLProgram(l,[s],s.dtype,h)}},J_=UE({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),Q_={kernelName:Rn,backendName:"webgl",kernelFunc:J_},eO=UE({opSnippet:"return inversesqrt(x);",cpuKernelImpl:YC}),tO={kernelName:Fn,backendName:"webgl",kernelFunc:eO};class nO{constructor(e,t,n,s,a,r,i=!0){this.variableNames=["updates","indices","defaultValue"],this.outputShape=r;const o=rC(a.length),l=rC(r.length);let u="";1===n?u="i":2===n&&(u="i, j");const c=`getIndices(${u})`;let h="";1===s?h="i":2===s&&(h="i, coords[1]");const p=`getUpdates(${h})`,d=t>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${a});\n\n        void main() {\n          ${l} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${c});\n              flattenedIndex += index * ${d};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${p};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const sO={kernelName:Dn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{indices:a,updates:r}=t,{shape:i}=s,{sliceRank:o,numUpdates:l,sliceSize:u,strides:c,outputSize:h}=cc(0,a,i),p=[h/u,u];if(0===h)return n.makeTensorInfo(i,a.dtype);const d=ZE({inputs:{x:a},backend:n,attrs:{shape:[l,o]}}),f=ZE({inputs:{x:r},backend:n,attrs:{shape:[l,u]}}),m=n.makeTensorInfo([],"float32",new Float32Array([0])),g=new nO(l,o,d.shape.length,f.shape.length,c,p),y=n.runWebGLProgram(g,[f,d,m],f.dtype),b=ZE({inputs:{x:y},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(y),n.disposeIntermediateTensorInfo(m),b}};class aO{constructor(e,t,n,s){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];const a=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,r=2===pe().getNumber("WEBGL_VERSION")?"while (left < right) {":a,i="left"===s?"<":"<=";this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${r}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${i} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const rO={kernelName:_n,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sortedSequence:a,values:r}=t,{side:i}=s,o=new aO(a.shape[0],a.shape[1],r.shape[1],i),l=[[a.shape[1]]];return n.runWebGLProgram(o,[a,r],"int32",l)}};class iO{constructor(e,t,n){let s,a;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)a="resRC",s="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[],i=[];for(let s=0;s<t.length;s++)i.push(`${n[s]}`),s<e&&r.push(`${n[s]}`);s=r.join(),a=i.join()}const r=rC(n);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        float cVal = getC(${s});\n        if (cVal >= 1.0) {\n          setOutput(getA(${a}));\n        } else {\n          setOutput(getB(${a}));\n        }\n      }\n    `}}const oO={kernelName:On,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:s,t:a,e:r}=t,i=new iO(s.shape.length,a.shape,a.shape.length);return n.runWebGLProgram(i,[s,a,r],ba(a.dtype,r.dtype))}},lO=UE({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${hc};\n  float scale = ${pc};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),uO={kernelName:Mn,backendName:"webgl",kernelFunc:lO},cO=UE({opSnippet:"if (isnan(x)) return x;\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:JC}),hO={kernelName:Wn,backendName:"webgl",kernelFunc:cO},pO=UE({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),dO={kernelName:Pn,backendName:"webgl",kernelFunc:pO},fO=UE({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),mO={kernelName:zn,backendName:"webgl",kernelFunc:fO},gO=UE({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),yO={kernelName:Bn,backendName:"webgl",kernelFunc:gO},bO=UE({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),xO={kernelName:Vn,backendName:"webgl",kernelFunc:bO},wO={kernelName:Hn,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{blockShape:r,paddings:i}=s;R(a.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const o=r.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...i);for(let e=1+r.length;e<a.shape.length;++e)l.push([0,0]);const u=[],c=N_({inputs:{x:a},backend:n,attrs:{paddings:l,constantValue:0}}),h=nc(c.shape,r,o,!1),p=sc(h.length,r.length,!1),d=ac(c.shape,r,o,!1),f=ZE({inputs:{x:c},backend:n,attrs:{shape:h}}),m=oA({inputs:{x:f},backend:n,attrs:{perm:p}}),g=ZE({inputs:{x:m},backend:n,attrs:{shape:d}});return u.push(c),u.push(f),u.push(m),u.forEach((e=>n.disposeIntermediateTensorInfo(e))),g}},kO={kernelName:Kn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:s,values:a,denseShape:r,defaultValue:i}=t;if(1!==r.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${r.shape}`);if(2!==s.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${s.shape}`);if(1!==a.shape.length)throw new Error(`Values must be a vector, saw:\n         ${a.shape}`);if(0!==i.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${i.shape}`);const o=n.readSync(s.dataId),l=n.readSync(a.dataId),u=n.readSync(r.dataId),c=n.readSync(i.dataId)[0],[h,p,d,f,m]=tE(o,s.shape,s.dtype,l,a.dtype,u,c);return[n.makeTensorInfo(p,s.dtype,h),n.makeTensorInfo([p[0]],a.dtype,d),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],s.dtype,new Int32Array(m))]}},vO={kernelName:Xn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:s,inputShape:a,newShape:r}=t;if(2!==s.shape.length)throw new Error(`Input indices should be a matrix but received shape ${s.shape}`);if(1!==a.shape.length)throw new Error(`Input shape should be a vector but received shape ${a.shape}`);if(1!==r.shape.length)throw new Error(`Target shape should be a vector but received shape ${r.shape}`);const i=Array.from(n.readSync(a.dataId)),o=n.readSync(s.dataId),l=Array.from(n.readSync(r.dataId)),[u,c,h]=nE(o,s.shape,s.dtype,i,l);return[n.makeTensorInfo(c,s.dtype,u),n.makeTensorInfo([h.length],r.dtype,new Int32Array(h))]}},IO={kernelName:Yn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:a,segmentIds:r}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${a.shape}`);if(1!==r.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${r.shape}`);const i=n.readSync(s.dataId),o=n.readSync(a.dataId),l=n.readSync(r.dataId),[u,c]=sE(i,s.shape,s.dtype,o,l,!0);return n.makeTensorInfo(c,s.dtype,u)}},NO={kernelName:Zn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:s,indices:a,segmentIds:r}=t;if(s.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${a.shape}`);if(1!==r.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${r.shape}`);const i=n.readSync(s.dataId),o=n.readSync(a.dataId),l=n.readSync(r.dataId),[u,c]=sE(i,s.shape,s.dtype,o,l);return n.makeTensorInfo(c,s.dtype,u)}},SO={kernelName:Jn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{sparseIndices:a,sparseValues:r,defaultValue:i}=t,{outputShape:o}=s,{sliceRank:l,numUpdates:u,sliceSize:c,strides:h,outputSize:p}=cc(0,a,o);if("string"===r.dtype){const e=n.bufferSync(a),t=n.bufferSync(r),s=Ys(n.readSync(i.dataId)[0]),d=ZC(e,t,o,p,c,u,l,h,s,!1);return n.makeTensorInfo(o,d.dtype,d.values)}const d=new nO(u,l,a.shape.length,r.shape.length,h,[p,1],!1),f=n.runWebGLProgram(d,[r,a,i],r.dtype),m=ZE({inputs:{x:f},backend:n,attrs:{shape:o}});return n.disposeIntermediateTensorInfo(f),m}},TO={kernelName:jn,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{numOrSizeSplits:r,axis:i}=s,o=V(i,a.shape)[0],l=_c(a,r,o),u=a.shape.length,c=new Array(u).fill(0),h=a.shape.slice();return l.map((e=>{const t=[...h];t[o]=e;const s=sR({inputs:{x:a},backend:n,attrs:{begin:c,size:t}});return c[o]+=e,s}))}},$O="return sqrt(x);",CO=UE({opSnippet:$O,packedOpSnippet:$O,cpuKernelImpl:aE}),EO={kernelName:Un,backendName:"webgl",kernelFunc:CO},AO={kernelName:es,backendName:"webgl",kernelFunc:UE({opSnippet:"return x * x;"})},RO="return (a - b) * (a - b);",FO=GE({opSnippet:RO,packedOpSnippet:RO}),DO={kernelName:Qn,backendName:"webgl",kernelFunc:FO},_O={kernelName:gs,backendName:"webgl",kernelFunc:function({inputs:e,attrs:t,backend:n}){const{x:s}=e,a=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${t.alpha});\n  `,r=new vE(s.shape,a);return n.runWebGLProgram(r,[s],s.dtype)}};class OO{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const s=n.length,a=rC(n.length),r=rC(n.length);let i="";if(1===s)i="coords * strides + begin";else{let e=0;i=n.map(((t,s)=>(e++,1===n.length?`coords * strides[${s}] + begin[${s}]`:`coords[${e-1}] * strides[${s}] + begin[${s}]`))).join(",")}this.userCode=`\n      ${a} begin = ${a}(${e});\n      ${a} strides = ${a}(${t});\n\n      void main() {\n        ${r} coords = getOutputCoords();\n        setOutput(getX(${i}));\n      }\n    `}}const MO={kernelName:ts,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{begin:r,end:i,strides:o,beginMask:l,endMask:u,ellipsisMask:c,newAxisMask:h,shrinkAxisMask:p}=s,{finalShapeSparse:d,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:x,strides:w}=ti(a.shape,r,i,o,l,u,c,h,p);let k;if(m)k=ZE({inputs:{x:a},backend:n,attrs:{shape:f}});else if(g||y){R(a.shape.length>=1,(()=>`Input must have rank at least 1, got: ${a.shape.length}`));const e=Vr(b,x,w),t=sR({inputs:{x:a},backend:n,attrs:{begin:b,size:e}});k=ZE({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else if(n.shouldExecuteOnCPU([a])){const e=n.readSync(a.dataId),t=Ir(a.shape,a.dtype,e),s=rE(d,t,w,b);k=n.makeTensorInfo(f,a.dtype,s.values)}else{const e=new OO(b,w,d);k=n.runWebGLProgram(e,[a],a.dtype)}const v=ZE({inputs:{x:k},backend:n,attrs:{shape:f}});return n.disposeIntermediateTensorInfo(k),v}},LO={kernelName:ns,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{separator:a,nGramWidths:r,leftPad:i,rightPad:o,padWidth:l,preserveShortSequences:u}=s,{data:c,dataSplits:h}=t,p=n.readSync(c.dataId),d=n.readSync(h.dataId),[f,m]=iE(p,d,a,r,i,o,l,u);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(h.shape,"int32",m)]}},zO={kernelName:ss,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{skipEmpty:a}=s,{input:r,delimiter:i}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(1!==r.shape.length)throw new Error(`Input must be a vector, got shape: ${r.shape}`);if(0!==i.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${i.shape}`);const o=n.readSync(r.dataId),l=n.readSync(i.dataId)[0],[u,c,h]=oE(o,l,a),p=c.length;return[n.makeTensorInfo([p,2],"int32",u),n.makeTensorInfo([p],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(h))]}},BO={kernelName:as,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{numBuckets:a}=s,{input:r}=t;if("string"!==r.dtype)throw new Error("Input must be of datatype string");if(a<=0)throw new Error("Number of buckets must be at least 1");const i=n.readSync(r.dataId),o=lE(i,a);return n.makeTensorInfo(r.shape,"int32",o)}},PO=UE({opSnippet:"return tan(x);"}),WO={kernelName:is,backendName:"webgl",kernelFunc:PO},VO=UE({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),UO={kernelName:os,backendName:"webgl",kernelFunc:VO};class GO{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[s]*t[s];this.outputShape=n,this.rank=n.length;const s=rC(this.rank),a=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],s=[];for(let t=0;t<e.length;t++)s.push(`imod(${n[t]}, ${e[t]})`);return s.join()}(e);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}function HO(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{reps:r}=s;if("string"===a.dtype||a.shape.length>5){const e=n.readSync(a.dataId),t="string"===a.dtype?e.map((e=>Ys(e))):e,s=Ir(a.shape,a.dtype,t),i=cE(s,r);return n.makeTensorInfo(i.shape,i.dtype,i.values)}const i=new GO(a.shape,r);return n.runWebGLProgram(i,[a],a.dtype)}const jO={kernelName:ls,backendName:"webgl",kernelFunc:HO};class qO{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class KO{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function XO(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function YO(e){let t=1;for(;t<e;)t*=2;return t}const ZO={kernelName:us,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a}=t,{k:r,sorted:i}=s,o=pe().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=pe().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),u=a.shape,c=u[u.length-1];if(n.shouldExecuteOnCPU([a])||c<o||r>l){const e=n.readSync(a.dataId),[t,s]=hE(e,u,a.dtype,r,i);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(s.shape,s.dtype,s.values)]}if(0===r)return u[u.length-1]=0,[n.makeTensorInfo(u,a.dtype,[]),n.makeTensorInfo(u,"int32",[])];if(1===c)return[a,LF({attrs:{shape:u,dtype:"int32",value:0},backend:n})];const h=n.texData.get(a.dataId),p=null!==h&&h.isPacked,d=p?n.unpackTensor(a):a,f=O(u)/c,m=ZE({inputs:{x:d},attrs:{shape:[f,c]},backend:n});p&&XO(n,d);const g=YO(r),y=YO(c);let b=null;const x=()=>null===b?[m,m]:[m,b],w=(e,t,s)=>{const a=x(),r=new qO(s),i=[[c],[null===b?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],o=b;b=n.runWebGLProgram(r,a,"int32",i),XO(n,o)};for(let e=1;e<g;e*=2){const t=2*e;for(let n=e;n>=1;n/=2)w(t,n,[f,y])}for(let e=y;e>g;e/=2){const t=x(),s=new KO([f,e/2]),a=[[c],[null===b?1:0],[g]],r=b;b=n.runWebGLProgram(s,t,"int32",a),XO(n,r);const i=g/2,o=2*i;for(let e=i;e>=1;e/=2)w(o,e,b.shape)}let k=b;b=sR({inputs:{x:b},backend:n,attrs:{begin:0,size:[f,r]}}),XO(n,k);let v=tD({inputs:{x:m,indices:b},backend:n,attrs:{axis:1,batchDims:1}});XO(n,m);const I=u.slice(0,-1);I.push(r),k=b,b=ZE({inputs:{x:b},attrs:{shape:I},backend:n}),XO(n,k);const N=v;return v=ZE({inputs:{x:v},attrs:{shape:I},backend:n}),XO(n,N),[v,b]}};class JO{constructor(e,t,n,s,a,r){this.variableNames=["Image","Transforms"],this.outputShape=r;const i="nearest"===n?1:2;let o;switch(s){case"constant":default:o=1;break;case"reflect":o=2;break;case"wrap":o=3;break;case"nearest":o=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${o} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${o} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${a});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${a});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${i} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const QO={kernelName:cs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{image:a,transforms:r}=t,{interpolation:i,fillMode:o,fillValue:l,outputShape:u}=s,[c,h,p,d]=a.shape,[f,m]=null!=u?u:[h,p],g=new JO(h,p,i,o,l,[c,f,m,d]);return n.runWebGLProgram(g,[a,r],"float32")}},eM={kernelName:ps,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:s}=e,{axis:a}=n,{x:r}=t;V$(r,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const i=s.readSync(r.dataId),{outputValues:o,outputShape:l,indices:u}=dE(i,a,r.shape,r.dtype);return[s.makeTensorInfo(l,r.dtype,o),s.makeTensorInfo([u.length],"int32",u)]}},tM={kernelName:ds,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{value:a}=t;let{axis:r}=s;r<0&&(r+=a.shape.length);const i=a,o=i.shape.length,l=a.shape[r],u=new Array(o-1);let c=0;for(let e=0;e<o;e++)e!==r&&(u[c++]=i.shape[e]);const h=[],p=new Array(o).fill(0),d=i.shape.slice();d[r]=1;const f=new Array(l);for(let e=0;e<f.length;e++){p[r]=e;const t=sR({inputs:{x:i},backend:n,attrs:{begin:p,size:d}}),s=ZE({inputs:{x:t},backend:n,attrs:{shape:u}});f[e]=s,h.push(t)}return h.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class nM{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,s=e.batchSize,a=e.inSize,r=e.numSegments,i=r*Math.ceil(a/n);this.outputShape=[s,i];const o=4*Math.floor(n/4),l=n%4,u="\n        sumValue += dot(values, segFilter);\n    ";let c="";a%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `);let h="";a%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${h}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${r})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${r})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${o}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${u}\n        }\n\n        int inIdx = inOffset + ${o};\n        if (${1===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${u}\n        } else if (${2===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${u}\n        } else if (${3===l}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${u}\n        }\n        setOutput(sumValue);\n      }\n    `}}const sM=[cA,pA,fA,gA,xA,vA,IA,NA,AA,RA,DA,OA,LA,BA,WA,GA,HA,KA,XA,YA,QA,rR,iR,oR,pR,mR,bR,ME,kR,ER,OR,PR,WR,VR,UR,GR,jR,KR,YR,nF,sF,aF,iF,uF,pF,dF,mF,yF,bF,wF,kF,IF,SF,$F,EF,FF,OF,zF,PF,UF,HF,KF,YF,ZF,QF,nD,aD,iD,_E,oD,TR,uD,hD,dD,BE,mD,yD,bD,wD,vD,ND,TD,CD,RD,DD,OD,LD,zD,BD,VD,UD,GD,HD,jD,KD,ZD,QD,l_,YE,u_,h_,d_,m_,uR,y_,w_,k_,S_,$_,VE,C_,A_,hR,n_,F_,__,M_,JE,B_,W_,G_,j_,X_,Z_,Q_,tO,sO,rO,oO,uO,hO,dO,mO,yO,aR,o_,xO,wO,kO,vO,IO,NO,SO,TO,EO,AO,DO,_O,MO,LO,zO,BO,r_,iA,WO,UO,jO,ZO,QO,lA,eM,tM,{kernelName:fs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:s}=e,{x:a,segmentIds:r}=t,{numSegments:i}=s,o=a.shape.length,l=[];let u=0;const c=Oo([u],o);let h=a;null!=c&&(h=oA({inputs:{x:a},backend:n,attrs:{perm:c}}),l.push(h),u=Lo(1,o)[0]);const p=Kc(h.shape,u,i),d=O([h.shape[u]]),f=ZE({inputs:{x:h},backend:n,attrs:{shape:[-1,d]}});l.push(f);const m=xa(a.dtype),g=(e,t,s,a,r)=>{const i=e.shape[0],o=e.shape[1],u=qc(o,r),c=new nM({windowSize:u,inSize:o,batchSize:i,numSegments:r},t),h=n.compileAndRun(c,[e,s],a);if(l.push(h),h.shape[1]===r)return h;const p=E_({backend:n,attrs:{start:0,stop:r,step:1,dtype:"float32"}}),d=HO({inputs:{x:p},backend:n,attrs:{reps:[o/u]}});return l.push(p),l.push(d),g(h,t,d,a,r)},y=ZE({inputs:{x:g(f,"unsortedSegmentSum",r,m,i)},backend:n,attrs:{shape:p}});let b=y;if(null!=c){l.push(y);const e=Mo(c);b=oA({inputs:{x:b},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},x_];for(const e of sM)Es(e);const aM=self;let rM,iM,oM,lM,uM,cM;aM.addEventListener("message",(async e=>{const{action:t,data:n,id:s}=e.data;switch(t){case"init":await(async e=>{rM=Wa(0),iM=Wa(0),oM=Wa(0),lM=Wa(0),uM=Wa(.25),cM=await async function(e,t={}){if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"==typeof e&&(e=function(e){return e.endsWith("/")||(e+="/"),`${e}model.json?tfjs-format=file`}(e));const n=new Tw(e,t);return await n.load(),n}("http://r3dg6y3l0.hd-bkt.clouddn.com/WebRTC/model/model.json");const t=Uo([e.height,e.width,3]),n=li((()=>t.expandDims(0).div(255))),[s,a,r,i,o,l]=await cM.executeAsync({src:n,r1i:rM,r2i:iM,r3i:oM,r4i:lM,downsample_ratio:uM},["fgr","pha","r1o","r2o","r3o","r4o"]);ui([t,n,s,a,rM,iM,oM,lM]),[rM,iM,oM,lM]=[r,i,o,l]})(n),aM.postMessage({id:s});break;case"perform":const e=await(async(e,t)=>{await Yu();const n=Br(e),s=li((()=>n.expandDims(0).div(255))),[a,r,i,o,l,u]=await cM.executeAsync({src:s,r1i:rM,r2i:iM,r3i:oM,r4i:lM,downsample_ratio:uM},["fgr","pha","r1o","r2o","r3o","r4o"]),c=(async(e,t,n)=>{const s=li((()=>{const n=null!==e?e.squeeze(0).mul(255).cast("int32"):uo([t.shape[1],t.shape[2],3],255,"int32"),s=null!==t?t.squeeze(0).mul(255).cast("int32"):uo([e.shape[1],e.shape[2],1],255,"int32");return Vi([n,s],-1)}));e&&e.dispose(),t&&t.dispose();const[a,r]=s.shape.slice(0,2),i=new Uint8ClampedArray(await s.data());for(let e=0;e<i.length;e+=4)255!==i[e+3]&&(i[e]=n.data[e],i[e+1]=n.data[e+1],i[e+2]=n.data[e+2],i[e+3]=n.data[e+3]);const o=new ImageData(i,r,a);return s.dispose(),o})(a.clone(),r.clone(),t);return ui([n,s,a,r,rM,iM,oM,lM]),[rM,iM,oM,lM]=[i,o,l,u],c})(n.imageData,n.bgImgData);aM.postMessage({id:s,data:e})}}))})()})();